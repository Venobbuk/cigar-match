/**
 * KT Cigar Mappings - Advanced Brand and Series Recognition
 * Contains comprehensive mappings and pattern recognition for cigar brands and series
 * Enhanced with more robust pattern matching and intelligent scoring algorithms
 *
 * Version: 4.1.0 - Intelligent Extraction and Matching with Improved Accuracy
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

/**
 * KT_Cigar_Debug - Custom debug logging for the cigar matching system
 * Provides detailed logging of matching operations to help troubleshoot issues
 */
class KT_Cigar_Debug {
    // Debug log file path
    private static $log_file = '';
    
    // Debug level
    private static $debug_level = 0; // 0 = off, 1 = errors only, 2 = basic info, 3 = verbose
    
    // Max log file size (2MB)
    private static $max_log_size = 2097152;
    
    // Initialize debug system
    public static function init($log_file = '', $debug_level = 2) {
        // Set log file location (default to plugin directory if not specified)
        if (empty($log_file)) {
            $upload_dir = wp_upload_dir();
            self::$log_file = $upload_dir['basedir'] . '/cigar_matcher_debug.log';
        } else {
            self::$log_file = $log_file;
        }
        
        self::$debug_level = $debug_level;
        
        // Check if log file exists and exceeds size limit
        if (file_exists(self::$log_file) && filesize(self::$log_file) > self::$max_log_size) {
            self::rotate_log();
        }
        
        // Create log file if it doesn't exist
        if (!file_exists(self::$log_file) && self::$debug_level > 0) {
            self::log_header();
        }
        
        // Test log file writability
        if (self::$debug_level > 0) {
            $test_write = @file_put_contents(self::$log_file, "", FILE_APPEND);
            if ($test_write === false) {
                error_log("KT_Cigar_Debug: Unable to write to log file at " . self::$log_file);
                // Try to create log file in system temp directory as fallback
                $temp_dir = sys_get_temp_dir();
                self::$log_file = $temp_dir . '/cigar_matcher_debug.log';
                self::log_header();
            }
        }
    }
    
    // Rotate log file (keep last 100KB of log)
    private static function rotate_log() {
        if (file_exists(self::$log_file)) {
            $content = @file_get_contents(self::$log_file);
            if ($content !== false) {
                // Keep only the last 100KB of the log
                $content = substr($content, -102400);
                @file_put_contents(self::$log_file, "--- LOG ROTATED DUE TO SIZE [" . date('Y-m-d H:i:s') . "] ---\n" . $content);
            }
        }
    }
    
    // Write header to log file
    private static function log_header() {
        $header = "=======================================================\n";
        $header .= "KT Cigar Matcher Debug Log - Started: " . date('Y-m-d H:i:s') . "\n";
        $header .= "PHP Version: " . PHP_VERSION . " | OS: " . PHP_OS . "\n";
        $header .= "=======================================================\n\n";
        @file_put_contents(self::$log_file, $header);
    }
    
    // Log a message with timestamp
    public static function log($message, $level = 2, $context = '') {
        if (self::$debug_level < $level || self::$debug_level == 0) {
            return; // Skip if debug level is lower than message level
        }
        
        // Check file size before logging
        if (file_exists(self::$log_file) && filesize(self::$log_file) > self::$max_log_size) {
            self::rotate_log();
        }
        
        if (!empty($context)) {
            $context = "[$context] ";
        }
        
        $log_entry = date('Y-m-d H:i:s') . " {$context}{$message}\n";
        $result = @file_put_contents(self::$log_file, $log_entry, FILE_APPEND);
        
        // If we couldn't write to the log, try system error log as last resort
        if ($result === false) {
            error_log("KT_Cigar_Matcher: " . $message);
        }
    }
    
    // Log match details - concise but informative format
    public static function log_match($supplier_title, $internal_title, $score, $match_type, $debug_info) {
        if (self::$debug_level < 2) return;
        
        // Check file size before logging
        if (file_exists(self::$log_file) && filesize(self::$log_file) > self::$max_log_size) {
            self::rotate_log();
        }
        
        // First line: Basic match info
        $log_entry = "MATCH: " . mb_substr($supplier_title, 0, 30) . " => " . 
                     mb_substr($internal_title, 0, 30) . " | " . 
                     round($score, 1) . "% ($match_type)";
        
        // Add supplier details like brand
        if (isset($debug_info['extracted_supplier'])) {
            $log_entry .= " | Brand: " . ($debug_info['extracted_supplier']['brand'] ?? 'none');
        }
        
        if (isset($debug_info['year_extraction'])) {
            $log_entry .= " | Years: " . ($debug_info['year_extraction']['supplier_year'] ?? '') . 
                          " / " . ($debug_info['year_extraction']['internal_year'] ?? '');
        }
        
        @file_put_contents(self::$log_file, $log_entry . "\n", FILE_APPEND);
        
        // Second line: Detailed extracted info
        $detail_line = "       Extracted: ";
        
        if (isset($debug_info['extracted_supplier'])) {
            $supplier_info = $debug_info['extracted_supplier'];
            $detail_line .= "Brand=" . ($supplier_info['brand'] ?? 'none') . ", ";
            $detail_line .= "Model=" . ($supplier_info['model'] ?? 'none') . ", ";
            $detail_line .= "Vitola=" . ($supplier_info['vitola'] ?? 'none') . ", ";
            
            if (isset($supplier_info['dimension_info'])) {
                $dim = $supplier_info['dimension_info'];
                $detail_line .= "Ring=" . ($dim['ring_gauge'] ?? 'none') . ", ";
                $detail_line .= "Length=" . ($dim['length'] ?? 'none') . ", ";
            }
            
            $detail_line .= "Edition=" . ($supplier_info['special_edition'] ?? 'none');
        } else {
            $detail_line .= "No extraction data";
        }
        
        @file_put_contents(self::$log_file, $detail_line . "\n", FILE_APPEND);
    }
    
    // Clear log file
    public static function clear_log() {
        if (file_exists(self::$log_file)) {
            @unlink(self::$log_file);
            self::log_header();
        }
    }
}


// static data 9999
// 
// 
class KT_Cigar_Mappings {
    // Filter words that don't help in matching
    private static $common_filter_words = array(
        // Basic Chinese filter words
        '盒', '盒装', 'box', '装', '只', '支', '五只', '五支', '三只', '三支', 
        '四只', '四支', 'pcs', '片', '条', '整盒', '整箱', '带盒', '带管', 
        '铝管装', '礼盒', '普通装', '单支', '裸支', '非卖品', '定制', '茄', 
        '雪茄', 'cigar', 'cigars', '烟', '单盒', '高端', '限量', '限定', '特殊', 
        '特制', '精选', '厂家', '正品', '产品', '精美', '小', '大', '中号', '特号', 
        '产地', '古巴', '古代', 'cuba', '全球', '包邮', '正品', '原装', '现货', 
        '新品', '无盒', '年', '年份', '打火机', 
        // Additional Chinese filter words
        '正宗', '进口', '原厂', '手工', '传统', '珍藏', '稀有', '收藏', '经典',
        '香味', '口感', '香气', '味道', '醇厚', '浓郁', '清淡', '顺滑', '复杂',
        '平衡', '均衡', '层次', '丰富', '细腻', '圆润', '柔和', '强烈', '温和',
        '烟丝', '烟叶', '烟草', '烟根', '烟身', '烟头', '烟尾', '烟灰', '烟斗',
        '烟嘴', '烟道', '烟油', '香烟', '雪茄烟', '雪茄店', '雪茄馆', '雪茄吧',
        // English common words
        'the', 'and', 'for', 'with', 'from', 'this', 'that', 'these', 'those', 
        'of', 'in', 'on', 'at', 'by', 'to', 'a', 'an', 'it', 'is', 'are', 'was', 
        // Chinese common words
        '有', '是', '的', '了', '在', '和', '与', '或', '不', '很', '也', '就',
        '我', '你', '他', '她', '它', '我们', '你们', '他们', '她们', '它们',
        '这', '那', '这些', '那些', '这个', '那个', '什么', '为什么', '怎么',
        '如何', '何时', '何地', '何人', '何物', '何事', '何种', '何样', '多少'
    );

    /**
     * Get mappings of Cuban cigar brands with their Chinese variations
     */
    public static function get_cuban_brand_mappings() {
        return array(
            // Top Cuban Brands with multiple Chinese naming variations
            'cohiba' => array('高希霸', '科伊巴', '科希巴', '科伊瓦', '科巴', '哥希霸', '哥伊巴', '柯希巴', '可希巴', '寇希巴', 'cohiba'),
            'montecristo' => array('蒙特', '蒙特克里斯托', '蒙特克里斯多', '蒙特西托', '蒙德克里斯多', '蒙特利斯托', '蒙克', '蒙特克里托', '蒙特利多', '蒙泰克里斯托', 'montecristo', 'monte'),
            'romeo y julieta' => array('罗密欧', '罗密欧与朱丽叶', '罗密欧朱丽叶', '罗密欧与茱丽叶', '罗密欧茱丽叶', '罗密欧与朱丽叶', '罗密欧朱丽叶', '罗密欧朱利叶', '罗密欧与朱利叶', '罗朱', 'romeo', 'romeo y julieta', 'r&j'),
            'partagas' => array('帕特加斯', '帕塔加斯', '帕达加斯', '帕塔嘉斯', '帕塔加思', '帕特嘉斯', '巴塔加斯', '帕塔加', '帕达嘉斯', '帕特加', 'partagas'),
            'h. upmann' => array('优佩曼', '乌普曼', '乌帕曼', '邬普曼', '尤普曼', '乌普曼', '哈瓦那优普曼', '优普曼', '诶查厄普曼', '赫乌普曼', 'h. upmann', 'upmann', 'h upmann'),
            'hoyo de monterrey' => array('好友', '霍约蒙特雷', '蒙特雷好友', '何友', '好友蒙特雷', '蒙特雷', '好友德蒙特雷', '霍约德蒙特雷', '好友山景', '豪友', 'hoyo', 'hdm'),
            'bolivar' => array('波利瓦尔', '玻利瓦尔', '博利瓦尔', '玻利瓦', '博利瓦', '波利瓦', '玻利瓦儿', '博利瓦儿', '波利瓦儿', '玻利华尔', 'bolivar'),
            'trinidad' => array('特立尼达', '特立达', '特立尼达德', '特立尼', '特立尼特', '特立尼达得', '特利尼达', '特利尼', '特利尼特', '特丽尼达', 'trinidad'),
            'san cristobal de la habana' => array('圣克里斯托巴尔', '圣克里斯托瓦尔', '圣克里斯托', '圣克', '哈瓦那圣克', '圣克里斯多巴尔', '圣克里斯托', '圣克里', '圣科里斯托瓦尔', '圣克里托巴尔', 'san cristobal', 'scl'),
            'juan lopez' => array('胡安·洛佩兹', '胡安洛佩兹', '胡安·洛佩斯', '胡安洛佩斯', '胡安·洛培兹', '胡安洛培兹', '胡安·洛培斯', '胡安洛培斯', '璜·洛佩兹', '璜洛佩兹', 'juan lopez'),
            'el rey del mundo' => array('雷伊世界', '世界之王', '雷德蒙多', '雷伊德尔蒙多', '雷伊德尔蒙度', '雷伊德尔蒙道', '雷伊', '世界雷伊', '雷伊世界王', '世界之王雷伊', 'rey del mundo', 'erdm'),
            'quai d\'orsay' => array('奥赛码头', '多尔塞码头', '多赛码头', '奥尔赛码头', '多赛', '奥赛', '多尔赛', '奥尔塞', '多塞', '奥塞', 'quai dorsay', 'dorsay'),
            'diplomaticos' => array('外交官', '迪普洛马蒂克斯', '迪普洛马蒂科斯', '迪普洛马蒂', '迪普', '外交', '迪普洛', '迪普洛马', '迪普洛马蒂', '迪普洛马特', 'diplomaticos'),
            'rafael gonzalez' => array('拉斐尔·冈萨雷斯', '拉菲尔·冈萨雷斯', '拉斐尔冈萨雷斯', '拉菲尔冈萨雷斯', '拉法尔·贡萨勒斯', '拉法尔贡萨勒斯', '拉斐尔·贡萨雷斯', '拉斐尔贡萨雷斯', '拉菲尔', '拉斐尔', 'rafael gonzalez'),
            'fonseca' => array('丰塞卡', '方塞卡', '丰塞克', '封塞卡', '方塞克', '丰赛卡', '封赛卡', '封世家', '封斯卡', '豐塞卡', 'fonseca'),
            'sancho panza' => array('桑丘·潘沙', '桑丘潘沙', '桑乔·潘萨', '桑乔潘萨', '桑丘·潘查', '桑丘潘查', '桑乔·潘扎', '桑乔潘扎', '桑丘', '潘沙', 'sancho panza'),
            'la gloria cubana' => array('古巴荣耀', '古巴光荣', '古巴荣光', '古巴格洛瑞亚', '古巴拉格洛瑞亚', '古巴格洛丽亚', '荣耀古巴', '荣光古巴', '光荣古巴', '拉格洛瑞亚', 'la gloria cubana', 'lgc'),
            'por larranaga' => array('保拉拉纳加', '波拉拉纳加', '波尔拉纳加', '波尔拉拉那加', '波拉腊那加', '保拉拉那加', '保拉腊那加', '波尔拉腊那加', '拉纳加', '保拉', 'por larranaga'),
            'quintero' => array('昆特罗', '金特罗', '琴特罗', '坤特罗', '群特罗', '坤特洛', '坤特罗斯', '群塔罗', '昆塔罗', '金塔罗', 'quintero'),
            'jose l. piedra' => array('何塞·皮德拉', '何塞皮德拉', '霍塞·皮埃德拉', '霍塞皮埃德拉', '何塞·彼德拉', '何塞彼德拉', '霍塞·彼埃德拉', '霍塞彼埃德拉', '皮德拉', '彼德拉', 'jose l piedra', 'jlp'),
            'vegueros' => array('韦格罗斯', '维格罗斯', '韦格洛斯', '维格洛斯', '韦格', '维格', '韦古罗斯', '维古罗斯', '韦古洛斯', '维古洛斯', 'vegueros'),
            'punch' => array('潘趣', '潘虚', '潘切', '邦切', '邦趣', '邦虚', '盘趣', '盘虚', '盘切', '潘什', 'punch'),
            'saint luis rey' => array('圣路易斯雷伊', '圣路易王', '圣路易斯·雷伊', '圣路易斯王', '圣路易王', '圣雷伊', '圣路易士雷伊', '圣路易士王', '圣路易斯', '圣路易', 'saint luis rey', 'slr'),
            'ramon allones' => array('雷蒙·阿隆尼斯', '雷蒙阿隆尼斯', '莱蒙·阿罗尼斯', '莱蒙阿罗尼斯', '拉蒙·阿隆内斯', '拉蒙阿隆内斯', '雷蒙·阿洛尼斯', '雷蒙阿洛尼斯', '阿隆尼斯', '雷蒙', 'ramon allones'),
            'cuaba' => array('库阿巴', '古巴巴', '库巴巴', '酷阿巴', '库瓦巴', '酷瓦巴', '库巴', '卡巴', '库阿瓦', '库瓦', 'cuaba'),
            'vegafina' => array('维加菲纳', '韦加菲纳', '维佳菲娜', '韦佳菲娜', '维加芬娜', '维嘉菲娜', '维佳芬娜', '维嘉芬娜', '菲纳', '维加', 'vegafina')
        );
    }

    /**
     * Get mappings of top non-Cuban cigar brands with their Chinese variations
     */
   public static function get_non_cuban_brand_mappings() {
    return array(
        // Top non-Cuban brands (Nicaraguan, Dominican, etc.)
        'padron' => array('帕德龙', '帕德隆', '帕德朗', '帕特龙', '帕特隆', '帕德罗', '帕特罗', '帕德隆', '帕多隆', '帕多龙', '巴德龙', '巴德隆', '巴德朗', '巴特龙', '帕迪龙', '帕迪隆', 'padron', 'padrón'),
        
        'arturo fuente' => array('阿图罗·富恩特', '阿图罗富恩特', '阿图罗·符恩特', '阿图罗符恩特', '富恩特', '符恩特', '阿图罗', '阿杜罗·富恩特', '阿杜罗富恩特', '富恩特家族', '阿杜罗富恩特', '亚图罗富恩特', '亚图罗·富恩特', '富安特', '福恩特', '福安特', '富恩德', '富恩蒂', '阿图罗福恩特', 'arturo fuente', 'fuente'),
        
        'my father' => array('我的父亲', '麦法瑟', '麦法泽', '麦法哲', '麦法德', '麦法蒂', '迈法瑟', '迈法泽', '迈法哲', '父亲', '我父亲', '吾父', '我爸爸', '加西亚', '加西亚我的父亲', '何塞加西亚', '唐佩平', '唐·佩平', '佩平加西亚', '佩平', 'my father', 'my father cigars'),
        
        'oliva' => array('奥利瓦', '奥利娃', '奥丽瓦', '奥丽娃', '欧利瓦', '欧利娃', '欧丽瓦', '欧丽娃', '奥利', '欧利', '奥利华', '欧利华', '奥力瓦', '欧力瓦', '奥利弗', '欧利弗', '奥里瓦', '欧里瓦', '奥立瓦', '欧立瓦', 'oliva'),
        
        'davidoff' => array('大卫杜夫', '大卫·杜夫', '大为杜夫', '大为·杜夫', '达维多夫', '达维·多夫', '达维·杜夫', '大卫多夫', '大卫·多夫', '杜夫', '大卫度夫', '大威杜夫', '戴维多夫', '戴维杜夫', '戴维·杜夫', '达维杜夫', '达维都夫', '達維多夫', '大維杜夫', '達維杜夫', 'davidoff'),
        
        'drew estate' => array('杜鲁庄园', '德鲁庄园', '杜鲁农庄', '德鲁农庄', '德鲁产业', '杜鲁产业', '德鲁地产', '杜鲁地产', '德鲁', '杜鲁', '杜鲁雪茄', '德鲁雪茄', '德鲁艾斯特', '杜鲁艾斯特', '德鲁庄园公司', '杜鲁庄园公司', '德鲁地产公司', '杜鲁地产公司', 'drew estate'),
        
        'alec bradley' => array('亚历克·布拉德利', '亚历克布拉德利', '阿列克·布拉德利', '阿列克布拉德利', '艾力克·布莱德利', '艾力克布莱德利', '亚力克·布莱德利', '亚力克布莱德利', '布拉德利', '亚历克', '亚历克·布莱德利', '阿力克布拉德利', '艾利克布拉德利', '亚列克布拉德利', '亚力布拉德利', '艾立克布莱德利', '阿立克布拉德利', 'alec bradley', 'ab'),
        
        'rocky patel' => array('洛基·帕特尔', '洛基帕特尔', '罗基·帕特尔', '罗基帕特尔', '洛基·帕特', '洛基帕特', '罗基·帕特', '罗基帕特', '帕特尔', '洛基', '洛奇帕特尔', '罗奇帕特尔', '洛基巴特尔', '罗基巴特尔', '洛基派特尔', '罗基派特尔', '洛基帕泰尔', '罗基帕泰尔', '岩石帕特尔', '石头帕特尔', 'rocky patel', 'rp'),
        
        'perdomo' => array('佩多莫', '帕多莫', '佩尔多莫', '帕尔多莫', '佩多摩', '帕多摩', '佩尔多摩', '帕尔多摩', '多莫', '佩多', '珀多莫', '珀尔多莫', '佩都莫', '帕都莫', '佩朵莫', '帕朵莫', '佩多谟', '帕多谟', '佩多墨', '帕多墨', 'perdomo'),
        
        'e.p. carrillo' => array('E.P.卡里洛', 'E.P.·卡里洛', 'E.P.卡利略', 'E.P.·卡利略', 'E.P.卡里约', 'E.P.·卡里约', 'E.P.卡里罗', 'E.P.·卡里罗', '卡里洛', '卡利略', '卡里约', '卡里罗', '卡利洛', '卡利约', '卡利罗', '卡理洛', '卡理略', '卡理约', '卡理罗', '厄内斯托·佩雷斯·卡里洛', '厄内斯托卡里洛', '佩雷斯卡里洛', '埃内斯托卡里洛', 'e.p. carrillo', 'ep carrillo', 'carrillo'),
        
        'la flor dominicana' => array('多米尼加之花', '多米尼加花', '多米尼加的花', '多明尼加之花', '多明尼加花', '多明尼加的花', '拉弗罗多米尼加纳', '拉弗洛多米尼加纳', '拉芙罗多米尼加纳', '拉芙洛多米尼加纳', '拉弗洛多米尼加', '拉芙洛多米尼加', '拉·弗洛尔·多米尼加纳', '拉弗洛尔多米尼加纳', '多米尼加的花朵', '多明尼加的花朵', '多米尼加之花雪茄', 'la flor dominicana', 'lfd'),
        
        'ashton' => array('阿什顿', '艾什顿', '亚什顿', '艾许顿', '亚许顿', '阿什敦', '艾什敦', '亚什敦', '艾许敦', '亚许敦', '爱诗顿', '爱士顿', '阿诗顿', '艾诗顿', '阿士顿', '艾士顿', '亚诗顿', '亚士顿', '阿什敦', '艾什敦', 'ashton'),
        
        'macanudo' => array('马卡努多', '麦卡努多', '马卡努铎', '麦卡努铎', '马克努多', '麦克努多', '马克努铎', '麦克努铎', '卡努多', '马卡', '麦卡', '麦卡鲁多', '马卡鲁多', '麦克鲁多', '马克鲁多', '玛卡努多', '玛克努多', '麦卡纽多', '马卡纽多', 'macanudo'),
        
        'camacho' => array('卡马乔', '卡玛乔', '卡马丘', '卡玛丘', '卡马肖', '卡玛肖', '喀马乔', '喀玛乔', '喀马丘', '喀玛丘', '卡玛丘', '卡马秋', '卡玛秋', '卡马茶', '卡玛茶', '卡马周', '卡玛周', '卡吗乔', '咖玛乔', '咖马乔', 'camacho'),
        
        'cao' => array('CAO', '希爱欧', '希爱傲', '希艾欧', '希艾傲', '西爱欧', '西爱傲', '西艾欧', '西艾傲', '希爱欧雪茄', '卡奥', '高', '曹', '草', '考', '靠', '希欧', '希傲', '西欧', '西傲', 'cao'),
        
        'joya de nicaragua' => array('尼加拉瓜的宝石', '尼加拉瓜宝石', '尼加拉瓜珠宝', '尼加拉瓜之宝', '何亚尼加拉瓜', '乔亚尼加拉瓜', '霍亚尼加拉瓜', '豪亚尼加拉瓜', '尼加拉瓜', '何亚', '乔亚', '霍亚', '豪亚', '荷亚尼加拉瓜', '胡亚尼加拉瓜', '侯亚尼加拉瓜', '和亚尼加拉瓜', '尼加拉瓜乔亚', '尼加拉瓜霍亚', 'joya de nicaragua', 'jdn'),
        
        'aj fernandez' => array('AJ·费尔南德斯', 'AJ费尔南德斯', 'AJ·费南德斯', 'AJ费南德斯', 'AJ·费尔南多斯', 'AJ费尔南多斯', 'AJ·费南多斯', 'AJ费南多斯', '费尔南德斯', 'AJ', 'AJ·费尔南迪斯', 'AJ费尔南迪斯', 'AJ·费南迪斯', 'AJ费南迪斯', '艾杰费尔南德斯', '艾杰费南德斯', '埃杰费尔南德斯', '埃杰费南德斯', '阿杰费尔南德斯', '阿杰费南德斯', 'aj fernandez', 'ajf'),
        
        'la aurora' => array('拉奥罗拉', '拉欧若拉', '拉奥若拉', '拉欧罗拉', '拉·奥罗拉', '拉·欧若拉', '拉·奥若拉', '拉·欧罗拉', '奥罗拉', '欧若拉', '拉奥洛拉', '拉欧洛拉', '拉阿罗拉', '拉啊罗拉', '拉澳罗拉', '拉澳若拉', '曙光', '极光', '黎明', '拉黎明', 'la aurora', 'aurora'),
        
        'plasencia' => array('普拉森西亚', '普拉森西娅', '普拉森希亚', '普拉森希娅', '普拉申西亚', '普拉申西娅', '普拉申希亚', '普拉申希娅', '普拉森', '普拉申', '普拉森夏', '普拉申夏', '普拉森霞', '普拉申霞', '普拉圣西亚', '普拉圣夏', '普拉森斯亚', '普拉申斯亚', '普拉先西亚', '普拉先夏', 'plasencia'),
        
        // Additional non-Cuban brands
        'tatuaje' => array('塔图阿赫', '塔图哈耶', '纹身', '塔图亚耶', '塔图阿杰', '塔图哈杰', '达图阿赫', '达图哈耶', '塔图艾', '塔图耶', '塔图杰', '塔图埃', '塔图阿埃', '塔图哈埃', '刺青', '文身', 'tatuaje'),
        
        'liga privada' => array('私人联盟', '私人同盟', '利加私人', '利加', '私藏联盟', '私藏同盟', '秘密联盟', '秘密同盟', '里加私人', '里加', '利嘉私人', '利嘉', '私人利加', '私人里加', '私人利嘉', 'liga privada', 'liga'),
        
        'undercrown' => array('地下皇冠', '恩都罗', '下冠', '暗冠', '皇冠下', '地下冠', '安德皇冠', '安德冠', '恩德皇冠', '恩德冠', '底冠', '低冠', '次皇冠', '次冠', 'undercrown', 'uc'),
        
        'kristoff' => array('克里斯托夫', '克里斯托弗', '克里斯多夫', '克里斯多弗', '克里斯朵夫', '克里斯朵弗', '基里斯托夫', '基里斯托弗', '克里斯托福', '克里斯多福', '克里斯朵福', '基里斯托福', '克里斯托', '克里斯多', 'kristoff'),
        
        'crowned heads' => array('加冕之首', '皇冠之首', '冠首', '皇冠之头', '加冕之头', '冠头', '王冠之首', '王冠之头', '皇冠头', '加冕头', '王冠头', '冠军之首', '冠军之头', '冠军头', 'crowned heads', 'ch'),
        
        'viaje' => array('维亚赫', '维阿赫', '维亚杰', '维阿杰', '旅行', '旅程', '航程', '征程', '威亚赫', '威阿赫', '威亚杰', '威阿杰', '维亚热', '维阿热', '威亚热', '威阿热', 'viaje'),
        
        'l\'atelier' => array('工作室', '工坊', '拉特利尔', '拉特利埃', '拉特利耶', '拉特丽尔', '拉特丽埃', '拉特丽耶', '拉泰利尔', '拉泰利埃', '拉泰利耶', '拉泰丽尔', '拉泰丽埃', '拉泰丽耶', '工匠', '匠人', 'l\'atelier', 'latelier', 'l atelier'),
        
        'southern draw' => array('南方绘画', '南方抽签', '南部绘画', '南部抽签', '南方画', '南部画', '南方德劳', '南部德劳', '索瑟恩德劳', '索瑟恩德洛', '南方德洛', '南部德洛', '南方拉', '南部拉', 'southern draw', 'sd'),
        
        'herrera esteli' => array('埃雷拉埃斯特利', '埃雷拉埃斯特里', '赫雷拉埃斯特利', '赫雷拉埃斯特里', '艾雷拉埃斯特利', '艾雷拉埃斯特里', '埃雷拉', '赫雷拉', '艾雷拉', '埃斯特利', '埃斯特里', '埃雷拉艾斯特利', '赫雷拉艾斯特利', '艾雷拉艾斯特利', 'herrera esteli', 'he'),
        
        'foundation' => array('基础', '基金会', '基金', '创基', '创立', '奠基', '根基', '基石', '佛恩达深', '方德深', '方德森', '丰德深', '丰德森', '富恩达深', '富恩达森', 'foundation', 'foundation cigars'),
        
        'warped' => array('翘曲', '弯曲', '华普德', '瓦普德', '沃普德', '华普特', '瓦普特', '沃普特', '华普', '瓦普', '沃普', '变形', '扭曲', '歪曲', '华博德', '瓦博德', '沃博德', 'warped', 'warped cigars'),
        
        'dunbarton tobacco & trust' => array('邓巴顿烟草信托', '邓巴顿', '邓巴敦烟草信托', '邓巴敦', '登巴顿烟草信托', '登巴顿', '登巴敦烟草信托', '登巴敦', '敦巴顿烟草信托', '敦巴顿', '敦巴敦烟草信托', '敦巴敦', '邓巴顿烟草', '邓巴敦烟草', '登巴顿烟草', '登巴敦烟草', 'dunbarton tobacco & trust', 'dunbarton', 'dt&t'),
        
        'illusione' => array('幻影', '幻象', '幻觉', '错觉', '伊鲁西奥内', '伊鲁西奥尼', '伊露西奥内', '伊露西奥尼', '伊路西奥内', '伊路西奥尼', '伊卢西奥内', '伊卢西奥尼', '伊陆西奥内', '伊陆西奥尼', '幻境', '错觉', 'illusione'),
        
        'roma craft' => array('罗马工艺', '罗马工坊', '罗马手工', '罗马技艺', '罗马克拉夫特', '罗马克拉夫', '罗马克莱夫特', '罗马克莱夫', '罗玛工艺', '罗玛工坊', '罗玛手工', '罗玛技艺', '罗玛克拉夫特', '罗玛克拉夫', 'roma craft', 'romacraft'),
        
        'leaf by oscar' => array('奥斯卡之叶', '奥斯卡叶子', '奥斯卡烟叶', '叶子奥斯卡', '烟叶奥斯卡', '奥斯卡的叶', '奥斯卡的烟叶', '奥斯卡的叶子', '奥斯卡之页', '奥斯卡页', '欧斯卡之叶', '欧斯卡叶子', '欧斯卡烟叶', 'leaf by oscar', 'leaf'),
        
        'espinosa' => array('埃斯皮诺萨', '埃斯皮诺莎', '艾斯皮诺萨', '艾斯皮诺莎', '埃斯宾诺萨', '埃斯宾诺莎', '艾斯宾诺萨', '艾斯宾诺莎', '埃斯比诺萨', '埃斯比诺莎', '艾斯比诺萨', '艾斯比诺莎', '埃斯匹诺萨', '埃斯匹诺莎', '艾斯匹诺萨', '艾斯匹诺莎', 'espinosa', 'espinosa cigars'),
        
        'room101' => array('101房间', '房间101', '101室', '室101', '101号房', '房号101', '101号室', '室号101', '一零一房间', '房间一零一', '一零一室', '室一零一', '壹零壹房间', '房间壹零壹', '壹零壹室', '室壹零壹', 'room101', 'room 101'),
        
        'avo' => array('阿沃', '爱沃', '艾沃', '阿伏', '爱伏', '艾伏', '阿佛', '爱佛', '艾佛', '阿窝', '爱窝', '艾窝', '阿握', '爱握', '艾握', '阿夫', '爱夫', '艾夫', 'avo', 'avo cigars'),
        
        'mbombay' => array('孟买', '蒙贝', '蒙拜', '孟贝', '孟拜', '蒙买', '姆贝', '姆拜', '姆孟买', '姆蒙贝', '姆蒙拜', '姆孟贝', '姆孟拜', '姆蒙买', '母贝', '母拜', 'mbombay', 'm bombay'),
        
        // Additional premium brands
        'hammer + sickle' => array('锤子镰刀', '锤与镰', '铁锤镰刀', '铁锤与镰刀', '锤镰', '锤和镰刀', '锤加镰刀', '锤子加镰刀', '铁锤加镰刀', '哈默与镰刀', '哈默加镰刀', '汉默与镰刀', '汉默加镰刀', 'hammer + sickle', 'hammer and sickle', 'hammer & sickle'),
        
        'quesada' => array('克萨达', '奎萨达', '凯萨达', '盖萨达', '格萨达', '克塞达', '奎塞达', '凯塞达', '盖塞达', '格塞达', '克赛达', '奎赛达', '凯赛达', '盖赛达', '格赛达', '奎沙达', '凯沙达', '克沙达', 'quesada'),
        
        'asylum' => array('疯人院', '精神病院', '避难所', '庇护所', '收容所', '阿塞勒姆', '阿赛勒姆', '阿塞伦', '阿赛伦', '阿西勒姆', '阿西伦', '艾塞勒姆', '艾赛勒姆', '艾塞伦', '艾赛伦', 'asylum', 'asylum cigars'),
        
        'fratello' => array('兄弟', '弗拉特洛', '富拉特洛', '夫拉特洛', '弗拉泰洛', '富拉泰洛', '夫拉泰洛', '弗拉特罗', '富拉特罗', '夫拉特罗', '弗拉泰罗', '富拉泰罗', '夫拉泰罗', '兄弟雪茄', '法拉特洛', 'fratello', 'fratello cigars')
    ); // Added missing closing parenthesis
} // Added missing closing brace
    /**
     * Enhanced size terms (vitolas) mapping
     * Expanded with more international variations and patterns, including small sizes
     */
    public static function get_size_mappings() {
        return array(
            // English terms - common vitolas with expanded Chinese equivalents
            'robusto' => array('罗布图', '罗伯图', '罗拔图', '罗布斯托', '罗布托', '罗布', '劳伯图', '罗布图斯', '罗伯图斯', '罗普图'),
            'toro' => array('托罗', '公牛', '多罗', '托洛', '多洛', '托鲁', '多鲁', '特罗', '特洛', '特鲁'),
            'torpedo' => array('鱼雷', '托皮多', '鱼型', '雷', '托比多', '托皮铎', '托比铎', '鱼形', '鱼雷型', '雷形'),
            'churchill' => array('丘吉尔', '丘', '邱吉尔', '丘切尔', '丘丘', '邱丘', '丘丘尔', '丘尔切', '丘奇尔', '邱切尔'),
            'corona' => array('皇冠', '科罗那', '皇', '冠', '科罗娜', '克罗那', '可罗那', '科罗', '克罗娜', '可罗娜'),
            'petit corona' => array('小皇冠', '小科罗那', '小皇', '小冠', '迷你皇冠', '小克罗那', '迷你科罗那', '小科罗娜', '迷你科罗娜', '小型皇冠'),
            'lancero' => array('长矛', '兰塞罗', '长', '矛', '兰赛罗', '长矛型', '细长', '长形', '兰彻罗', '兰切罗'),
            'belicoso' => array('比利高', '彪丽高', '比利高斯', '鱼雷', '比利', '贝利高', '比利克', '比丽高', '比利科', '比利克斯'),
            'pyramid' => array('金字塔', '金塔', '塔型', '比拉米德', '比拉米', '比拉米特', '金塔型', '塔', '金字型', '比拉密德'),
            'piramides' => array('金字塔', '皮拉米德', '塔', '金塔', '皮拉密', '皮拉密德', '皮拉米', '皮拉米德斯', '金字塔型', '金塔形'),
            'gran toro' => array('大托罗', '大公牛', '巨型托罗', '格兰托罗', '大型托罗', '格兰托鲁', '巨托罗', '大托鲁', '特大托罗', '特大公牛'),
            'perfecto' => array('完美', '珀费托', '双头', '双头锥', '双头雪茄', '双头型', '完美型', '双锥', '珀费克托', '完善'),
            'double corona' => array('双皇冠', '双科罗那', '双皇', '双冠', '双克罗那', '双科罗娜', '双克罗娜', '双重皇冠', '双重科罗那', '双重科罗娜'),
            'culebra' => array('盘蛇', '麻花雪茄', '库莱伯拉', '三头雪茄', '曲线', '蛇型', '盘绕', '库列布拉', '麻花', '蛇形'),
            'panetela' => array('帕内特拉', '长宾丽', '宾丽', '细长型', '帕尼特拉', '帕尼丽', '帕内特', '帕尼特', '宾利', '长宾利'),
            'gran panetela' => array('巨型宾丽', '大帕内特拉', '大宾丽', '格兰帕尼特拉', '巨宾丽', '大帕尼特拉', '大宾利', '格兰帕内特拉', '大型帕内特拉', '大型宾丽'),
            'lonsdale' => array('朗斯代尔', '长秀丽', '隆斯代尔', '朗', '朗思代尔', '朗斯台尔', '隆斯台尔', '朗斯达尔', '隆斯达尔', '朗斯戴尔'),
            'rothschild' => array('罗斯柴尔德', '洛芝', '罗斯切尔德', '罗斯', '罗子', '罗斯查尔德', '罗斯彻尔德', '洛芝尔德', '罗斯柴', '罗斯切'),
            'petit' => array('小型', '小号', '小', '迷你', '贝蒂', '佩蒂', '迷你型', '微型', '佩提', '贝提'),
            'short' => array('短', '矮', '短号', '短款', '肖特', '短型', '短小', '矮型', '矮小', '短体'),
            'gordo' => array('胖皇冠', '胖皇', '戈尔多', '胖', '戈多', '胖型', '肥', '宽', '厚', '胖款'),
            'presidente' => array('总统', '普雷西登特', '总裁', '主席', '总', '普雷', '总统型', '总裁型', '主席型', '普雷西'),
            'corona gorda' => array('皇冠戈达', '胖皇冠', '科罗娜戈达', '胖科罗那', '科达', '胖冠', '皇冠胖', '科罗那胖', '戈达冠', '戈达科罗那'),
            'hermoso' => array('美丽', '埃尔莫索', '赫莫索', '秀丽', '漂亮', '艾尔莫索', '赫尔莫索', '赫莫', '艾莫索', '赫莫'),
            'demi tasse' => array('小杯', '半杯', '德米塔斯', '小咖啡', '迷你杯', '德米', '半咖啡', '小塔斯', '德米塔', '塔斯'),
            'julieta' => array('朱丽叶', '胡丽塔', '朱丽', '胡莉亚', '如利特', '朱利叶', '尤利特', '尤莉特', '裘利塔', '朱利'),
            'gran corona' => array('大皇冠', '格兰科罗那', '大科罗那', '大克罗那', '大冠', '大皇', '格兰冠', '特大皇冠', '特大科罗那', '特大冠'),
            'magnum' => array('大皇冠', '麦格纳姆', '麦格纽姆', '马格南', '麦格龙', '马格农', '麦格南', '大口径', '马格侬', '麦格尼姆'),
            'cazadores' => array('猎人', '卡萨多雷斯', '卡扎多雷斯', '猎手', '猎者', '卡萨', '卡扎', '猎人型', '卡萨多', '卡扎多'),
            'exquisitos' => array('精品', '吉士图', '吉时途', '埃克斯奎西托斯', '精致', '极品', '吉士', '精美', '埃克斯奎', '埃斯奎'),
            'secretos' => array('秘密', '奥秘', '塞克雷托斯', '秘', '隐秘', '塞克雷', '塞克', '秘藏', '隐', '奥'),
'genios' => array('天才', '杰尼奥斯', '吉尼奥斯', '天资', '精灵', '天赋', '天分', '杰尼', '吉尼', '天才型'),
            'nobles' => array('贵族', '诺布雷斯', '贵', '高尚', '尊贵', '诺布', '诺布尔', '贵人', '贵胄', '贵族型'),
            'dianas' => array('戴安娜', '黛安娜', '戴', '黛', '狄安娜', '戴安', '黛安', '狄安', '戴安那', '黛安那'),
            'siglo' => array('世纪', '西格鲁', '西格洛', '世纪', 'sig', '西格', '西格罗', '世', '西', '纪'),
            'behike' => array('贝希克', '贝依可', '比海客', 'BHK', '贝黑克', '贝海克', '比依克', '贝克', '贝依克', '比黑克'),
            'edmundo' => array('艾德蒙多', '爱德蒙多', '埃德蒙多', '艾蒙多', '爱蒙多', '埃蒙多', '艾德蒙', '爱德蒙', '埃德蒙', '艾德'),
            'petit edmundo' => array('小艾德蒙多', '小爱德蒙多', '迷你艾德蒙多', '小埃德蒙多', '迷你爱德蒙多', '迷你埃德蒙多', '小艾蒙多', '小爱蒙多', '小埃蒙多', '小型艾德蒙多'),
            'double' => array('双', '双倍', '双重', '两倍', '两个', '双份', '两份', '成双', '加倍', '双份'),
            'miniatures' => array('迷你', '小型', '微型', '小小', '最小', '迷你型', '微型版', '小型版', '小巧', '小款'),
            'perla' => array('珍珠', '帕拉', '佩尔拉', '宝珠', '明珠', '珠', '小珠', '帕尔', '佩尔', '珍'),
            'dalia' => array('大丽花', '达利亚', '达丽亚', '大莉亚', '达利花', '达丽花', '达花', '达莉亚', '大利亚', '大利花'),
            'mareva' => array('马里瓦', '玛莱瓦', '马雷瓦', '玛丽瓦', '马丽瓦', '玛雷瓦', '马雷娃', '玛莱娃', '马里娃', '玛丽娃'),
            'gran edmundo' => array('大埃德蒙多', '大艾德蒙多', '格兰艾德蒙多', '大爱德蒙多', '格兰埃德蒙多', '格兰爱德蒙多', '大型艾德蒙多', '大型埃德蒙多', '大型爱德蒙多', '特大艾德蒙多'),
            'duke' => array('公爵', '杜克', '爵士', '公', '爵', '杜', '杜克爵士', '杜克公爵', '公爵型', '爵士型'),
            'prominente' => array('突出', '杰出', '普罗米内特', '卓越', '显著', '突显', '卓著', '特出', '出众', '杰超'),
            'petit pyramid' => array('小金字塔', '迷你金字塔', '小塔', '迷你塔', '小金塔', '迷你金塔', '小型金字塔', '迷你型金字塔', '小型塔', '迷你型塔'),
            'half corona' => array('半皇冠', '半科罗那', '半冠', '半皇', '半科', '半克罗那', '半科罗娜', '半克罗娜', '半型皇冠', '半型科罗那'),
            'petit belicoso' => array('小比利高', '小彪丽高', '迷你鱼雷', '小鱼雷', '迷你比利高', '迷你彪丽高', '小比利', '小贝利高', '迷你比利', '迷你贝利高'),
            'gran belicoso' => array('大比利高', '大彪丽高', '大鱼雷', '大型比利高', '大型彪丽高', '大型鱼雷', '格兰比利高', '格兰彪丽高', '格兰鱼雷', '特大比利高'),
            'club' => array('俱乐部', '会所', '团体', '小会', '俱乐', '会所型', '俱乐部型', '会', '会员', '团'),
            'minuto' => array('分钟', '米努托', '迷你托', '分', '米努', '微托', '迷你', '迷', '分钟型', '米型'),
            'media corona' => array('中皇冠', '中科罗那', '中冠', '中皇', '中科', '中克罗那', '中科罗娜', '中克罗娜', '中型皇冠', '中型科罗那'),
            'super corona' => array('超级皇冠', '超级科罗那', '超级冠', '超皇冠', '超科罗那', '超冠', '超皇', '超科', '超克罗那', '超科罗娜'),
            'wide churchill' => array('宽丘吉尔', '宽丘', '胖丘吉尔', '宽邱吉尔', '胖邱吉尔', '宽丘切尔', '胖丘切尔', '宽型丘吉尔', '胖型丘吉尔', '宽大丘吉尔'),
            'petit churchill' => array('小丘吉尔', '小丘', '迷你丘吉尔', '小邱吉尔', '迷你邱吉尔', '小丘切尔', '迷你丘切尔', '小型丘吉尔', '迷你型丘吉尔', '小巧丘吉尔'),
            'robustos extra' => array('特级罗布图', '额外罗布托', '特罗布图', '特级罗布托', '额外罗布图', '特罗布托', '特级罗伯图', '额外罗伯图', '特罗伯图', '特级罗拔图'),
            'short robusto' => array('短罗布图', '短罗布托', '短罗布', '短型罗布图', '短型罗布托', '短型罗布', '矮罗布图', '矮罗布托', '矮罗布', '短式罗布图'),
            'robusto supremo' => array('至尊罗布图', '至上罗布图', '罗布图至尊', '至尊罗布托', '至上罗布托', '罗布托至尊', '至尊罗伯图', '至上罗伯图', '罗伯图至尊', '至尊罗拔图'),
            'double toro' => array('双托罗', '双公牛', '双托', '双重托罗', '双重公牛', '双重托', '双份托罗', '双份公牛', '双份托', '双式托罗'),
            'churchill tubos' => array('丘吉尔管装', '丘吉尔铝管', '管装丘吉尔', '丘管装', '丘铝管', '管装丘', '邱吉尔管装', '邱吉尔铝管', '管装邱吉尔', '丘切尔管装'),
            'gordito' => array('小胖子', '小戈多', '戈迪托', '小胖', '小厚', '小宽', '小肥', '小戈多型', '戈迪型', '小胖型'),
            'corona extra' => array('特级皇冠', '皇冠特级', '额外皇冠', '特制皇冠', '皇冠特制', '额外科罗那', '特级科罗那', '科罗那特级', '额外冠', '特级冠'),
            'grand corona' => array('超大皇冠', '特大冠', '巨皇冠', '超级皇冠', '特大皇冠', '巨大皇冠', '超大科罗那', '特大科罗那', '巨科罗那', '超级科罗那'),
            'double perfecto' => array('双完美', '双珀费托', '双双头', '双重完美', '双重珀费托', '双重双头', '双份完美', '双份珀费托', '双份双头', '双式完美'),
            'short torpedo' => array('短鱼雷', '短雷', '短托比多', '短型鱼雷', '短型雷', '短型托比多', '矮鱼雷', '矮雷', '矮托比多', '短式鱼雷'),
            'long corona' => array('长皇冠', '长科罗那', '长冠', '长型皇冠', '长型科罗那', '长型冠', '细长皇冠', '细长科罗那', '细长冠', '长式皇冠'),
            'torpedo tubos' => array('鱼雷管装', '托皮多管', '鱼雷铝管', '管装鱼雷', '托皮多铝管', '管装托皮多', '雷管装', '雷铝管', '管装雷', '托比多管装'),
            'toro gordo' => array('胖公牛', '胖托罗', '戈多托罗', '胖型公牛', '胖型托罗', '戈多型托罗', '肥托罗', '肥公牛', '宽托罗', '宽公牛'),
            'gran piramide' => array('大金字塔', '大塔', '大金塔', '大型金字塔', '大型塔', '大型金塔', '格兰金字塔', '格兰塔', '格兰金塔', '特大金字塔'),
            'petit lancero' => array('小长矛', '小兰塞罗', '迷你长矛', '小型长矛', '小型兰塞罗', '迷你型长矛', '迷你兰塞罗', '短长矛', '短兰塞罗', '小矛'),
            'gran toro tubos' => array('大托罗管装', '大公牛铝管', '托罗特级管', '大托罗铝管', '大公牛管装', '托罗特级铝管', '管装大托罗', '管装大公牛', '铝管大托罗', '铝管大公牛'),
            'figurado' => array('异形', '非标准形', '菲古拉多', '变形', '造型', '非典型', '特殊形', '非常规', '不规则', '造型型'),
            'petit perfecto' => array('小完美', '小双头', '迷你完美', '小型完美', '小型双头', '迷你型完美', '迷你双头', '小珀费托', '迷你珀费托', '小型珀费托'),
            'robusto gordo' => array('胖罗布图', '厚罗布图', '戈多罗布图', '胖型罗布图', '厚型罗布图', '戈多型罗布图', '胖罗布托', '厚罗布托', '戈多罗布托', '肥罗布图'),
            'fuma' => array('福玛', '短小型', '芙玛', '呋玛', '福', '芙', '呋', '福马', '芙马', '呋马'),
            'gran churchill' => array('大丘吉尔', '特大丘', '丘吉尔特大', '大型丘吉尔', '特大型丘', '丘吉尔特大型', '格兰丘吉尔', '格兰丘', '丘吉尔格兰', '巨丘吉尔'),
            'salomon' => array('所罗门', '萨洛蒙', '所罗门王', '所罗', '萨洛', '所罗王', '所王', '萨王', '所罗门型', '萨洛蒙型'),
            'petit salomon' => array('小所罗门', '迷你所罗门', '小萨洛蒙', '小型所罗门', '迷你型所罗门', '小型萨洛蒙', '迷你萨洛蒙', '小所罗', '迷你所罗', '小萨洛'),
            'diademas' => array('皇冠珠', '戴德玛', '钢盔', '皇冠', '戴德', '钢', '戴德玛斯', '皇冠珠型', '戴德玛型', '钢盔型'),
            
            // Additional small vitolas (ring gauge under 40)
            'mille fleurs' => array('千花', '米勒弗勒', '米勒福勒', '千朵花', '米尔福罗雷', '米勒福洛尔', '米尔弗勒尔', '千花型', '米勒', '千朵'),
            'demi tasse' => array('小杯', '半杯', '德米塔斯', '小咖啡', '迷你杯', '德米', '塔塞', '半塔斯', '小塔斯', '德米塔'),
            'tres petit corona' => array('极小皇冠', '超小科罗那', '三小冠', '特小皇冠', '特小科罗那', '极小科罗那', '三小皇冠', '超小皇冠', '极小冠', '特小冠'),
            'entreacto' => array('幕间', '幕中', '场间', '场中', '幕间曲', '场间曲', '曲间', '曲中', '中场', '间幕'),
            'purito' => array('小纯', '普里托', '纯小', '纯粹型', '小而纯', '纯型', '小纯型', '迷你纯', '普型', '迷你普里托'),
            'cigarillo' => array('小雪茄', '迷你雪茄', '小型雪茄', '小烟', '迷你烟', '小型烟', '小雪', '迷你雪', '小型雪', '微型雪茄'),
            'pequeño' => array('佩奎尼奥', '佩克尼奥', '小型', '极小', '超小', '迷你', '微型', '小巧', '迷你型', '小款'),
            'demitasse' => array('半杯', '小杯', '德米塔斯', '德米', '半咖啡', '小咖啡', '半塔', '小塔', '德米半', '塔斯'),
            'palmas' => array('棕榈', '帕尔玛斯', '棕叶', '帕尔马', '棕榈型', '帕尔玛型', '棕榈形', '帕尔玛形', '棕叶型', '帕尔马型'),
            'marevas' => array('马雷瓦斯', '马雷瓦', '玛莱瓦斯', '玛莱瓦', '玛蕾瓦', '马蕾瓦', '玛雷瓦', '玛雷瓦斯', '马丽瓦', '马丽瓦斯'),
            'panatelas' => array('帕纳特拉斯', '帕内特拉斯', '长宾丽', '宾丽', '细长型', '帕尼特拉斯', '帕尼丽', '帕纳特', '帕内特', '帕尼特'),
            'small club' => array('小俱乐部', '小会所', '小团体', '小小会', '小俱乐', '小会所型', '小俱乐部型', '小会', '小会员', '小团'),
            
            // Additional popular non-Cuban formats
            'sixty' => array('六十', '60号', '六零', '陆零', '陆拾', '六拾', '60环', '六十号', '六十环', '60'),
            'gordo extra' => array('特级胖', '额外胖', '特胖', '特级戈尔多', '额外戈尔多', '特戈尔多', '特级肥', '额外肥', '特肥', '特级宽'),
            'presidente tubos' => array('总统管装', '总裁铝管', '主席特级管', '总统铝管', '总裁管装', '主席特级铝管', '管装总统', '管装总裁', '铝管总统', '铝管总裁'),
            'box-pressed' => array('方压', '盒压', '压盒', '方形压制', '盒状压制', '压制盒状', '方型', '盒型', '压方', '方压式'),
            'petit robusto' => array('小罗布图', '小罗布托', '迷你罗布图', '小型罗布图', '小型罗布托', '迷你型罗布图', '迷你罗布托', '小罗伯图', '迷你罗伯图', '小型罗伯图'),
            'mega robusto' => array('巨型罗布图', '超大罗布托', '特大罗布图', '巨型罗布托', '超大罗布图', '特大罗布托', '巨罗布图', '超罗布托', '特罗布图', '巨罗布托'),
            'churchill maduro' => array('丘吉尔马杜罗', '丘马杜罗', '邱吉尔马杜罗', '丘切尔马杜罗', '丘丘马杜罗', '邱丘马杜罗', '丘丘尔马杜罗', '丘尔切马杜罗', '丘奇尔马杜罗', '邱切尔马杜罗'),
            'robusto maduro' => array('罗布图马杜罗', '罗伯图马杜罗', '罗拔图马杜罗', '罗布斯托马杜罗', '罗布托马杜罗', '罗布马杜罗', '劳伯图马杜罗', '罗布图斯马杜罗', '罗伯图斯马杜罗', '罗普图马杜罗'),
            'toro maduro' => array('托罗马杜罗', '公牛马杜罗', '多罗马杜罗', '托洛马杜罗', '多洛马杜罗', '托鲁马杜罗', '多鲁马杜罗', '特罗马杜罗', '特洛马杜罗', '特鲁马杜罗'),
            'torpedo maduro' => array('鱼雷马杜罗', '托皮多马杜罗', '鱼型马杜罗', '雷马杜罗', '托比多马杜罗', '托皮铎马杜罗', '托比铎马杜罗', '鱼形马杜罗', '鱼雷型马杜罗', '雷形马杜罗'),
            'robusto claros' => array('罗布图光', '罗伯图光', '罗拔图光', '罗布斯托光', '罗布托光', '罗布光', '劳伯图光', '罗布图斯光', '罗伯图斯光', '罗普图光'),
            'nub' => array('纳布', '短粗', '短宽', '纳伯', '小粗', '粗短', '宽短', 'nab', '纳', '小肥'),
            'petit toro' => array('小托罗', '小公牛', '迷你托罗', '小型托罗', '小型公牛', '迷你型托罗', '迷你公牛', '小多罗', '迷你多罗', '小型多罗'),
            'long toro' => array('长托罗', '长公牛', '长托', '长型托罗', '长型公牛', '长型托', '细长托罗', '细长公牛', '细长托', '长式托罗'),
            'extra toro' => array('特级托罗', '额外托罗', '特托罗', '特级公牛', '额外公牛', '特公牛', '特级托', '额外托', '特托', '特级多罗'),
            'gran corona tubos' => array('大皇冠管装', '格兰科罗那铝管', '大科罗那特级管', '大皇冠铝管', '格兰科罗那管装', '大科罗那特级铝管', '管装大皇冠', '管装格兰科罗那', '铝管大皇冠', '铝管格兰科罗那')
        );
    }
    
    /**
     * Enhanced special edition terms and series mapping
     */
    public static function get_special_mappings() {
        return array(
            // Model patterns with specific regex for series identification
            'model_patterns' => array(
                // Siglo patterns for Cohiba
                '世纪[一1](?:号)?|西格鲁[一1](?:号)?|Siglo\s*[iI]' => 'Siglo I',
                '世纪[二2](?:号)?|西格鲁[二2](?:号)?|Siglo\s*[iI][iI]' => 'Siglo II',
                '世纪[三3](?:号)?|西格鲁[三3](?:号)?|Siglo\s*[iI][iI][iI]' => 'Siglo III',
                '世纪[四4](?:号)?|西格鲁[四4](?:号)?|Siglo\s*[iI][vV]' => 'Siglo IV',
                '世纪[五5](?:号)?|西格鲁[五5](?:号)?|Siglo\s*[vV]' => 'Siglo V',
                '世纪[六6](?:号)?|西格鲁[六6](?:号)?|Siglo\s*[vV][iI]' => 'Siglo VI',
                '半世纪|Medio\s*Siglo' => 'Medio Siglo',
                
                // Churchill variants
                '(?:长|短|小|宽)[\s]*丘吉尔' => '$1 Churchill',
                '长[\s]*丘[^吉]' => 'Churchill',
                '短[\s]*丘[^吉]' => 'Short Churchill',
                '小[\s]*丘[^吉]' => 'Petit Churchill',
                '宽[\s]*丘[^吉]' => 'Wide Churchill',
                
                // Edmundo variants
                '小[\s]*艾德蒙多|小[\s]*爱德蒙多|小[\s]*埃德蒙多' => 'Petit Edmundo',
                '大[\s]*艾德蒙多|大[\s]*爱德蒙多|大[\s]*埃德蒙多' => 'Gran Edmundo',
                '双[\s]*艾德蒙多|双[\s]*爱德蒙多|双[\s]*埃德蒙多' => 'Double Edmundo',
                
                // Roman numerals and series designations
                'No\.\s*([1-9])|#([1-9])|([1-9])号' => 'No. $1$2$3',
                '#([1-9])号?' => 'No. $1',
                
                // Series letters
                'Serie\s*([DPE])\s*No\.\s*([1-9])' => 'Serie $1 No.$2',
                '([DPE])系列\s*([1-9])(?:号)?' => 'Serie $1 No.$2',
                '([DPE])\s*([1-9])' => 'Serie $1 No.$2',
                
                // Brand-specific patterns - Cohiba Behike
                'BHK\s*#?\s*(\d+)' => 'Behike $1',
                '贝希克\s*(\d+)' => 'Behike $1',
                '贝依可\s*(\d+)' => 'Behike $1',
                '比海客\s*(\d+)' => 'Behike $1',
                '贝黑克\s*(\d+)' => 'Behike $1',
                '贝海克\s*(\d+)' => 'Behike $1',
                '比依克\s*(\d+)' => 'Behike $1',
                
                // Common number designations
                'VF\s*(\d+)' => 'VF$1',
                'D\s*(?:No\.)?\s*(\d+)' => 'D$1',
                '([1-9])\s*号' => 'No. $1',
                
                // Anniversary patterns
                '(\d{1,3})[\s]*周年|(\d{1,3})[\s]*週年|(\d{1,3})[\s]*年(?:周年)?' => '$1$2$3th Anniversary',
                '(\d{1,3})[\s]*Anniversary' => '$1th Anniversary',
                
                // Specific series identification
                '小鱼雷' => 'Petit Belicosos',
                '短鱼雷' => 'Short Piramides',
                '大天才' => 'Genios',
                '中天才' => 'Magicos',
                '小天才' => 'Secretos',
                '特级鱼雷' => 'Piramides Extra',
                '黄金系列' => 'Linea Oro',
                '金系列' => 'Linea Oro',
                '1935[\s]*传奇' => '1935 Leyenda',
                '1935[\s]*杜马' => '1935 Dumas',
                '1935[\s]*马尔特斯' => '1935 Maltes',
                
                // Year and edition matching
                '(19|20)(\d{2})[\s]*限量版?' => '$1$2 Limited Edition',
                
                // Chinese zodiac years
                '虎年[\s]*限量版?' => 'Year Of The Tiger',
                '龙年[\s]*限量版?' => 'Year Of The Dragon',
                '兔年[\s]*限量版?' => 'Year Of The Rabbit',
                '蛇年[\s]*限量版?' => 'Year Of The Snake',
                '马年[\s]*限量版?' => 'Year Of The Horse',
                '羊年[\s]*限量版?' => 'Year Of The Sheep',
                '猴年[\s]*限量版?' => 'Year Of The Monkey',
                '鸡年[\s]*限量版?' => 'Year Of The Rooster',
                '狗年[\s]*限量版?' => 'Year Of The Dog',
                '猪年[\s]*限量版?' => 'Year Of The Pig',
                '鼠年[\s]*限量版?' => 'Year Of The Rat',
                '牛年[\s]*限量版?' => 'Year Of The Ox',
                
               // Davidoff patterns with complete Chinese series names
'大卫杜夫[\s]*([白黑黄金银])(?:色|牌)' => 'Davidoff $1 Band',
'大卫杜夫[\s]*白牌' => 'Davidoff White Label',
'大卫杜夫[\s]*黑牌' => 'Davidoff Black Label',
'大卫杜夫[\s]*金牌' => 'Davidoff Gold Label',
'大卫杜夫[\s]*银牌' => 'Davidoff Silver Label',
'大卫杜夫[\s]*尼加拉瓜' => 'Davidoff Nicaragua',
'大卫杜夫[\s]*尼加拉瓜[\s]*10[\s]*周年' => 'Davidoff Nicaragua 10th Anniversary',
'大卫杜夫[\s]*亚玛撒' => 'Davidoff Yamasa',
'大卫杜夫[\s]*雅玛莎' => 'Davidoff Yamasa',
'大卫杜夫[\s]*亚玛撒系列' => 'Davidoff Yamasa Series',
'大卫杜夫[\s]*艾斯库里奥' => 'Davidoff Escurio',
'大卫杜夫[\s]*艾斯库里奥系列' => 'Davidoff Escurio Series',
'大卫杜夫[\s]*温斯顿丘吉尔' => 'Davidoff Winston Churchill',
'大卫杜夫[\s]*温斯顿·丘吉尔' => 'Davidoff Winston Churchill',
'大卫杜夫[\s]*丘吉尔' => 'Davidoff Churchill',
'大卫杜夫[\s]*温斯顿丘吉尔[\s]*经典系列' => 'Davidoff Winston Churchill Original',
'大卫杜夫[\s]*温斯顿·丘吉尔[\s]*经典系列' => 'Davidoff Winston Churchill Original',
'大卫杜夫[\s]*至暗时刻' => 'Davidoff The Late Hour',
'大卫杜夫[\s]*温斯顿丘吉尔[\s]*至暗时刻' => 'Davidoff Winston Churchill The Late Hour',
'大卫杜夫[\s]*温斯顿·丘吉尔[\s]*至暗时刻' => 'Davidoff Winston Churchill The Late Hour',
'大卫杜夫[\s]*皇室' => 'Davidoff Royal',
'大卫杜夫[\s]*皇家系列' => 'Davidoff Royal Series',
'大卫杜夫[\s]*702[\s]*系列' => 'Davidoff 702 Series',
'大卫杜夫[\s]*702[\s]*署名' => 'Davidoff 702 Signature',
'大卫杜夫[\s]*702[\s]*系列[\s]*署名[\s]*2000' => 'Davidoff 702 Series Signature 2000',
'大卫杜夫[\s]*702[\s]*系列[\s]*特制[\s]*硬汉' => 'Davidoff 702 Series Special R',
'大卫杜夫[\s]*702[\s]*系列[\s]*特制[\s]*鱼雷' => 'Davidoff 702 Series Special T',
'大卫杜夫[\s]*702[\s]*系列[\s]*双[\s]*硬汉' => 'Davidoff 702 Series Double R',
'大卫杜夫[\s]*702[\s]*系列[\s]*3[\s]*号' => 'Davidoff 702 Series No. 3',
'大卫杜夫[\s]*经典系列' => 'Davidoff Signature Series',
'大卫杜夫[\s]*白茄标系列' => 'Davidoff White Label Series',
'大卫杜夫[\s]*经典[\s]*2000' => 'Davidoff Signature 2000',
'大卫杜夫[\s]*格兰高' => 'Davidoff Grand Cru',
'大卫杜夫[\s]*格兰高系列' => 'Davidoff Grand Cru Series',
'大卫杜夫[\s]*千禧' => 'Davidoff Millennium',
'大卫杜夫[\s]*千禧系列' => 'Davidoff Millennium Series',
'大卫杜夫[\s]*黑茄标系列' => 'Davidoff Black Label Series',
'大卫杜夫[\s]*片刻享受' => 'Davidoff Primeros',
'大卫杜夫[\s]*普利曼罗系列' => 'Davidoff Primeros Series',
'大卫杜夫[\s]*小雪茄' => 'Davidoff Mini Cigarillos',
'大卫杜夫[\s]*迷你雪茄' => 'Davidoff Mini Cigarillos',
'大卫杜夫[\s]*马杜罗系列' => 'Davidoff Maduro Series',
'大卫杜夫[\s]*周年庆典' => 'Davidoff Anniversary Series',
'大卫杜夫[\s]*周年庆典系列' => 'Davidoff Anniversary Series',
'达维多夫[\s]*([白黑黄金银])(?:色|牌)' => 'Davidoff $1 Band',
'达维多夫[\s]*白牌' => 'Davidoff White Label',
'达维多夫[\s]*黑牌' => 'Davidoff Black Label',
'达维多夫[\s]*金牌' => 'Davidoff Gold Label',
'达维多夫[\s]*银牌' => 'Davidoff Silver Label',
'达维多夫[\s]*尼加拉瓜' => 'Davidoff Nicaragua',
'达维多夫[\s]*亚玛撒' => 'Davidoff Yamasa',
'达维多夫[\s]*雅玛莎' => 'Davidoff Yamasa',
'达维多夫[\s]*温斯顿丘吉尔' => 'Davidoff Winston Churchill',
'达维多夫[\s]*温斯顿·丘吉尔' => 'Davidoff Winston Churchill',
'达维多夫[\s]*至暗时刻' => 'Davidoff The Late Hour',
'达维多夫[\s]*702[\s]*系列' => 'Davidoff 702 Series',
'达维多夫[\s]*经典系列' => 'Davidoff Signature Series',
'季诺[\s]*尼加拉瓜' => 'Zino Nicaragua',
'季诺[\s]*白金' => 'Zino Platinum',
                // Double band patterns
                '双圈' => 'Double Band',
                '双环' => 'Double Band',
                
                // Torpedo variations
                '小鱼' => 'Petit Torpedo',
                '大鱼' => 'Gran Torpedo',
                
                // Padron series
                '帕德龙[\s]*(\d{1,4})[\s]*周年' => 'Padron $1 Anniversary',
                '帕德龙[\s]*家族[\s]*珍藏' => 'Padron Family Reserve',
                '帕德龙[\s]*(\d{2,4})[\s]*系列' => 'Padron $1 Series',
                '帕德隆[\s]*(\d{1,4})[\s]*周年' => 'Padron $1 Anniversary',
                '帕德隆[\s]*家族[\s]*珍藏' => 'Padron Family Reserve',
                '帕德隆[\s]*(\d{2,4})[\s]*系列' => 'Padron $1 Series',
                
                // Oliva Series
                '奥利瓦[\s]*V[\s]*系列' => 'Oliva Serie V',
                '奥利瓦[\s]*G[\s]*系列' => 'Oliva Serie G',
                '奥利瓦[\s]*O[\s]*系列' => 'Oliva Serie O',
                '奥利瓦[\s]*大师杰作[\s]*系列' => 'Oliva Master Blends',
                '奥利瓦[\s]*V[\s]*梅拉尼奥' => 'Oliva Serie V Melanio',
                '奥利娃[\s]*V[\s]*系列' => 'Oliva Serie V',
                '奥利娃[\s]*G[\s]*系列' => 'Oliva Serie G',
                '奥利娃[\s]*O[\s]*系列' => 'Oliva Serie O',
                '奥利娃[\s]*大师杰作[\s]*系列' => 'Oliva Master Blends',
                '奥利娃[\s]*V[\s]*梅拉尼奥' => 'Oliva Serie V Melanio',
                
                // Arturo Fuente series
                '阿图罗[\s]*富恩特[\s]*不敢说话的X' => 'Arturo Fuente Opus X',
                '阿图罗[\s]*富恩特[\s]*海明威' => 'Arturo Fuente Hemingway',
                '阿图罗[\s]*富恩特[\s]*唐卡洛斯' => 'Arturo Fuente Don Carlos',
                '阿图罗[\s]*富恩特[\s]*安妮欧' => 'Arturo Fuente Anejo',
                '阿图罗[\s]*富恩特[\s]*X[\s]*作品' => 'Arturo Fuente Opus X',
                '富恩特[\s]*不敢说话的X' => 'Fuente Opus X',
                '富恩特[\s]*海明威' => 'Fuente Hemingway',
                '富恩特[\s]*唐卡洛斯' => 'Fuente Don Carlos',
                '富恩特[\s]*安妮欧' => 'Fuente Anejo',
                '富恩特[\s]*X[\s]*作品' => 'Fuente Opus X',
                
                // My Father series
                '我的父亲[\s]*勒比柱' => 'My Father Le Bijou',
                '我的父亲[\s]*法官' => 'My Father The Judge',
                '我的父亲[\s]*弗洛里达' => 'My Father La Flor de las Antillas',
                '我的父亲[\s]*拉奥帕拉' => 'My Father La Opulencia',
                '麦法瑟[\s]*勒比柱' => 'My Father Le Bijou',
                '麦法瑟[\s]*法官' => 'My Father The Judge',
                '麦法瑟[\s]*弗洛里达' => 'My Father La Flor de las Antillas',
                '麦法瑟[\s]*拉奥帕拉' => 'My Father La Opulencia',
                
                // Rocky Patel Series
                '洛基帕特尔[\s]*十周年' => 'Rocky Patel Decade',
                '洛基帕特尔[\s]*十五周年' => 'Rocky Patel 15th Anniversary',
                '洛基帕特尔[\s]*二十周年' => 'Rocky Patel 20th Anniversary',
                '洛基帕特尔[\s]*老年' => 'Rocky Patel Vintage',
                '洛基帕特尔[\s]*老年[\s]*1990' => 'Rocky Patel Vintage 1990',
                '洛基帕特尔[\s]*老年[\s]*1992' => 'Rocky Patel Vintage 1992',
                '洛基帕特尔[\s]*老年[\s]*1999' => 'Rocky Patel Vintage 1999',
                '洛基帕特尔[\s]*老年[\s]*2003' => 'Rocky Patel Vintage 2003',
                '罗基帕特尔[\s]*十周年' => 'Rocky Patel Decade',
                '罗基帕特尔[\s]*十五周年' => 'Rocky Patel 15th Anniversary',
                '罗基帕特尔[\s]*二十周年' => 'Rocky Patel 20th Anniversary',
                '罗基帕特尔[\s]*老年' => 'Rocky Patel Vintage',
                
                // Drew Estate Series
                '德鲁庄园[\s]*利加[\s]*9' => 'Drew Estate Liga Privada No.9',
                '德鲁庄园[\s]*利加[\s]*T52' => 'Drew Estate Liga Privada T52',
                '德鲁庄园[\s]*酸[\s]*一' => 'Drew Estate Acid One',
                '德鲁庄园[\s]*酸[\s]*蓝调' => 'Drew Estate Acid Blondie',
                '德鲁庄园[\s]*恩都罗' => 'Drew Estate Undercrown',
                '德鲁庄园[\s]*恩都罗[\s]*阴影' => 'Drew Estate Undercrown Shade',
                '德鲁庄园[\s]*恩都罗[\s]*马杜罗' => 'Drew Estate Undercrown Maduro',
                '杜鲁庄园[\s]*利加[\s]*9' => 'Drew Estate Liga Privada No.9',
                '杜鲁庄园[\s]*利加[\s]*T52' => 'Drew Estate Liga Privada T52',
                '杜鲁庄园[\s]*酸[\s]*一' => 'Drew Estate Acid One',
                '杜鲁庄园[\s]*酸[\s]*蓝调' => 'Drew Estate Acid Blondie',
                '杜鲁庄园[\s]*恩都罗' => 'Drew Estate Undercrown',
                
                // EP Carrillo Series
                'E.P.[\s]*卡里洛[\s]*誓约' => 'E.P. Carrillo Pledge',
                'E.P.[\s]*卡里洛[\s]*安可' => 'E.P. Carrillo Encore',
                'E.P.[\s]*卡里洛[\s]*历史' => 'E.P. Carrillo La Historia',
                'E.P.[\s]*卡里洛[\s]*英寸' => 'E.P. Carrillo Inch',
                'E.P.[\s]*卡利略[\s]*誓约' => 'E.P. Carrillo Pledge',
                'E.P.[\s]*卡利略[\s]*安可' => 'E.P. Carrillo Encore',
                'E.P.[\s]*卡利略[\s]*历史' => 'E.P. Carrillo La Historia',
                'E.P.[\s]*卡利略[\s]*英寸' => 'E.P. Carrillo Inch',
                
                // Cuban brand-specific series
                '罗密欧[\s]*([1-5])号' => 'Romeo No.$1',
                '罗密欧[\s]*([1-5])' => 'Romeo No.$1',
                '蒙特[\s]*([1-5])号' => 'Montecristo No.$1',
                '蒙特[\s]*([1-5])' => 'Montecristo No.$1',
                '蒙特[\s]*A' => 'Montecristo A',
                '蒙特[\s]*开放[\s]*鹰' => 'Montecristo Open Eagle',
                '蒙特[\s]*开放[\s]*大师' => 'Montecristo Open Master',
                '蒙特[\s]*开放[\s]*初级' => 'Montecristo Open Junior',
                '蒙特[\s]*开放[\s]*赛艇' => 'Montecristo Open Regatta',
                '特立尼达[\s]*机智' => 'Trinidad Ingenios',
                '特立尼达[\s]*菲吉亚' => 'Trinidad Vigia',
                '特立尼达[\s]*创始人' => 'Trinidad Fundadores',
                '特立尼达[\s]*殖民地' => 'Trinidad Coloniales',
                '特立尼达[\s]*雷耶斯' => 'Trinidad Reyes',
                '特立尼达[\s]*托佩斯' => 'Trinidad Topes',
                '特利尼达[\s]*机智' => 'Trinidad Ingenios',
                '特利尼达[\s]*菲吉亚' => 'Trinidad Vigia',
                '特利尼达[\s]*创始人' => 'Trinidad Fundadores',
                '特利尼达[\s]*殖民地' => 'Trinidad Coloniales',
                '特利尼达[\s]*雷耶斯' => 'Trinidad Reyes',
                '特利尼达[\s]*托佩斯' => 'Trinidad Topes',
                '波利瓦尔[\s]*皇家皇冠' => 'Bolivar Royal Coronas',
                '波利瓦尔[\s]*比利高[\s]*细雪茄' => 'Bolivar Belicoso Fino',
                '玻利瓦尔[\s]*皇家皇冠' => 'Bolivar Royal Coronas',
                '玻利瓦尔[\s]*比利高[\s]*细雪茄' => 'Bolivar Belicoso Fino',
                '帕塔加斯[\s]*D[\s]*4' => 'Partagas Serie D No.4',
                '帕塔加斯[\s]*P[\s]*2' => 'Partagas Serie P No.2',
                '帕塔加斯[\s]*E[\s]*2' => 'Partagas Serie E No.2',
                '帕特加斯[\s]*D[\s]*4' => 'Partagas Serie D No.4',
                '帕特加斯[\s]*P[\s]*2' => 'Partagas Serie P No.2',
                '帕特加斯[\s]*E[\s]*2' => 'Partagas Serie E No.2',
                '优普曼[\s]*皇家罗布图' => 'H. Upmann Royal Robusto',
                '优普曼[\s]*大皇冠[\s]*46' => 'H. Upmann Magnum 46',
                '优普曼[\s]*大皇冠[\s]*50' => 'H. Upmann Magnum 50',
                '优普曼[\s]*大皇冠[\s]*54' => 'H. Upmann Magnum 54',
                '优普曼[\s]*爵士' => 'H. Upmann Connoisseur',
                '乌普曼[\s]*皇家罗布图' => 'H. Upmann Royal Robusto',
                '乌普曼[\s]*大皇冠[\s]*46' => 'H. Upmann Magnum 46',
                '乌普曼[\s]*大皇冠[\s]*50' => 'H. Upmann Magnum 50',
                '乌普曼[\s]*大皇冠[\s]*54' => 'H. Upmann Magnum 54',
                '乌普曼[\s]*爵士' => 'H. Upmann Connoisseur',
                '好友[\s]*美食家[\s]*1号' => 'Hoyo de Monterrey Epicure No.1',
                '好友[\s]*美食家[\s]*2号' => 'Hoyo de Monterrey Epicure No.2',
                '好友[\s]*美食家[\s]*特别[\s]*2号' => 'Hoyo de Monterrey Epicure Especial',
                '好友[\s]*双皇冠' => 'Hoyo de Monterrey Double Corona',
                '好友[\s]*小罗布图' => 'Hoyo de Monterrey Petit Robusto',
                '霍约[\s]*美食家[\s]*1号' => 'Hoyo de Monterrey Epicure No.1',
                '霍约[\s]*美食家[\s]*2号' => 'Hoyo de Monterrey Epicure No.2',
                '霍约[\s]*美食家[\s]*特别[\s]*2号' => 'Hoyo de Monterrey Epicure Especial',
                '霍约[\s]*双皇冠' => 'Hoyo de Monterrey Double Corona',
                '霍约[\s]*小罗布图' => 'Hoyo de Monterrey Petit Robusto'
            ),
            
            // Enhanced dimension pattern matching - critical for accurate size matching
            'dimension_patterns' => array(
                // Match patterns for typical vitola dimensions
                // Format: RingGauge/Length - refined for better precision
                '(?:4[6-8]|49|50)/(?:17[5-9]|18[0-5])' => 'Churchill',
                '(?:4[3-7])/(?:16[0-9]|17[0-4])' => 'Lonsdale',
                '(?:4[8-9]|5[0-2])/(?:12[0-9]|13[0-9])' => 'Robusto',
                '(?:4[8-9]|5[0-2])/(?:10[0-9]|11[0-9])' => 'Petit Robusto',
                '(?:5[2-5])/(?:14[0-9]|15[0-9])' => 'Toro',
                '(?:5[5-9])/(?:13[0-9]|14[0-9])' => 'Wide Churchill',
                '(?:5[0-4])/(?:14[8-9]|15[0-3])' => 'Siglo VI',
                '(?:4[5-7])/(?:14[0-4])' => 'Siglo IV',
                '(?:4[0-2])/(?:15[3-7])' => 'Siglo III',
                '(?:4[0-2])/(?:12[7-9]|13[0-1])' => 'Siglo II',
                '(?:3[8-9]|4[0-1])/(?:10[0-4])' => 'Siglo I',
                '(?:5[0-4])/(?:10[0-4])' => 'Medio Siglo',
                
                // Exact dimensions for specific shapes with precise measurements
                '50/124' => 'Robusto',
                '47/178' => 'Churchill',
                '43/126' => 'Corona',
                '42/129' => 'Corona',
                '40/102' => 'Petit Corona',
                '55/133' => 'Wide Churchill',
                '52/140' => 'Toro',
                '54/145' => 'Toro',
                '54/160' => 'Piramides Extra',
                '56/135' => 'Nobles',
                '52/145' => 'Dianas',
                '57/125' => 'Hidalgos',
                '53/132' => 'Ambar',
                '52/170' => 'Seleccion Especial',
                '54/140' => 'Leal',
                '55/145' => 'Monterreyes',
                '54/120' => 'Templarios',
                '52/165' => 'Sixty',
                
                // Famous Cohiba Behike dimensions
                '52/119' => 'Behike 52',
                '54/144' => 'Behike 54',
                '56/166' => 'Behike 56',
                
                // Famous Cohiba Robusto dimensions
                '50/124' => 'Cohiba Robusto',
                
                // Famous Cohiba Esplendidos dimensions
                '47/178' => 'Esplendidos',
                
                // Famous Montecristo No. 2 dimensions
                '52/156' => 'Montecristo No. 2',
                
                // Famous Partagas Serie D No. 4 dimensions
                '50/124' => 'Partagas Serie D No. 4',
                
                // Famous H. Upmann Magnum 50 dimensions
                '50/160' => 'Magnum 50',
                
                // Famous Hoyo de Monterrey Epicure No. 2 dimensions
                '50/124' => 'Epicure No. 2',
                
                // Mini and short formats with precise ranges
                '(?:2[6-8])/(?:8[0-3])' => 'Short',
                '(?:19|20|21)/(?:82|83|84)' => 'Mini',
                '(?:21|22|23)/(?:9[5-9])' => 'Club',
                
                // Common dimension patterns for specialist cigars
                '(?:3[8-9]|40)/(?:15[0-4])' => 'Lancero',
                '(?:3[4-6])/(?:12[5-9])' => 'Panetela',
                '(?:5[2-4])/(?:14[0-2])' => 'Torpedo',
                '(?:5[2-4])/(?:13[7-9])' => 'Belicoso',
                '(?:5[2-6]|57|58)/(?:13[0-5])' => 'Gran Toro',
                
                // Expanded with additional dimensions
                '(?:3[8-9])/(?:9[2-8])' => 'Petit Corona',
                '(?:4[2-3])/(?:11[0-5])' => 'Coronitas',
                '(?:4[2-4])/(?:12[0-9])' => 'Corona',
                '(?:4[2-4])/(?:15[0-7])' => 'Corona Gorda',
                '(?:4[5-6])/(?:10[8-9]|11[0-4])' => 'Petit Robusto',
                '(?:4[6-8])/(?:12[0-9]|13[0-9])' => 'Robusto',
                '(?:5[0-4])/(?:15[0-9])' => 'Toro',
                '(?:5[4-6])/(?:14[0-7])' => 'Torpedo',
                '(?:5[5-9])/(?:14[0-9]|15[0-9])' => 'Gordo',
                '(?:5[6-8])/(?:15[0-6])' => 'Double Corona',
                '(?:6[0-4])/(?:15[0-9]|16[0-9])' => 'Gran Robusto',
                '(?:6[0-4])/(?:18[0-9]|19[0-9])' => 'Gran Corona',
                '(?:4[6-9])/(?:18[0-9]|19[0-9])' => 'Double Corona',
                '(?:3[8-9])/(?:17[0-9]|18[0-9])' => 'Lancero',
                '(?:4[1-3])/(?:16[8-9]|17[0-5])' => 'Lonsdale',
                '(?:4[0-2])/(?:11[0-1])' => 'Perla',
                '(?:5[0-3])/(?:9[0-9]|10[0-5])' => 'Half Corona',
                '(?:3[3-6])/(?:9[0-9]|10[0-9])' => 'Minuto',
                '(?:3[3-5])/(?:8[0-5])' => 'Demi Tasse',
                '(?:2[6-9])/(?:8[6-9]|9[0-4])' => 'Club',
                
                // Common dimensions for non-Cuban cigars
                '(?:5[0-2])/(?:13[2-8])' => 'Standard Toro',
                '(?:5[4-6])/(?:15[2-8])' => 'Gran Toro',
                '(?:6[0-4])/(?:15[8-9]|16[0-4])' => 'Gigante',
                '(?:4[8-9])/(?:10[0-5])' => 'Rothschild',
                '(?:4[4-6])/(?:16[0-8])' => 'Corona Extra',
                '(?:4[2-4])/(?:13[0-6])' => 'Corona Especial',
                '(?:5[2-4])/(?:17[5-9]|18[0-5])' => 'Double Toro',
                '(?:6[0-4])/(?:12[0-6])' => 'Gordo Especial',
                '(?:4[2-4])/(?:18[0-9])' => 'Long Corona',
                '(?:3[6-8])/(?:7[0-9]|8[0-5])' => 'Small Club',
                '(?:5[8-9]|6[0-2])/(?:13[0-9]|14[0-5])' => 'Presidente',
                '(?:4[0-2])/(?:7[0-9])' => 'Cigarillo',
                '(?:3[0-2])/(?:4[0-9]|5[0-5])' => 'Mini Cigarillo',
                '(?:5[0-2])/(?:13[8-9]|14[0-5])' => 'Figurado',
                '(?:4[2-4])/(?:16[0-9])' => 'Gran Panetela',
                
                // Small ring gauge dimensions
                '(?:3[0-3])/(?:11[5-9]|12[0-2])' => 'Mille Fleurs',
                '(?:3[0-2])/(?:10[0-5])' => 'Demi Tasse',
                '(?:3[4-6])/(?:13[2-6])' => 'Petit Corona',
                '(?:4[0-2])/(?:12[6-9])' => 'Marevas',
                '(?:4[0-2])/(?:10[2-6])' => 'Perla',
                '(?:3[0-2])/(?:10[0-4])' => 'Small Club',
                '(?:3[0-3])/(?:9[6-8])' => 'Puritos',
                '(?:3[6-8])/(?:9[0-5])' => 'Entroacto',
                '(?:3[5-6])/(?:12[6-9]|13[0-2])' => 'Tres Petit Corona',
                '(?:2[6-9])/(?:8[0-5])' => 'Cigarillo',
                '(?:2[0-5])/(?:7[0-5])' => 'Mini',
                '(?:3[2-4])/(?:10[7-9]|11[0-2])' => 'Petit Julieta',
                '(?:3[8-9])/(?:12[9-9]|13[0-2])' => 'Petit Cazadores',
                '(?:3[8-9])/(?:11[0-2])' => 'Minutos',
                '(?:2[8-9]|3[0])/(?:8[5-7])' => 'Club',
                '(?:3[8-9])/(?:10[4-7])' => 'Seoane',
                '(?:2[8-9])/(?:11[0-3])' => 'Panetela',
                '(?:2[6-8])/(?:9[5-9])' => 'Chicos'
            ),
            
            // Enhanced year and special edition pattern matching
            'year_patterns' => array(
                // Match Chinese zodiac years with detailed pattern recognition
                '(虎|兔|龙|蛇|马|羊|猴|鸡|狗|猪|鼠|牛)年(?:限量版?)?(?:20\d{2})?|20\d{2}(?:限量版?)?(虎|兔|龙|蛇|马|羊|猴|鸡|狗|猪|鼠|牛)年' => 'Year of the $1 $2',
                
                // Match specific four-digit year limited editions with more precision
                '20(\d{2})(?:年)?限量(?:版)?|限量(?:版)?20(\d{2})(?:年)?' => '$1$2 Limited Edition',
                '(?:限量|LE)(?:[版])?\s*\(?20(\d{2})\)?' => '$1 Limited Edition',
                '(LE|限量版?)\s*(\d{4})' => '$2 Limited Edition',
                '(\d{4})\s*(LE|限量版?)' => '$1 Limited Edition',
                
                // Match anniversary editions with specific year options
                '(\d{1,3})(?:周年|週年|th\s*Anniversary)(?:限量版?)?' => '$1th Anniversary',
                '(\d{1,3})\s*Anniversary' => '$1th Anniversary',
                '周年|週年|(?:周年|週年)纪念' => 'Anniversary',
                
                // Match editions with specific years
                '20(\d{2})年(出厂|产)' => '20$1 (Vintage)',
                '20(\d{2})年限量版?' => '20$1LE',
                
                // Match general limited edition patterns with improved precision
                '限量版|限量|限制版|限制|Limited\s*Edition' => 'Limited Edition',
                '特别版|特别|特制版|特制|Special\s*Edition' => 'Special Edition',
                '珍藏版|珍藏|Reserva' => 'Reserva',
                '纪念版|纪念|Commemorative' => 'Commemorative Edition',
                
                // Millennium
                '千禧|千禧年' => 'Millennium',
                '2000年限量版' => '2000 Millennium Edition',
                
                // Additional patterns for specific years
                '2010年以前' => 'Pre-2010',
                '2010年以后' => 'Post-2010',
                '2010年' => '2010',
                '2011年' => '2011',
                '2012年' => '2012',
                '2013年' => '2013',
                '2014年' => '2014',
                '2015年' => '2015',
                '2016年' => '2016',
                '2017年' => '2017',
                '2018年' => '2018',
                '2019年' => '2019',
                '2020年' => '2020',
                '2021年' => '2021',
                '2022年' => '2022',
                '2023年' => '2023',
                '2024年' => '2024',
                '2025年' => '2025',
            ),
            
            // Regional edition patterns with flexible matching
            'regional_patterns' => array(
                // More flexible regional edition patterns that match partial and various forms
                '(?:古巴|古)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Cuba',
                '(?:西班牙|西|西班|班牙)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Spain',
                '(?:葡萄牙|葡|葡国|萄牙)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Portugal',
                '(?:意大利|意|意大|大利)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Italy',
                '(?:港澳|港|澳|香港|澳门|港澳|香港澳门)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Hong Kong & Macau',
                '(?:法国|法|法国区域|法兰西)(?:地限|区域|地区|限定|限量|限)' => 'Ex. France',
                '(?:德国|德|德意志)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Germany',
                '(?:瑞士|瑞)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Switzerland',
                '(?:英国|英|大不列颠|联合王国|UK)(?:地限|区域|地区|限定|限量|限)' => 'Ex. United Kingdom',
               '(?:加拿大|加)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Canada',
                '(?:墨西哥|墨)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Mexico',
                '(?:荷兰|荷|尼德兰)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Netherlands',
                '(?:比利时|比)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Belgium',
                '(?:卢森堡|卢)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Luxembourg',
                '(?:安道尔|安)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Andorra',
                '(?:奥地利|奥)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Austria',
                '(?:希腊|希)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Greece',
                '(?:以色列|以)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Israel',
                '(?:黎巴嫩|黎)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Lebanon',
                '(?:阿联酋|阿联|迪拜|阿布扎比)(?:地限|区域|地区|限定|限量|限)' => 'Ex. UAE',
                '(?:日本|日|日本区域)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Japan',
                '(?:中国|中)(?:地限|区域|地区|限定|限量|限)' => 'Ex. China',
                '(?:台湾|台)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Taiwan',
                '(?:澳大利亚|澳大|澳州)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Australia',
                '(?:泰国|泰)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Thailand',
                '(?:新加坡|新)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Singapore',
                '(?:马来西亚|马来|大马)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Malaysia',
                '(?:韩国|韩|南韩)(?:地限|区域|地区|限定|限量|限)' => 'Ex. South Korea',
                '(?:印度尼西亚|印尼|印度)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Indonesia',
                '(?:俄罗斯|俄|俄国)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Russia',
                '(?:拉丁美洲|拉美|拉)(?:地限|区域|地区|限定|限量|限)' => 'Ex. LAAM',
                '(?:亚太|亚太地区|亚洲太平洋)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Asia Pacific',
                '(?:亚洲|亚)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Asia',
                '(?:欧洲|欧|欧盟)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Europe',
                '(?:北美洲|北美)(?:地限|区域|地区|限定|限量|限)' => 'Ex. North America',
                '(?:中东|中东地区)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Middle East',
                '(?:北欧|北欧地区|斯堪的纳维亚)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Nordic',
                '(?:加勒比|加勒比地区)(?:地限|区域|地区|限定|限量|限)' => 'Ex. Caribbean',
                '(?:全球限量|全球|国际|环球)(?:地限|区域|地区|限定|限量|限|\\d+盒)' => 'Limited Production',
                '(?:独立编号|编号|独立号|独号)' => 'Numbered',
                '区域限定版' => 'Regional Edition',
                '地区限定版' => 'Regional Edition',
                '(?:ER|RE)(?:\\s|\\()\\d{4}' => 'Regional Edition',
                '\\d{4}(?:\\s)?(?:ER|RE)' => 'Regional Edition'
            ),
            
            // Special edition terms mapping - enhanced with more variations
            'special_editions' => array(
                '限量版' => 'Limited Edition',
                '限量' => 'Limited',
                'LE' => 'Limited Edition',
                '珍藏版' => 'Reserva',
                '珍藏' => 'Reserva',
                '周年纪念' => 'Anniversary',
                '周年' => 'Anniversary',
                '周年紀念' => 'Anniversary',
                'Anniversary' => 'Anniversary',
                '特别版' => 'Special Edition',
                '特别' => 'Special',
                '特選版' => 'Special Edition',
                '特選' => 'Special',
                '纪念版' => 'Commemorative Edition',
                '纪念' => 'Commemorative',
                '紀念版' => 'Commemorative Edition',
                '紀念' => 'Commemorative',
                '特選' => 'Selected',
                '特別版' => 'Special Edition',
                '特別' => 'Special',
                '手工卷制' => 'Hand Rolled',
                '全手工' => 'Totally Hand Made',
                '手工' => 'Hand Made',
                '精选' => 'Premium',
                '精選' => 'Premium',
                '老年份' => 'Aged',
                '陈年' => 'Aged',
                '典藏' => 'Collection',
                '典藏版' => 'Collection Edition',
                '区域版' => 'Regional Edition',
                '区域' => 'Regional',
                '地区限定' => 'Regional Edition',
                'LCDH' => 'LCDH',
                'EH-LCDH' => 'EH-LCDH',
                'RE' => 'Regional Edition',
                '木盒' => 'Wooden Box',
                '保湿盒' => 'Humidor',
                '全球限量' => 'Limited Production',
                '编号' => 'Numbered',
                '独立编号' => 'Numbered',
                '古巴地限' => 'Ex. Cuba',
                '旅行装' => 'Travel Set',
                '千禧' => 'Millennium',
                // Additional special editions
                'Grand Reserva' => 'Grand Reserva',
                '特级珍藏' => 'Grand Reserva',
                'Seleccion Reserva' => 'Seleccion Reserva',
                '特选珍藏' => 'Seleccion Reserva',
                '收藏家' => 'Coleccion',
                '私人收藏' => 'Private Collection',
                '私藏' => 'Private Reserve',
                'Anejados' => 'Anejados',
                '陈年系列' => 'Anejados',
                'Book' => 'Book Edition',
                '书本' => 'Book Edition',
                'Vintage' => 'Vintage',
                '年份' => 'Vintage',
                'Casa del Habano' => 'La Casa del Habano',
                'Duty Free' => 'Duty Free',
                '免税' => 'Duty Free',
                '友谊商店' => 'La Casa del Habano',
                'Friendship Store' => 'La Casa del Habano',
                'Tubos' => 'Tubos',
                '管装' => 'Tubos',
                'A/T' => 'Aluminum Tube',
                '铝管' => 'Aluminum Tube',
                '20支装' => '20-Count',
                '25支装' => '25-Count',
                '10支装' => '10-Count',
                '5支装' => '5-Count',
                '3支装' => '3-Count',
                'Travel Humidor' => 'Travel Humidor',
                '旅行保湿盒' => 'Travel Humidor',
                
                // Zodiac editions with many variations
                '虎年' => 'Year of the Tiger',
                '龙年' => 'Year of the Dragon',
                '兔年' => 'Year of the Rabbit',
                '蛇年' => 'Year of the Snake',
                '马年' => 'Year of the Horse',
                '羊年' => 'Year of the Sheep',
                '猴年' => 'Year of the Monkey',
                '鸡年' => 'Year of the Rooster',
                '狗年' => 'Year of the Dog',
                '猪年' => 'Year of the Pig',
                '鼠年' => 'Year of the Rat',
                '牛年' => 'Year of the Ox',
                
                // More flexible wrapper and process descriptors
                '自然' => 'Natural',
                '马杜罗' => 'Maduro',
                '康涅狄格' => 'Connecticut',
                '哈瓦那' => 'Habano',
                '巴西' => 'Brazilian',
                '圣安德烈斯' => 'San Andres',
                '科罗霍' => 'Corojo',
                '康尼狄格' => 'Connecticut',
                '自然色' => 'Natural',
                '黑色' => 'Maduro',
                '褐色' => 'Maduro',
                '红色' => 'Colorado',
                '哈巴诺' => 'Habano',
                '克里奥尔' => 'Criollo',
                '巴西利亚' => 'Brasileño',
                '墨西哥' => 'Mexican',
                '日晒' => 'Sun Grown',
                '阴生' => 'Shade Grown',
                '阴生康' => 'Shade Grown Connecticut',
            ),
            
            // Enhanced packaging terms with quantity pattern recognition
            'packaging' => array(
                // Quantity patterns with precise regex
                '(\d+)支(?:装|盒)?' => '$1-Count',
                '(\d+)支\((\d+)盒\)' => '$1-Count ($2 Boxes)',
                '铝管(\d+)支(?:\((\d+)盒\))?' => 'Aluminum Tube $1-Count',
                '纸盒(\d+)支(?:\((\d+)盒\))?' => 'Paper Box $1-Count',
                '(\d+)×(\d+)支' => '$1 × $2-Count',
                '(\d+)支\/盒' => '$1-Count/Box',
                '(\d+)支装' => '$1-Count Pack',
                
                // Standard packaging types - expanded with more variants
                '木盒' => 'Wooden Box',
                '紙盒' => 'Paper Box',
                '纸盒' => 'Paper Box',
                '铝管' => 'Aluminum Tube',
                'A/T' => 'Aluminum Tube',
                '铝管单支' => 'Aluminum Tube Single',
                '单支铝管' => 'Aluminum Tube Single',
                '陶瓷罐' => 'Ceramic Jar',
                '玻璃纸捆装' => 'Cellophane Bundle',
                '瓷瓶包装' => 'Ceramic Container',
                '玻纸' => 'Cellophane',
                '铁盒' => 'Tin',
                '抽盖木盒' => 'Slide Lid Box',
                '翻盖木盒' => 'Flip Top Box',
                '围栏木盒' => 'Cabinets',
                '上漆木盒' => 'Varnished Box',
                '未上漆木盒' => 'Unvarnished Box',
                '单支' => 'Single',
                '单' => 'Single',
                '支' => 'Count',
                '盒' => 'Box',
                '保湿盒' => 'Humidor',
                '雪茄柜' => 'Cabinet',
                '雪茄保湿袋' => 'Humidifier Bag',
                '旅行保湿盒' => 'Travel Humidor',
                '礼盒' => 'Gift Box',
                '套装' => 'Set',
                '旅行装' => 'Travel Set',
                '精美礼盒' => 'Luxury Gift Box',
                '精装礼盒' => 'Premium Gift Box',
                '原装盒' => 'Original Box',
                '原盒' => 'Original Box',
                '皮盒' => 'Leather Box',
                '包装盒' => 'Packaging Box',
                '礼品盒' => 'Gift Box',
                '礼物盒' => 'Gift Box',
                '收藏盒' => 'Collector Box',
                '圆筒' => 'Tube',
                '圆管' => 'Tube',
                '塑料管' => 'Plastic Tube',
                '玻璃管' => 'Glass Tube',
                '玻璃盒' => 'Glass Box',
                '亚克力盒' => 'Acrylic Box',
                '透明盒' => 'Transparent Box',
                '大礼盒' => 'Large Gift Box',
                '迷你盒' => 'Mini Box',
                '小盒' => 'Small Box',
                '中盒' => 'Medium Box',
                '大盒' => 'Large Box',
                '特大盒' => 'Extra Large Box',
                // Additional packaging types
                '2支装' => '2-Count',
                '3支装' => '3-Count',
                '4支装' => '4-Count',
                '5支装' => '5-Count',
                '10支装' => '10-Count',
                '12支装' => '12-Count',
                '15支装' => '15-Count',
                '16支装' => '16-Count',
                '20支装' => '20-Count',
                '24支装' => '24-Count',
                '25支装' => '25-Count',
                '50支装' => '50-Count',
                '乌木盒' => 'Ebony Box',
                '松木盒' => 'Pine Wood Box',
                '雪松盒' => 'Cedar Box',
                '描金盒' => 'Gold Trim Box',
                '百年纪念盒' => 'Centennial Box',
                '复古盒' => 'Vintage Box',
                '首饰盒' => 'Jewelry Box',
                '橡木桶' => 'Oak Barrel',
                '冰箱' => 'Refrigerator',
                '保鲜盒' => 'Freshness Box',
                '手提盒' => 'Carry Case',
                '展示盒' => 'Display Box',
                '双层盒' => 'Double-Deck Box',
                '三层盒' => 'Triple-Deck Box',
                '蝶铰盒' => 'Butterfly Hinge Box',
                '磁吸盒' => 'Magnetic Box',
                '帆布包' => 'Canvas Bag',
                '真皮盒' => 'Genuine Leather Box',
                '巴西木盒' => 'Brazilian Wood Box',
                '西班牙雪松' => 'Spanish Cedar',
                '手工木盒' => 'Handcrafted Box',
                '限量木盒' => 'Limited Edition Box',
                '骨董盒' => 'Antique Box',
                '签名限量盒' => 'Signed Limited Box',
                '原厂盒' => 'Original Factory Box',
                '圆形铁盒' => 'Round Tin',
                '方形铁盒' => 'Square Tin',
                '铝质礼盒' => 'Aluminum Gift Box',
                '古巴原包装' => 'Original Cuban Packaging',
                '彩盒' => 'Colored Box',
                '描花木盒' => 'Engraved Wooden Box',
            )
        );
    }
    
    /**
     * Chinese Zodiac year mapping with corresponding calendar years
     * This is crucial for accurate zodiac year detection
     */
    public static function get_zodiac_year_mapping() {
        return array(
            '鼠年' => array('2020', '2008', '1996', '1984', '1972', '2032', '1960', '1948', '1936', '2044'),
            '牛年' => array('2021', '2009', '1997', '1985', '1973', '2033', '1961', '1949', '1937', '2045'),
            '虎年' => array('2022', '2010', '1998', '1986', '1974', '2034', '1962', '1950', '1938', '2046'),
            '兔年' => array('2023', '2011', '1999', '1987', '1975', '2035', '1963', '1951', '1939', '2047'),
            '龙年' => array('2024', '2012', '2000', '1988', '1976', '2036', '1964', '1952', '1940', '2048'),
            '蛇年' => array('2025', '2013', '2001', '1989', '1977', '2037', '1965', '1953', '1941', '2049'),
            '马年' => array('2026', '2014', '2002', '1990', '1978', '2038', '1966', '1954', '1942', '2050'),
            '羊年' => array('2027', '2015', '2003', '1991', '1979', '2039', '1967', '1955', '1943', '2051'),
            '猴年' => array('2028', '2016', '2004', '1992', '1980', '2040', '1968', '1956', '1944', '2052'),
            '鸡年' => array('2029', '2017', '2005', '1993', '1981', '2041', '1969', '1957', '1945', '2053'),
            '狗年' => array('2030', '2018', '2006', '1994', '1982', '2042', '1970', '1958', '1946', '2054'),
            '猪年' => array('2031', '2019', '2007', '1995', '1983', '2043', '1971', '1959', '1947', '2055')
        );
    }

/**
     * Get mappings for regional distributors and official agents
     * This is critical for identifying authentic cigars from different regions
     */
    public static function get_distributor_mappings() {
        return array(
            // Asian Pacific region
            'pcc' => array('太平洋雪茄公司', '太平洋', '太平洋烟草', 'PCC', 'Pacific Cigar Company', '太平洋雪茄', 'Pacific Cigar', '太平洋公司'),
            'pacific cigar company' => array('太平洋雪茄公司', '太平洋', '太平洋烟草', 'PCC', '太平洋雪茄', 'Pacific Cigar', '太平洋公司'),
            'pacific cigar' => array('太平洋雪茄公司', '太平洋', '太平洋烟草', 'PCC', '太平洋雪茄', '太平洋公司'),
            
            // European region
            'hunters & frankau' => array('亨特与弗兰考', '亨特', '亨特弗兰考', 'H&F', '亨特和弗兰考', '英国总代理', '英国总经销', '英国经销商'),
            'h&f' => array('亨特与弗兰考', '亨特', '亨特弗兰考', '亨特和弗兰考', '英国总代理', '英国总经销', '英国经销商'),
            'la casa del habano' => array('哈瓦那之家', '雪茄之家', 'LCDH', '哈瓦那雪茄屋', '哈瓦那专卖店', '官方专卖店', '官方零售店', '友谊商店'),
            'lcdh' => array('哈瓦那之家', '雪茄之家', '哈瓦那雪茄屋', '哈瓦那专卖店', '官方专卖店', '官方零售店', '友谊商店'),
            
            // North American region
            'habanos s.a.' => array('哈瓦那斯', '哈瓦那公司', '古巴雪茄公司', '哈瓦那雪茄公司', 'HSA', '古巴官方', '古巴国营'),
            'hsa' => array('哈瓦那斯', '哈瓦那公司', '古巴雪茄公司', '哈瓦那雪茄公司', '古巴官方', '古巴国营'),
            'phoenicia t.a.a. cyprus' => array('菲尼基亚', '塞浦路斯菲尼基亚', '菲尼基亚公司', '中东代理', '中东总代理', '中东总经销'),
            'phoenicia' => array('菲尼基亚', '塞浦路斯菲尼基亚', '菲尼基亚公司', '中东代理', '中东总代理', '中东总经销'),
            
            // Latin American region
            'intertabak ag' => array('国际烟草股份公司', '国际烟草', '因特巴克', '瑞士代理', '瑞士总代理', '瑞士总经销'),
            'intertabak' => array('国际烟草股份公司', '国际烟草', '因特巴克', '瑞士代理', '瑞士总代理', '瑞士总经销'),
            'corporación habanos' => array('哈瓦那集团', '哈瓦那斯集团', '古巴雪茄集团', '哈瓦那雪茄集团', '古巴官方集团'),
            'corporacion habanos' => array('哈瓦那集团', '哈瓦那斯集团', '古巴雪茄集团', '哈瓦那雪茄集团', '古巴官方集团'),
            
            // Chinese region
            'infifon hong kong' => array('英菲丰香港', '英菲丰', 'Infifon', '香港代理', '香港总代理', '香港总经销', '中国香港代理'),
            'infifon' => array('英菲丰香港', '英菲丰', '香港代理', '香港总代理', '香港总经销', '中国香港代理'),
            'china national tobacco' => array('中国烟草', '中烟', '中国烟草总公司', '中烟公司', '中国烟草专卖局', '烟草专卖局', '国烟'),
            'cntc' => array('中国烟草', '中烟', '中国烟草总公司', '中烟公司', '中国烟草专卖局', '烟草专卖局', '国烟'),
            
            // Special International Distributors
            'altadis' => array('奥特迪斯', '阿尔塔迪斯', 'Altadis', '西班牙总代理', '西班牙代理', '法国总代理', '法国代理'),
            'gerard père et fils' => array('杰拉德父子', '杰拉德', 'Gerard', '比利时代理', '比利时总代理', '比利时总经销'),
            'gerard' => array('杰拉德父子', '杰拉德', '比利时代理', '比利时总代理', '比利时总经销'),
            'quinta avenida' => array('第五大道', '昆塔大道', 'Quinta Avenida', '德国代理', '德国总代理', '德国总经销'),
            'cubacigar benelux' => array('古巴雪茄比荷卢', '比荷卢古巴雪茄', 'Cubacigar', '比荷卢代理', '比荷卢总代理', '荷兰代理', '比利时代理', '卢森堡代理'),
            'cubacigar' => array('古巴雪茄比荷卢', '比荷卢古巴雪茄', '比荷卢代理', '比荷卢总代理', '荷兰代理', '比利时代理', '卢森堡代理'),
            'topcigar' => array('顶级雪茄', '顶级雪茄公司', 'Top Cigar', '瑞典代理', '瑞典总代理', '北欧代理', '北欧总代理'),
            
            // Non-Cuban major distributors
            'davidoff group' => array('大卫杜夫集团', '达维多夫集团', '奥廷格·大卫杜夫集团', '奥廷格大卫杜夫', 'Oettinger Davidoff Group', 'Oettinger Davidoff'),
            'general cigar' => array('通用雪茄', '通用雪茄公司', 'General Cigar', '通用烟草', '美国通用雪茄'),
            'altadis usa' => array('美国奥特迪斯', '美国阿尔塔迪斯', 'Altadis USA', '美国奥特迪斯公司', '美国阿尔塔迪斯公司'),
            'scandinavian tobacco group' => array('北欧烟草集团', '斯堪的纳维亚烟草集团', 'STG', '北欧烟草', '斯堪的纳维亚烟草'),
            'stg' => array('北欧烟草集团', '斯堪的纳维亚烟草集团', '北欧烟草', '斯堪的纳维亚烟草'),
            'imperial brands' => array('帝国品牌', '帝国烟草', 'Imperial Tobacco', '帝国品牌公司', '帝国烟草公司'),
            'imperial tobacco' => array('帝国品牌', '帝国烟草', '帝国品牌公司', '帝国烟草公司'),
            
            // Regional verification marks
            'eer' => array('EER', '欧盟税票', '欧盟认证', '欧盟印花', '欧盟关税标志', '欧盟进口标志'),
            'eun' => array('EUN', '英国税票', '英国认证', '英国印花', '英国关税标志', '英国进口标志'),
            'duty paid uk' => array('英国完税', '英国税票', '英国认证', '英国印花', '英国关税标志', '英国进口标志'),
            'duty paid' => array('完税', '已完税', '税票', '印花', '关税标志', '进口标志'),
            'imported by' => array('进口商', '进口自', '由...进口', '输入者', '由...输入', '进口方'),
            'distributed by' => array('经销商', '分销商', '经销自', '由...经销', '代理商', '代理自', '由...代理'),
            
            // Special edition identifiers
            'travel retail exclusive' => array('旅行零售专供', '免税店专供', '旅行零售独家', '免税店独家', '飞机场专供', '机场专供', '旅行专供', '机场独家'),
            'regional edition' => array('区域版', '地区限定', '区域限定版', '区域限定', '地区限定版', '地区专供', '区域专供', '专供版'),
            'casa del habano exclusive' => array('哈瓦那之家专供', 'LCDH专供', '哈瓦那之家独家', 'LCDH独家', '专卖店专供', '专卖店独家'),
            'duty free exclusive' => array('免税店专供', '免税专供', '免税店独家', '免税独家', '旅行零售专供', '旅行零售独家'),
            'limited edition' => array('限量版', '限定版', '限量', '限定', 'LE', '限量生产', '限定生产', '限量发行'),
            'vintage' => array('年份', '陈年', '老年', '老年份', '特定年份', '特别年份', '特别年代', '特定年代'),
            
            // Authentication and serial numbers
            'serial no' => array('序列号', '序号', '编号', '序列编号', '出厂编号', '生产编号', '防伪编号', '防伪号'),
            'serial number' => array('序列号', '序号', '编号', '序列编号', '出厂编号', '生产编号', '防伪编号', '防伪号'),
            'authentication code' => array('认证码', '防伪码', '验证码', '真品码', '真伪码', '验真码', '确认码'),
            'verification code' => array('验证码', '核验码', '核查码', '认证码', '防伪码', '真品码', '真伪码'),
            'hologram' => array('全息图', '激光标', '激光防伪', '全息防伪', '光变标', '光变防伪', '激光认证'),
            'authenticity seal' => array('真品封签', '防伪封签', '真品标签', '防伪标签', '真伪封签', '真伪标签', '认证封签'),
            'cuban warranty seal' => array('古巴保证封签', '古巴封签', '古巴认证封签', '哈瓦那封签', '哈瓦那认证封签', '古巴防伪封签'),
            'warranty seal' => array('保证封签', '认证封签', '防伪封签', '保证标签', '认证标签', '防伪标签'),
            
            // Specific import codes
            'prc duty paid' => array('中国完税', '中国税票', '中国认证', '中国印花', '中国关税标志', '中国进口标志', '中国海关完税'),
            'hk duty paid' => array('香港完税', '香港税票', '香港认证', '香港印花', '香港关税标志', '香港进口标志', '香港海关完税'),
            'swiss duty paid' => array('瑞士完税', '瑞士税票', '瑞士认证', '瑞士印花', '瑞士关税标志', '瑞士进口标志', '瑞士海关完税'),
            'german duty paid' => array('德国完税', '德国税票', '德国认证', '德国印花', '德国关税标志', '德国进口标志', '德国海关完税'),
            'french duty paid' => array('法国完税', '法国税票', '法国认证', '法国印花', '法国关税标志', '法国进口标志', '法国海关完税'),
            'italian duty paid' => array('意大利完税', '意大利税票', '意大利认证', '意大利印花', '意大利关税标志', '意大利进口标志'),
            'spanish duty paid' => array('西班牙完税', '西班牙税票', '西班牙认证', '西班牙印花', '西班牙关税标志', '西班牙进口标志'),
            'japanese duty paid' => array('日本完税', '日本税票', '日本认证', '日本印花', '日本关税标志', '日本进口标志', '日本海关完税'),
            'canadian duty paid' => array('加拿大完税', '加拿大税票', '加拿大认证', '加拿大印花', '加拿大关税标志', '加拿大进口标志'),
            'australian duty paid' => array('澳大利亚完税', '澳大利亚税票', '澳大利亚认证', '澳大利亚印花', '澳大利亚关税标志'),
            
            // Specific Asia Pacific distributors
            'bluebell' => array('蓝钟', '香港蓝钟', '蓝钟公司', '蓝钟集团', 'Bluebell Group', '香港蓝钟集团'),
            'red dot' => array('红点', '红点集团', '新加坡红点', '红点公司', 'Red Dot', '新加坡代理', '新加坡总代理'),
            'firebloom' => array('火花绽放', '火花公司', '台湾火花', '台湾代理', '台湾总代理', 'Firebloom', '台湾经销商'),
            'pacific cigar taiwan' => array('台湾太平洋雪茄', '台湾太平洋', '台湾PCC', '台湾太平洋烟草', '台湾太平洋公司', '台湾代理', '台湾总代理'),
            'the pacific cigar thailand' => array('泰国太平洋雪茄', '泰国太平洋', '泰国PCC', '泰国太平洋烟草', '泰国太平洋公司', '泰国代理', '泰国总代理'),
            'cigar emporium' => array('雪茄商场', '新加坡雪茄商场', '雪茄集散地', '新加坡雪茄集散地', 'Cigar Emporium', '新加坡经销商')
        );
    }
// static data 9999
    
    /**
     * Process a row from the Cuban Cigar CSV and find matches
     * 
     * @param array $csv_row A row from the CSV with keys matching the CSV headers
     * @param bool $debug Whether to include debug information
     * @return array Matching results
     */
    public static function process_csv_row($csv_row, $debug = false) {
        // Extract and sanitize CSV data
        $title = isset($csv_row['Title']) ? trim($csv_row['Title']) : '';
        $description = isset($csv_row['Description']) ? trim($csv_row['Description']) : '';
        $ring_size = isset($csv_row['Ring Size']) ? trim($csv_row['Ring Size']) : '';
        $length = isset($csv_row['Length']) ? trim($csv_row['Length']) : '';
        $packaging = isset($csv_row['Packaging']) ? trim($csv_row['Packaging']) : '';
        $main_category = isset($csv_row['Main Category']) ? trim($csv_row['Main Category']) : '';
        
        // Clean length (remove "mm" if present)
        $length = preg_replace('/\s*mm\s*$/i', '', $length);
        
        // Format dimensions string
        $dimensions = '';
        if (!empty($ring_size) && !empty($length)) {
            $dimensions = $ring_size . '/' . $length;
        }
        
        // Detect product type
        $product_type = self::detect_product_type($title);
        
        // Initialize debug log
        if ($debug && !defined('KT_DEBUG_INITIALIZED')) {
            KT_Cigar_Debug::init('', 3); // Set debug level to 3 (basic info)
            define('KT_DEBUG_INITIALIZED', true);
        }
        
        // Log CSV data being processed if debug is enabled
        if ($debug && class_exists('KT_Cigar_Debug')) {
            KT_Cigar_Debug::log("Processing CSV row: " . $title, 2);
            KT_Cigar_Debug::log("Ring: $ring_size, Length: $length, Type: $product_type", 2);
        }
        
        // Process the supplier product with our enhanced methods
        $supplier_product = self::process_supplier_product($title, $dimensions);
        
        // If description is provided, enhance the product info
        if (!empty($description)) {
            $description_keywords = self::extract_keywords($description);
            $supplier_product['keywords'] = array_merge($supplier_product['keywords'], $description_keywords);
            
            // Try to extract more info from description
            if (empty($supplier_product['vitola']) && !empty($description)) {
                $size_mappings = self::get_size_mappings();
                foreach ($size_mappings as $english => $chinese_terms) {
                    if (stripos($description, $english) !== false) {
                        $supplier_product['vitola'] = $english;
                        $supplier_product['keywords'][] = $english;
                        break;
                    }
                }
            }
            
            // Try to extract brand from description if not found in title
            if (empty($supplier_product['brand']) && !empty($description)) {
                $extracted_brand = self::extract_brand($description);
                if ($extracted_brand) {
                    $supplier_product['brand'] = $extracted_brand;
                    $supplier_product['keywords'][] = $extracted_brand;
                }
            }
        }
        
        // Add packaging info if provided
        if (!empty($packaging)) {
            $supplier_product['packaging'] = $packaging;
            $supplier_product['keywords'][] = $packaging;
            
            // Extract count from packaging if available
            if (preg_match('/(\d+)\s*(?:支|count|pc|pcs)/i', $packaging, $count_matches)) {
                $supplier_product['count'] = intval($count_matches[1]);
                $supplier_product['keywords'][] = $count_matches[1] . '-Count';
            }
        }
        
        // Find matching products
        $matches = self::find_best_matches($supplier_product, self::get_internal_products(), 5, $debug);
        
        // Format results
        $results = array();
        foreach ($matches as $match) {
            if ($match['score'] >= 50) { // Only include matches with a score of 50 or higher
                $results[] = array(
                    'sku' => $match['product']['product_code'],
                    'title' => $match['product']['title'],
                    'score' => $match['score'],
                    'match_type' => $match['match_type'],
                    'matched_terms' => $match['matched_terms']
                );
            }
        }
        
        return $results;
    }
    
    /**
     * Get all internal products from database 
     * 
     * @return array Array of processed internal products
     */
    private static function get_internal_products() {
        global $wpdb;
        
        // Get all products from master table
        $products = $wpdb->get_results("
            SELECT sku, product_title, brand, product_category, product_type, 
                   seat_row, seat_number, pipe_tobacco_id, description,
                   meta_description, attributes
            FROM {$wpdb->prefix}master_products
            ORDER BY sku ASC
        ");
        
        // Process each internal product
        $internal_products = array();
        foreach ($products as $product) {
            $dimensions = '';
            if (!empty($product->seat_row)) {
                $dimensions .= $product->seat_row;
                if (!empty($product->seat_number)) {
                    $dimensions .= '/' . $product->seat_number;
                }
            } elseif (!empty($product->seat_number)) {
                $dimensions = $product->seat_number;
            }
            
            $product_type = isset($product->product_type) ? $product->product_type : 'cigar';
            
            // Process the internal product
            $processed_product = self::process_internal_product(
                $product->sku,
                $product->product_title,
                $dimensions,
                $product_type
            );
            
            // Add description keywords if available
            if (!empty($product->description)) {
                $description_keywords = self::extract_keywords($product->description);
                $processed_product['keywords'] = array_merge($processed_product['keywords'], $description_keywords);
            }
            
            // Extract attributes as JSON if available
            if (!empty($product->attributes)) {
                $attributes = json_decode($product->attributes, true);
                if (is_array($attributes)) {
                    foreach ($attributes as $attr_name => $attr_value) {
                        if (!empty($attr_value)) {
                            $processed_product['keywords'][] = $attr_value;
                        }
                    }
                }
            }
            
            // Add to internal products
            $internal_products[] = $processed_product;
        }
        
        return $internal_products;
    }
    
    /**
     * Enhanced year extraction from product titles
     * Uses both explicit year patterns and zodiac year detection
     * 
     * @param string $title Product title
     * @return string|null Extracted year or null
     */
    public static function extract_year($title) {
        // Look for standard year formats with explicit markers
        if (preg_match('#\b(19|20)(\d{2})(?:年|限量版?|LE|Limited Edition)?(?:\s|$)#iu', $title, $matches)) {
            return $matches[1] . $matches[2]; // Return full year (e.g., "2022")
        }
        
        // Look for standalone years without context
        if (preg_match('#\b(19|20)(\d{2})\b#u', $title, $matches)) {
            return $matches[1] . $matches[2];
        }
        
        // Check for LE format years
        if (preg_match('#\b(\d{4})LE\b#i', $title, $matches)) {
            return $matches[1];
        }
        
        // Check for two-digit year format with LE
        if (preg_match('#\b(\d{2})LE\b#i', $title, $matches)) {
            $year = intval($matches[1]);
            return ($year < 50) ? '20' . sprintf('%02d', $year) : '19' . sprintf('%02d', $year);
        }
        
        // Check for short years (e.g., "'21" or "21")
        if (preg_match("#'?(\d{2})(?:\s|$)#", $title, $matches)) {
            $year = intval($matches[1]);
            // Only consider it a year if it's a reasonable number (1950-2049)
            if ($year >= 0 && $year <= 49) {
                return '20' . sprintf('%02d', $year);
            } elseif ($year >= 50 && $year <= 99) {
                return '19' . sprintf('%02d', $year);
            }
        }
        
        // Check for production numbers (e.g., 全球限量3000盒)
        if (preg_match('#全球限量(\d+)盒#u', $title, $matches)) {
            return 'Limited Production: ' . $matches[1];
        }
        
        // Look for zodiac years
        $zodiac_years = self::get_zodiac_year_mapping();
        
        foreach ($zodiac_years as $zodiac => $years) {
            if (mb_stripos($title, $zodiac) !== false) {
                // If we find a specific year with the zodiac, use that
                foreach ($years as $year) {
                    if (mb_stripos($title, $year) !== false) {
                        return $year;
                    }
                }
                
                // If no specific year is mentioned, use the most recent or upcoming zodiac year
                $current_year = date('Y');
                $closest_year = null;
                $min_diff = PHP_INT_MAX;
                
                foreach ($years as $year) {
                    $diff = abs(intval($year) - intval($current_year));
                    if ($diff < $min_diff) {
                        $min_diff = $diff;
                        $closest_year = $year;
                    }
                }
                
                return $closest_year;
            }
        }
        
        // Look for vintage or aged indicators
        if (preg_match('#(?:vintage|年份)\s*(\d{4})#i', $title, $matches)) {
            return $matches[1];
        }
        
        // Look for "Anniversary" with numbers
        if (preg_match('#(\d{1,3})(?:th|周年|週年)#i', $title, $matches)) {
            return $matches[1] . 'th Anniversary';
        }
        
        // Check for anniversary phrases without specific numbers
        if (stripos($title, 'anniversary') !== false || mb_stripos($title, '周年') !== false) {
            return 'Anniversary';
        }
        
        return null;
    }
    
    /**
     * Extract special edition type from product title
     * Detects zodiac editions, limited editions, anniversaries, etc.
     * 
     * @param string $title Product title
     * @return array Special edition types found
     */
    public static function extract_edition_type($title) {
        $editions = array();
        
        // Check for zodiac editions
        $zodiac_mapping = self::get_zodiac_year_mapping();
        foreach ($zodiac_mapping as $zodiac => $years) {
            if (mb_stripos($title, $zodiac) !== false) {
                $editions['zodiac'] = $zodiac;
                break;
            }
        }
        
        // Check for millennium editions
        if (mb_stripos($title, '千禧') !== false || stripos($title, 'millennium') !== false) {
            $editions['millennium'] = 'Millennium';
        }
        
        // Check for anniversary editions
        if (preg_match('#(\d+)(?:周年|週年|th\s*Anniversary)#iu', $title, $matches)) {
            $editions['anniversary'] = $matches[1] . 'th Anniversary';
        }
        
        // Check for general anniversary mentions
        if (mb_stripos($title, '周年') !== false || 
            mb_stripos($title, 'Anniversary') !== false || 
            mb_stripos($title, 'Aniversario') !== false) {
            
            if (!isset($editions['anniversary'])) {
                $editions['anniversary'] = 'Anniversary';
            }
        }
        
        // Check for limited editions
        if (mb_stripos($title, '限量') !== false || 
            mb_stripos($title, 'Limited') !== false || 
            mb_stripos($title, 'LE') !== false) {
            $editions['limited'] = 'Limited Edition';
        }
        
        // Check for regional editions
        $regions = array(
            '古巴地限' => 'Ex. Cuba',
            '西班牙地限' => 'Ex. Spain',
            '葡萄牙地限' => 'Ex. Portugal',
            '意大利地限' => 'Ex. Italy',
            '港澳地限' => 'Ex. Hong Kong & Macau',
            '港澳地区限定' => 'Ex. Hong Kong & Macau',
            '亚太地区' => 'Asia Pacific',
            '亚太地限' => 'Asia Pacific',
            '北亚地限' => 'Northern Asia',
            '南亚地限' => 'Southern Asia',
            '东亚地限' => 'Eastern Asia',
            '西亚地限' => 'Western Asia',
            '欧洲地限' => 'Europe',
            '北美地限' => 'North America',
            '美国地限' => 'United States',
            '加拿大地限' => 'Canada',
            '墨西哥地限' => 'Mexico',
            '德国地限' => 'Germany',
            '法国地限' => 'France',
            '英国地限' => 'United Kingdom',
            '瑞士地限' => 'Switzerland',
            '俄罗斯地限' => 'Russia',
            '日本地限' => 'Japan',
            '韩国地限' => 'Korea',
            '澳大利亚地限' => 'Australia',
            '新西兰地限' => 'New Zealand'
        );
        
        foreach ($regions as $region_zh => $region_en) {
            if (mb_stripos($title, $region_zh) !== false) {
                $editions['regional'] = $region_en;
                break;
            }
        }
        
        // Check for special editions
        if (mb_stripos($title, '特别') !== false || 
            mb_stripos($title, '特选') !== false || 
            mb_stripos($title, 'special') !== false || 
            mb_stripos($title, 'especial') !== false) {
            $editions['special'] = 'Special Edition';
        }
        
        // Check for reserva
        if (mb_stripos($title, '珍藏') !== false || 
            mb_stripos($title, 'reserva') !== false) {
            $editions['reserva'] = 'Reserva';
        }
        
        // Check for gran reserva
        if (mb_stripos($title, '特级珍藏') !== false || 
            mb_stripos($title, 'gran reserva') !== false) {
            $editions['gran_reserva'] = 'Gran Reserva';
        }
        
        // Check for vintage
        if (mb_stripos($title, '年份') !== false || 
            mb_stripos($title, 'vintage') !== false) {
            $editions['vintage'] = 'Vintage';
        }
        
        // Check for aged
        if (mb_stripos($title, '陈年') !== false || 
            mb_stripos($title, '老年份') !== false || 
            mb_stripos($title, 'aged') !== false || 
            mb_stripos($title, 'anejados') !== false) {
            $editions['aged'] = 'Aged';
        }
        
        // Check for numbered editions
        if (mb_stripos($title, '独立编号') !== false || 
            mb_stripos($title, '编号') !== false || 
            mb_stripos($title, 'numbered') !== false) {
            $editions['numbered'] = 'Numbered';
        }
        
        // Check for limited production
        if (preg_match('#全球限量(\d+)盒#u', $title, $matches)) {
            $editions['limited_production'] = 'Limited Production: ' . $matches[1];
        }
        
        return $editions;
    }
    
    /**
     * Enhanced pattern matching for dimension recognition in various formats
     * Improved to handle more dimension formats and inconsistencies
     */
    public static function parse_dimensions($dimension_str) {
        $result = array(
            'ring_gauge' => null,
            'length' => null,
            'format' => null
        );
        
        // Handle N/A or empty dimensions
        if (empty($dimension_str) || $dimension_str == 'N/A' || $dimension_str == 'N/A/N/A') {
            return $result;
        }
        
        // Normalize dimension string - replace various separators with standard format
        $dimension_str = preg_replace('#\s+#u', '', $dimension_str); // Remove all whitespace
        $dimension_str = preg_replace('#[*×x\\\]#u', '/', $dimension_str); // Standardize separator
        $dimension_str = preg_replace('#(mm|MM|厘米|cm)#u', '', $dimension_str); // Remove measurement units
        
        // Extract numeric values from the string
        preg_match_all('/\d+\.?\d*/', $dimension_str, $numbers);
        
        if (!empty($numbers[0]) && count($numbers[0]) >= 2) {
            $num1 = floatval($numbers[0][0]);
            $num2 = floatval($numbers[0][1]);
            
            // Determine which is ring gauge and which is length using industry standards
            // Ring gauge is typically 20-70, length is typically 80-210mm
            if ($num1 >= 20 && $num1 <= 70 && $num2 >= 80 && $num2 <= 210) {
                $result['ring_gauge'] = $num1;
                $result['length'] = $num2;
                $result['format'] = "$num1/$num2";
            } 
            else if ($num2 >= 20 && $num2 <= 70 && $num1 >= 80 && $num1 <= 210) {
                $result['ring_gauge'] = $num2;
                $result['length'] = $num1;
                $result['format'] = "$num2/$num1";
            }
            // Handle non-standard ranges but maintain logical assignment
            else if ($num1 < $num2) {
                // Smaller number is more likely ring gauge, larger is length
                $result['ring_gauge'] = $num1;
                $result['length'] = $num2;
                $result['format'] = "$num1/$num2";
            } 
            else {
                $result['ring_gauge'] = $num2;
                $result['length'] = $num1;
                $result['format'] = "$num2/$num1";
            }
        }
        // Special case for single number - might be just ring gauge
        else if (!empty($numbers[0]) && count($numbers[0]) == 1) {
            $num = floatval($numbers[0][0]);
            if ($num >= 20 && $num <= 70) {
                $result['ring_gauge'] = $num;
            }
            else if ($num >= 80 && $num <= 210) {
                $result['length'] = $num;
            }
        }
        
        return $result;
    }
    
    /**
     * Enhanced comparison of dimensions
     * Provides a more accurate score for dimension matching
     * 
     * @param array $supplier_dimensions Supplier dimensions
     * @param array $internal_dimensions Internal dimensions
     * @return float Dimension match score (0-1)
     */
    public static function compare_dimensions($supplier_dimensions, $internal_dimensions) {
        if (!$supplier_dimensions['ring_gauge'] || !$internal_dimensions['ring_gauge'] || 
            !$supplier_dimensions['length'] || !$internal_dimensions['length']) {
            return 0.5; // Can't compare incomplete dimensions, provide neutral score
        }
        
        // More precise ring gauge comparison - ring gauge is critical
        $ring_tolerance = 2; // Tolerance for ring gauge difference
        $length_tolerance = 5; // Tolerance for length difference
        
        $ring_diff = abs($supplier_dimensions['ring_gauge'] - $internal_dimensions['ring_gauge']);
        $length_diff = abs($supplier_dimensions['length'] - $internal_dimensions['length']);
        
        // Ring gauge is more important than length for identification
        $ring_weight = 0.7;
        $length_weight = 0.3;
        
        $ring_match = max(0, 1 - ($ring_diff / $ring_tolerance));
        $length_match = max(0, 1 - ($length_diff / $length_tolerance));
        
        // Apply sigmoid scaling for smoother transition between scores
        $ring_match = 1 / (1 + exp(-10 * ($ring_match - 0.5)));
        $length_match = 1 / (1 + exp(-10 * ($length_match - 0.5)));
        
        $dimension_score = ($ring_match * $ring_weight) + ($length_match * $length_weight);
        
        // Hard fails - if ring gauge differs significantly, it's likely a different vitola
        if ($ring_diff > 3) {
            $dimension_score *= 0.5; // Severe penalty
        }
        
        // Hard pass - if both are nearly identical, boost the score
        if ($ring_diff <= 1 && $length_diff <= 3) {
            $dimension_score = min(1.0, $dimension_score * 1.2); // Bonus
        }
        
        return $dimension_score;
    }
    
    /**
     * Process supplier product title with enhanced keyword extraction
     *
     * @param string $title The supplier product title
     * @param string $dimensions The product dimensions (if available)
     * @return array Processed product information
     */
    public static function process_supplier_product($title, $dimensions = null) {
        // Detect product type
        $product_type = self::detect_product_type($title);
        
        // First standardize the product format
        $product_info = self::standardize_product_format($title, $dimensions);
        
        // Add product type to info
        $product_info['product_type'] = $product_type;
        
        // Extract count from title if not already found
        if (!$product_info['count'] && preg_match('/(\d+)(?:支|×|x|pcs|个)/ui', $title, $count_matches)) {
            $product_info['count'] = intval($count_matches[1]);
            $product_info['keywords'][] = $count_matches[1] . '支';
            $product_info['keywords'][] = 'Count';
            $product_info['keywords'][] = $count_matches[1] . '-Count';
        }
		// ENHANCEMENT: Extract English words from title and prioritize them in keywords
$english_words = array();
preg_match_all('/[a-zA-Z][a-zA-Z0-9\s\'\-]*[a-zA-Z0-9]/u', $title, $matches);
if (!empty($matches[0])) {
    foreach ($matches[0] as $match) {
        $match = trim($match);
        if (strlen($match) >= 3 && !in_array(strtolower($match), self::$common_filter_words)) {
            $english_words[] = $match;
            $product_info['keywords'][] = $match; // Add to keywords immediately
            
            // Also split multi-word English terms and add as individual keywords
            if (strpos($match, ' ') !== false) {
                $parts = explode(' ', $match);
                foreach ($parts as $part) {
                    if (strlen($part) >= 3 && !in_array(strtolower($part), self::$common_filter_words)) {
                        $product_info['keywords'][] = $part;
                    }
                }
            }
        }
    }
    
    // Log extracted English words
    if (class_exists('KT_Cigar_Debug')) {
        KT_Cigar_Debug::log("Extracted English words: " . implode(', ', $english_words), 3);
    }
}

// ENHANCEMENT: Improve model extraction using series mappings
if ($product_info['brand'] && empty($product_info['model'])) {
    // Try to find model from series mappings
    $series_mappings = self::get_series_mappings();
    if (isset($series_mappings[$product_info['brand']])) {
        $brand_series = $series_mappings[$product_info['brand']];
        
        // First check English terms in title - give these priority
        foreach ($english_words as $english_term) {
            foreach ($brand_series as $chinese => $english) {
                // Check for exact match or if the English term is part of a series name
                if (strcasecmp($english_term, $english) === 0 || 
                    stripos($english, $english_term) !== false) {
                    $product_info['model'] = $english;
                    $product_info['keywords'][] = $english;
                    break 2; // Exit both loops once found
                }
            }
        }
        
        // If still no model, check for Chinese series names in title
        if (empty($product_info['model'])) {
            foreach ($brand_series as $chinese => $english) {
                if (mb_stripos($title, $chinese) !== false) {
                    $product_info['model'] = $english;
                    $product_info['keywords'][] = $chinese;
                    $product_info['keywords'][] = $english;
                    break;
                }
            }
        }
    }
}
		
        
        // Generate additional keywords from combined parts
        $all_parts = array(
            $product_info['brand'],
            $product_info['model'],
            $product_info['vitola'],
            $product_info['special_edition'],
            ($dimensions ?? '')
        );
        
        $combined_text = implode(' ', array_filter($all_parts));
        $additional_keywords = self::extract_keywords($combined_text);
        
        $product_info['keywords'] = array_merge(
            $product_info['keywords'],
            $additional_keywords
        );
        
        // Extract keywords from the ORIGINAL title too
        $title_keywords = self::extract_keywords($title);
        $product_info['keywords'] = array_merge(
            $product_info['keywords'],
            $title_keywords
        );
        
        // Add product type as a keyword
        $product_info['keywords'][] = $product_type;
        
        // Add each individual significant Chinese character from title as keyword
        preg_match_all('/[\x{4e00}-\x{9fa5}]/u', $title, $chinese_chars);
        if (!empty($chinese_chars[0])) {
            $significant_chars = array('皇', '冠', '雷', '矛', '长', '短', '小', '大', '年', '限', '量', '支', '盒', 
                                     '珍', '藏', '版', '周', '纪', '念', '丘', '吉', '尔', '兰', '罗', '龙', '虎', 
                                     '兔', '蛇', '特', '级', '精', '选', '世', '纪', '铝', '管', '朱', '丽', '叶');
            foreach ($chinese_chars[0] as $char) {
                if (in_array($char, $significant_chars)) {
                    $product_info['keywords'][] = $char;
                }
            }
        }
        
        // Split the title into potential n-grams for better matching
        $words = preg_split('/\s+/', $title);
        if (count($words) > 1) {
            for ($i = 0; $i < count($words) - 1; $i++) {
                $bigram = $words[$i] . ' ' . $words[$i + 1];
                if (mb_strlen($bigram) > 4) { // Only include meaningful bigrams
                    $product_info['keywords'][] = $bigram;
                }
            }
        }
        
        // Add the entire title as a keyword (for exact title matches)
        $product_info['keywords'][] = $title;
        
        // Log the keywords extracted from supplier product
        if (class_exists('KT_Cigar_Debug')) {
            KT_Cigar_Debug::log("Supplier keywords for: " . (substr($title, 0, 30) . "..."), 3);
            KT_Cigar_Debug::log("Product type: " . $product_type . ", Brand: " . ($product_info['brand'] ?? 'none'), 3);
        }
        
        return $product_info;
    }
    
    /**
     * Process internal product title with enhanced keyword extraction
     *
     * @param string $product_code The internal product code
     * @param string $title The internal product title
     * @param string $dimensions The product dimensions (if available)
     * @param string $product_type The product type (default: cigar)
     * @return array Processed product information
     */
    public static function process_internal_product($product_code, $title, $dimensions = null, $product_type = 'cigar') {
        // First standardize the product format
        $product_info = self::standardize_product_format($title, $dimensions);
        
        // Add product code and type
        $product_info['product_code'] = $product_code;
        $product_info['product_type'] = $product_type;
        
        // Extract count information if available
        $count_match = preg_match('/\((\d+)支\/盒\)/u', $title, $count_matches);
        if ($count_match) {
            $product_info['count'] = intval($count_matches[1]);
            $product_info['keywords'][] = $count_matches[1] . '支';
            $product_info['keywords'][] = 'Count';
            $product_info['keywords'][] = $count_matches[1] . '-Count';
        }
        
        // Also look for count in format like "(20支/盒)"
        if (!$product_info['count'] && preg_match('/(\d+)(?:支|×|x)/iu', $title, $count_matches)) {
            $product_info['count'] = intval($count_matches[1]);
            $product_info['keywords'][] = $count_matches[1] . '支';
            $product_info['keywords'][] = 'Count';
            $product_info['keywords'][] = $count_matches[1] . '-Count';
        }
        
        // Generate additional keywords from combined parts
        $all_parts = array(
            $product_info['brand'],
            $product_info['model'],
            $product_info['vitola'],
            $product_info['special_edition'],
            ($dimensions ?? '')
        );
        
        $combined_text = implode(' ', array_filter($all_parts));
        $additional_keywords = self::extract_keywords($combined_text);
        
        $product_info['keywords'] = array_merge(
            $product_info['keywords'],
            $additional_keywords
        );
        
        // Extract keywords from the ORIGINAL title too (not just processed parts)
        // This is critical for matching!
        $title_keywords = self::extract_keywords($title);
        $product_info['keywords'] = array_merge(
            $product_info['keywords'],
            $title_keywords
        );
        
        // Add product type keyword
        $product_info['keywords'][] = $product_type;
        
        // Add each individual significant Chinese character from title as keyword
        preg_match_all('/[\x{4e00}-\x{9fa5}]/u', $title, $chinese_chars);
        if (!empty($chinese_chars[0])) {
            $significant_chars = array('皇', '冠', '雷', '矛', '长', '短', '小', '大', '年', '限', '量', '支', '盒', 
                                     '珍', '藏', '版', '周', '纪', '念', '丘', '吉', '尔', '兰', '罗', '龙', '虎', 
                                     '兔', '蛇', '特', '级', '精', '选', '世', '纪', '铝', '管', '朱', '丽', '叶');
            foreach ($chinese_chars[0] as $char) {
                if (in_array($char, $significant_chars)) {
                    $product_info['keywords'][] = $char;
                }
            }
        }
        
        // Split the title into potential n-grams for better matching
        $words = preg_split('/\s+/', $title);
        if (count($words) > 1) {
            for ($i = 0; $i < count($words) - 1; $i++) {
                $bigram = $words[$i] . ' ' . $words[$i + 1];
                if (mb_strlen($bigram) > 4) { // Only include meaningful bigrams
                    $product_info['keywords'][] = $bigram;
                }
            }
        }
        
        // Add the entire title as a keyword (for exact title matches)
        $product_info['keywords'][] = $title;
        
        // Log the keywords extracted from internal product
        if (class_exists('KT_Cigar_Debug')) {
            KT_Cigar_Debug::log("Internal keywords for: " . (substr($title, 0, 30) . "..."), 3);
        }
        
        return $product_info;
    }
    
    /**
     * Enhanced keyword extraction with better pattern matching
     *
     * @param string $text The input text
     * @return array Array of keywords
     */
    public static function extract_keywords($text) {
        $keywords = array();
        
        // Clean up the text - remove extra spaces and normalize 
        $text = preg_replace('/\s+/', ' ', trim($text));
        
        // Extract individual numbers as keywords (critical for matching)
        if (preg_match_all('/\b(\d+)\b/u', $text, $number_matches)) {
            foreach ($number_matches[1] as $number) {
                if (strlen($number) >= 2) { // Only include meaningful numbers (2+ digits)
                    $keywords[] = $number;
                }
            }
        }
        
        // Extract dimension formats (e.g., 52/145mm, 52×145, 52*145)
        if (preg_match_all('#(\d+)[*×x/\\\](\d+)(?:mm)?#u', $text, $dim_matches, PREG_SET_ORDER)) {
            foreach ($dim_matches as $match) {
                $num1 = intval($match[1]);
                $num2 = intval($match[2]);
                
               // Try to determine which is ring gauge and which is length
                if ($num1 < $num2 && $num1 >= 20 && $num1 <= 60 && $num2 >= 80 && $num2 <= 210) {
                    // Normal format: RG/Length
                    $keywords[] = "{$num1}/{$num2}";
                    $keywords[] = "Ring: {$num1}";
                    $keywords[] = "Length: {$num2}";
                } else if ($num2 < $num1 && $num2 >= 20 && $num2 <= 60 && $num1 >= 80 && $num1 <= 210) {
                    // Reversed format: Length/RG
                    $keywords[] = "{$num2}/{$num1}";
                    $keywords[] = "Ring: {$num2}";
                    $keywords[] = "Length: {$num1}";
                }
            }
        }
        
        // Extract from bracket formats like 【155×54】or (155*54)
        if (preg_match_all('#[【\[\(](\d+)\s*[*×x/\\\\]\s*(\d+)[】\]\)]#u', $text, $bracket_matches, PREG_SET_ORDER)) {
            foreach ($bracket_matches as $match) {
                $num1 = intval($match[1]);
                $num2 = intval($match[2]);
                
                // Similar logic as above for determining ring/length
                if ($num1 < $num2 && $num1 >= 20 && $num1 <= 60 && $num2 >= 80 && $num2 <= 210) {
                    $keywords[] = "{$num1}/{$num2}";
                    $keywords[] = "Ring: {$num1}";
                    $keywords[] = "Length: {$num2}";
                } else if ($num2 < $num1 && $num2 >= 20 && $num2 <= 60 && $num1 >= 80 && $num1 <= 210) {
                    $keywords[] = "{$num2}/{$num1}";
                    $keywords[] = "Ring: {$num2}";
                    $keywords[] = "Length: {$num1}";
                }
            }
        }
        
        // Extract years with more comprehensive patterns
        // Standard year format (e.g., 2022, 2023)
        if (preg_match_all('#\b(19|20)(\d{2})(?:年|LE|限量版?)?#u', $text, $year_matches, PREG_SET_ORDER)) {
            foreach ($year_matches as $match) {
                $year = $match[1] . $match[2];
                $keywords[] = $year;
                $keywords[] = "Year: {$year}";
                
                // Add LE marker if present
                if (strpos($match[0], 'LE') !== false || strpos($match[0], '年') !== false || 
                    strpos($match[0], '限量') !== false) {
                    $keywords[] = "{$year} Limited Edition";
                    $keywords[] = "{$year}LE";
                    $keywords[] = "Limited Edition";
                }
            }
        }
        
        // Short year format with LE (e.g., 22LE, 23限量)
        if (preg_match_all('#\b(\d{2})(?:LE|限量版?)#ui', $text, $short_year_matches)) {
            foreach ($short_year_matches[1] as $short_year) {
                $year = intval($short_year);
                // Determine century (20xx or 19xx)
                $full_year = ($year < 50) ? "20{$short_year}" : "19{$short_year}";
                $keywords[] = $full_year;
                $keywords[] = "Year: {$full_year}";
                $keywords[] = "{$full_year} Limited Edition";
                $keywords[] = "{$full_year}LE";
                $keywords[] = "Limited Edition";
            }
        }
        
        // Extract vitola terms more comprehensively
        $size_mappings = self::get_size_mappings();
        foreach ($size_mappings as $english => $chinese_terms) {
            // Check English term first with word boundaries
            if (preg_match('/\b' . preg_quote($english, '/') . '\b/ui', $text)) {
                $keywords[] = $english;
                continue; // Skip checking Chinese if English found
            }
            
            // Check Chinese terms
            foreach ($chinese_terms as $chinese) {
                if (mb_stripos($text, $chinese) !== false) {
                    $keywords[] = $english; // Add the English term as keyword
                    $keywords[] = $chinese; // Also add the Chinese term
                    break;
                }
            }
        }
        
        // Extract brand with enhanced recognition
        $brand = self::extract_brand($text);
        if ($brand) {
            $keywords[] = $brand;
        }
        
        // Extract special edition types
        $special_mappings = self::get_special_mappings();
        
        // Check special edition terms
        foreach ($special_mappings['special_editions'] as $chinese => $english) {
            if (mb_stripos($text, $chinese) !== false) {
                $keywords[] = $english;
                $keywords[] = $chinese;
            }
        }
        
     // Check model patterns with more accurate regex
foreach ($special_mappings['model_patterns'] as $pattern => $replacement) {
    try {
        // Use proper error suppression with @ operator for preg_match 
        // since try-catch won't catch preg_match warnings
        if (@preg_match('#' . $pattern . '#u', $text, $model_matches)) {
            // Handle capture groups in replacement
            $model_name = $replacement;
            if (strpos($replacement, '$') !== false && !empty($model_matches[1])) {
                // Also use error suppression here
                $model_name = @preg_replace('#' . $pattern . '#u', $replacement, $model_matches[0]);
            }
            $keywords[] = $model_name;
        }
    } catch (Exception $e) {
        // Continue to next pattern if any error occurs
        continue;
    }
}

// Check year and zodiac patterns more comprehensively
foreach ($special_mappings['year_patterns'] as $pattern => $replacement) {
    try {
        // Use proper error suppression with @ operator
        if (@preg_match('#' . $pattern . '#u', $text, $year_matches)) {
            // Handle capture groups
            $year_term = $replacement;
            if (strpos($replacement, '$') !== false && count($year_matches) > 1) {
                // Also use error suppression here
                $year_term = @preg_replace('#' . $pattern . '#u', $replacement, $year_matches[0]);
            }
            $keywords[] = $year_term;
        }
    } catch (Exception $e) {
        // Continue to next pattern if any error occurs
        continue;
    }
}
        
        // Check packaging terms
        foreach ($special_mappings['packaging'] as $chinese => $english) {
            if (mb_stripos($text, $chinese) !== false) {
                $keywords[] = $english;
                $keywords[] = $chinese;
            }
        }
        
        // Check for counts with more variants
        if (preg_match_all('/\b(\d+)(?:支|×|x|pcs|个)\b/ui', $text, $count_matches)) {
            foreach ($count_matches[1] as $count) {
                $keywords[] = $count . '支';
                $keywords[] = $count . '-Count';
                $keywords[] = 'Count';
            }
        }
        
        // Check for zodiac years with enhanced detection
        $zodiac_mapping = self::get_zodiac_year_mapping();
        foreach ($zodiac_mapping as $zodiac => $years) {
            if (mb_stripos($text, $zodiac) !== false) {
                $keywords[] = $zodiac;
                
                // Extract zodiac animal name
                $zodiac_animal = str_replace('年', '', $zodiac);
                
                // Map Chinese zodiac to English
                $zodiac_translations = array(
                    '鼠' => 'Rat',
                    '牛' => 'Ox',
                    '虎' => 'Tiger',
                    '兔' => 'Rabbit',
                    '龙' => 'Dragon',
                    '蛇' => 'Snake',
                    '马' => 'Horse',
                    '羊' => 'Sheep',
                    '猴' => 'Monkey',
                    '鸡' => 'Rooster',
                    '狗' => 'Dog',
                    '猪' => 'Pig'
                );
                
                if (isset($zodiac_translations[$zodiac_animal])) {
                    $keywords[] = 'Year of the ' . $zodiac_translations[$zodiac_animal];
                    $keywords[] = $zodiac_translations[$zodiac_animal];
                    $keywords[] = 'Year of the ' . $zodiac_translations[$zodiac_animal];
                }
                
                // Try to extract year if present
                foreach ($years as $year) {
                    if (mb_stripos($text, $year) !== false) {
                        $keywords[] = $year;
                        $keywords[] = "Year: {$year}";
                        break;
                    }
                }
            }
        }
        
        // Look for specific branded series nomenclature
        // Cohiba-specific keywords
        if (mb_stripos($text, '高希霸') !== false || mb_stripos($text, 'Cohiba') !== false) {
            if (mb_stripos($text, '世纪') !== false || mb_stripos($text, 'Siglo') !== false) {
                $keywords[] = 'Siglo';
                $keywords[] = 'Linea 1492';
            }
            
            if (mb_stripos($text, '贝希克') !== false || mb_stripos($text, 'Behike') !== false) {
                $keywords[] = 'Behike';
                if (mb_stripos($text, '52') !== false) $keywords[] = 'Behike 52';
                if (mb_stripos($text, '54') !== false) $keywords[] = 'Behike 54';
                if (mb_stripos($text, '56') !== false) $keywords[] = 'Behike 56';
            }
            
            if (mb_stripos($text, '玛杜罗') !== false || mb_stripos($text, 'Maduro') !== false) {
                $keywords[] = 'Maduro';
                $keywords[] = 'Maduro 5';
            }
        }
        
        // Montecristo-specific keywords
        if (mb_stripos($text, '蒙特') !== false || mb_stripos($text, 'Montecristo') !== false) {
            if (preg_match('/No\.\s*(\d+)|#(\d+)|(\d+)号/i', $text, $matches)) {
                $num = $matches[1] ?? $matches[2] ?? $matches[3];
                $keywords[] = "Montecristo No.{$num}";
                $keywords[] = "No.{$num}";
            }
            
            if (mb_stripos($text, '爱德蒙多') !== false || mb_stripos($text, '艾德蒙多') !== false || 
                mb_stripos($text, 'Edmundo') !== false) {
                $keywords[] = 'Edmundo';
                if (mb_stripos($text, '小') !== false || mb_stripos($text, 'Petit') !== false) {
                    $keywords[] = 'Petit Edmundo';
                }
            }
        }
        
        // H. Upmann-specific keywords
        if (mb_stripos($text, '优普曼') !== false || mb_stripos($text, '乌普曼') !== false || 
            mb_stripos($text, 'Upmann') !== false) {
            if (mb_stripos($text, '大皇冠') !== false || mb_stripos($text, 'Magnum') !== false) {
                $keywords[] = 'Magnum';
                if (mb_stripos($text, '46') !== false) $keywords[] = 'Magnum 46';
                if (mb_stripos($text, '50') !== false) $keywords[] = 'Magnum 50';
                if (mb_stripos($text, '54') !== false) $keywords[] = 'Magnum 54';
                if (mb_stripos($text, '56') !== false) $keywords[] = 'Magnum 56';
            }
        }
        
        // Partagas-specific keywords
        if (mb_stripos($text, '帕塔加斯') !== false || mb_stripos($text, 'Partagas') !== false) {
            if (mb_stripos($text, 'Serie D') !== false || mb_stripos($text, 'D系列') !== false || 
                mb_stripos($text, 'D4') !== false || mb_stripos($text, 'D四') !== false) {
                $keywords[] = 'Serie D';
                $keywords[] = 'Serie D No.4';
            }
        }
        
        // Add individual words as keywords (filtered)
        $words = preg_split('/\s+/u', $text);
        foreach ($words as $word) {
            $word = trim($word);
            
            // Skip short words and common filter words
            if (mb_strlen($word) < 3 || in_array(mb_strtolower($word), self::$common_filter_words)) {
                continue;
            }
            
            $keywords[] = $word;
        }
        
        // Remove duplicates and empty values
        $unique_keywords = array();
        foreach ($keywords as $keyword) {
            $keyword = trim($keyword);
            if (!empty($keyword)) {
                $unique_keywords[mb_strtolower($keyword)] = $keyword;
            }
        }
        
        return array_values($unique_keywords);
    }
    
    /**
     * Extract brand from product title with enhanced recognition
     * Uses comprehensive brand mapping for accurate brand identification
     * 
     * @param string $title Product title
     * @return string|null Extracted brand or null
     */
    public static function extract_brand($title) {
        $brand_mappings = self::get_brand_mappings();
        
        // First normalize the title - lowercase and trim
        $normalized_title = mb_strtolower(trim($title));
        
        // Sort brands by name length (longest first) to avoid partial matches
        $brands_by_length = array();
        foreach ($brand_mappings as $chinese => $english) {
            $length = mb_strlen($chinese);
            if (!isset($brands_by_length[$length])) {
                $brands_by_length[$length] = array();
            }
            $brands_by_length[$length][] = array('zh' => $chinese, 'en' => $english);
        }
        
        // Sort by length (descending)
        krsort($brands_by_length);
        
        // Flatten the array
        $sorted_brands = array();
        foreach ($brands_by_length as $length_group) {
            foreach ($length_group as $brand_info) {
                $sorted_brands[] = $brand_info;
            }
        }
        
        // Try to match brands
        foreach ($sorted_brands as $brand_info) {
            $chinese = $brand_info['zh'];
            $english = $brand_info['en'];
            
            // Try to match Chinese name (case-insensitive)
            if (mb_stripos($title, $chinese) !== false) {
                return $english;
            }
            
            // Direct match on English name with word boundary
            if (preg_match('/\b' . preg_quote($english, '/') . '\b/ui', $title)) {
                return $english;
            }
            
            // Handle special cases like H. Upmann
            if (($english === 'H. Upmann' && 
                 (mb_stripos($title, 'upmann') !== false || 
                  mb_stripos($title, '优普曼') !== false || 
                  mb_stripos($title, '乌普曼') !== false)) ||
                ($english === 'Cohiba' && 
                 (mb_stripos($title, 'cohiba') !== false || 
                  mb_stripos($title, '高希霸') !== false ||
                  mb_stripos($title, '科伊巴') !== false)) ||
                ($english === 'Montecristo' && 
                 (mb_stripos($title, 'montecristo') !== false || 
                  mb_stripos($title, '蒙特') !== false ||
                  mb_stripos($title, '蒙特克里斯托') !== false)) ||
                ($english === 'Romeo y Julieta' && 
                 (mb_stripos($title, 'romeo') !== false || 
                  mb_stripos($title, '罗密欧') !== false ||
                  mb_stripos($title, '朱丽叶') !== false)) ||
                ($english === 'Partagas' && 
                 (mb_stripos($title, 'partagas') !== false || 
                  mb_stripos($title, '帕塔加斯') !== false ||
                  mb_stripos($title, '帕达嘉') !== false))) {
                return $english;
            }
        }
        
        // Second pass with more aggressive pattern matching for possible matches
        foreach ($brand_mappings as $chinese => $english) {
            // For specific brands, check parts of the brand name
            $brand_patterns = array(
                'Davidoff' => array('davidoff', 'david', '大卫', '戴维'),
                'Cohiba' => array('cohiba', '高希', '科伊'),
                'Romeo y Julieta' => array('romeo', 'julieta', '罗密欧', '朱丽叶'),
                'Montecristo' => array('montecristo', 'monte', '蒙特'),
                'H. Upmann' => array('upmann', '优普曼', '乌普曼'),
                'Trinidad' => array('trinidad', '特立尼达', '千里达'),
                'Hoyo de Monterrey' => array('hoyo', 'monterrey', '蒙特雷', '好友'),
                'Partagas' => array('partagas', '帕塔加斯', '帕达嘉'),
                'Bolivar' => array('bolivar', '玻利瓦', '波利瓦'),
                'Punch' => array('punch', '潘趣', '蓬塔卡萨斯'),
                'San Cristobal' => array('cristobal', '圣克里斯托鲍尔'),
                'El Rey del Mundo' => array('rey', 'mundo', '雪茄老人'),
                'Juan Lopez' => array('juan', 'lopez', '胡安洛佩兹'),
                'La Gloria Cubana' => array('gloria', '拉格洛里亚'),
                'Arturo Fuente' => array('fuente', '富恩特', '阿图罗'),
                'Padron' => array('padron', '帕德龙', '帕特隆'),
                'Oliva' => array('oliva', '奥利瓦', '欧利瓦'),
                'Rocky Patel' => array('rocky', 'patel', '洛基帕特尔'),
                'Drew Estate' => array('drew', 'estate', '德鲁庄园'),
                'Camacho' => array('camacho', '卡马丘', '吉塔诺'),
                'Ashton' => array('ashton', '阿申蒂', '爱世顿'),
                'Perdomo' => array('perdomo', '佩尔多莫', '培多莫'),
                'Macanudo' => array('macanudo', '麦克纳多', '麦卡努多'),
                'Joya de Nicaragua' => array('joya', 'nicaragua', '轻佻', '库兹诺')
            );
            
            // If we have specific patterns for this brand
            if (isset($brand_patterns[$english])) {
                foreach ($brand_patterns[$english] as $pattern) {
                    if (mb_stripos($normalized_title, $pattern) !== false) {
                        return $english;
                    }
                }
            }
        }
        
        return null;
    }
    
    /**
     * Get brand mappings - comprehensive list of cigar brands in Chinese and English
     * 
     * @return array Brand mappings (Chinese => English)
     */
    public static function get_brand_mappings() {
        return array(
            // Cuban brands
            '大卫杜夫叶丝' => 'Davidoff Pipe Tobacco',
            '叶丝' => 'Pipe Tobacco',
            '丹麦混' => 'Danish Mixture',
            '高希霸' => 'Cohiba',
            '科伊巴' => 'Cohiba',
            '科希巴' => 'Cohiba',
            '蒙特' => 'Montecristo',
            '蒙特克里斯托' => 'Montecristo',
            '蒙特克里斯多' => 'Montecristo',
            '蒙特利克斯托' => 'Montecristo',
            '罗密欧' => 'Romeo y Julieta',
            '罗密欧朱丽叶' => 'Romeo y Julieta',
            '罗密欧·朱丽叶' => 'Romeo y Julieta',
            '朱丽叶' => 'Romeo y Julieta',
            '帕特加斯' => 'Partagas',
            '帕塔加斯' => 'Partagas',
            '帕达嘉' => 'Partagas',
            '帕达加斯' => 'Partagas',
            '乌普曼' => 'H. Upmann',
            '优名' => 'H. Upmann',
            '优曼' => 'H. Upmann',
            '优普曼' => 'H. Upmann',
            '好彼运' => 'H. Upmann',
            '哈乌普曼' => 'H. Upmann',
            '好友' => 'Hoyo de Monterrey',
            '波利瓦' => 'Bolivar',
            '玻利瓦' => 'Bolivar',
            '玻利瓦尔' => 'Bolivar',
            '玻力瓦' => 'Bolivar',
            '胡约' => 'Hoyo de Monterrey',
            '和约' => 'Hoyo de Monterrey',
            '蒙特雷' => 'Hoyo de Monterrey',
            '好友蒙特雷伊' => 'Hoyo de Monterrey',
            '特立尼达' => 'Trinidad',
            '千里达' => 'Trinidad',
            '特立尼达德' => 'Trinidad',
            '哈伯纳斯' => 'Habanos',
            '昆塔罗' => 'Quintero',
            '昆德罗' => 'Quintero',
            '拉弗洛' => 'La Flor de Cano',
            '豪圣' => 'Jose L. Piedra',
            '霍塞·L·彼德拉' => 'Jose L. Piedra',
            '维加罗布纳' => 'Vegueros',
            '唯佳' => 'VegaFina',
            '维珍' => 'VegaFina',
            '圣克里斯托鲍尔' => 'San Cristobal de la Habana',
            '圣克里斯托瓦尔' => 'San Cristobal de la Habana',
            '圣路易斯雷伊' => 'Saint Luis Rey',
            '圣路易斯·雷伊' => 'Saint Luis Rey',
            '胡安洛佩兹' => 'Juan Lopez',
            '华纳库巴纳' => 'Juan Lopez',
            '拉格洛里亚库巴纳' => 'La Gloria Cubana',
            '拉格洛里亚' => 'La Gloria Cubana',
            '雷蒙·阿利昂内斯' => 'Ramon Allones',
            '雷蒙·阿里昂' => 'Ramon Allones',
            '雷蒙' => 'Ramon Allones',
            '雷蒙·阿洛尼斯' => 'Ramon Allones',
            '蓬塔卡萨斯' => 'Punch',
            '潘趣' => 'Punch',
            '暴击' => 'Punch',
            '朋契' => 'Punch',
            '瓜恩塔纳梅拉' => 'Guantanamera',
            '关塔那美拉' => 'Guantanamera',
            '雪茄老人' => 'El Rey del Mundo',
            '世界之王' => 'El Rey del Mundo',
            '拉科罗那' => 'La Corona',
            '外交官' => 'Diplomaticos',
            '迪普洛马蒂克斯' => 'Diplomaticos',
            '外交使节' => 'Diplomaticos',
            '多尔赛' => 'Por Larranaga',
            '拉腊尼亚加' => 'Por Larranaga',
            '波尔' => 'Por Larranaga',
            '戴维森' => 'Quai D\'Orsay',
            '奎达赛' => 'Quai D\'Orsay',
            '拉佛罗雷德凯诺' => 'La Flor de Cano',
            '凯诺之花' => 'La Flor de Cano',
            '圣米格尔' => 'Rafael Gonzalez',
            '拉斐尔·冈萨雷斯' => 'Rafael Gonzalez',
            
            // Dominican Republic brands
            '阿图罗·富恩特' => 'Arturo Fuente',
            '阿图罗富恩特' => 'Arturo Fuente',
            '富恩特' => 'Arturo Fuente',
            '阿图罗' => 'Arturo Fuente',
            '大卫杜夫' => 'Davidoff',
            '大卫·杜夫' => 'Davidoff',
            '戴维杜夫' => 'Davidoff',
            '戴维多夫' => 'Davidoff',
            '戴维·杜夫' => 'Davidoff',
            '奥古斯托·雷耶斯' => 'Augusto Reyes',
            '阿富汗' => 'Avo',
            '阿沃' => 'Avo',
            '巴塞利' => 'Baccarat',
            '巴卡拉' => 'Baccarat',
            '老鸟' => 'Aging Room',
            '麦克纳多' => 'Macanudo',
            '麦卡努多' => 'Macanudo',
            '格里芬' => 'Griffin',
            '锡哈' => 'Zino',
            '希诺' => 'Zino',
            '阿什顿' => 'Ashton',
            '艾希顿' => 'Ashton',
            '阿斯顿' => 'Ashton',
            '克鲁兹多' => 'Cuesta-Rey',
            '奥罗拉' => 'La Aurora',
            '卡尤' => 'Camacho',
            '卡马楚' => 'Camacho',
            '顶点' => 'Apex',
            
            // Nicaragua brands
            '帕德龙' => 'Padron',
            '帕特隆' => 'Padron',
            '帕德隆' => 'Padron',
            '帕德伦' => 'Padron',
            '奥利瓦' => 'Oliva',
            '奥力瓦' => 'Oliva',
            '欧利瓦' => 'Oliva',
            '奥利维亚' => 'Oliva',
            '轻佻' => 'Joya de Nicaragua',
            '塔图阿赫' => 'Tatuaje',
            '塔图哈耶' => 'Tatuaje',
            '纹身' => 'Tatuaje',
            '佩尔多莫' => 'Perdomo',
            '培多莫' => 'Perdomo',
            '珀多莫' => 'Perdomo',
            '加西亚' => 'My Father Cigars',
            '普拉森西亚' => 'Plasencia',
            '加西亚·皮尼亚' => 'Garcia y Vega',
            '德鲁' => 'Drew Estate',
            '德鲁庄园' => 'Drew Estate',
            '洛基帕特尔' => 'Rocky Patel',
            '洛基·帕特尔' => 'Rocky Patel',
            '奥圣特' => 'Alec Bradley',
            '阿勒克·布拉德利' => 'Alec Bradley',
            '卡奥' => 'CAO',
            
            // Honduras brands
            '吉塔诺' => 'Camacho',
            '卡马丘' => 'Camacho',
            '阿尔塔迪斯' => 'Altadis',
            '阿尔塔狄斯' => 'Altadis',
            '墨西哥雪松' => 'Hoyo de Monterrey (Non-Cuban)',
            '彭奇' => 'Punch (Non-Cuban)',
            '沈达' => 'Zino',
            '再诺' => 'Zino',
            
            // US and other brands
            '德鲁庄园' => 'Drew Estate',
            '德鲁' => 'Drew Estate',
            '德鲁庄' => 'Drew Estate',
            '洛基帕特尔' => 'Rocky Patel',
            '洛基·帕特尔' => 'Rocky Patel',
            '奥圣特' => 'Alec Bradley',
            '阿勒克·布拉德利' => 'Alec Bradley',
            '基希纳' => 'CAO',
            '拉奥罗拉' => 'La Aurora',
            '拉弗林塔' => 'La Flor Dominicana',
            '拉弗洛多米尼加' => 'La Flor Dominicana',
            '拉弗洛·多米尼加' => 'La Flor Dominicana',
            '拉帕尔玛' => 'La Palina',
            '阿申蒂' => 'Ashton',
            '爱世顿' => 'Ashton',
            '艾希顿' => 'Ashton',
            '伊尔西诺' => 'Illusione',
            '幻影' => 'Illusione',
            '沙鲁特' => 'Tatuaje',
            '埃斯皮诺萨' => 'Espinosa',
            '库兹诺' => 'Joya de Nicaragua',
            '基准' => 'Foundation',
            '沃特菲尔德' => 'Warped',
            '华宝' => 'Warped',
            '葛尔亚德' => 'E.P. Carrillo',
            '多米努斯' => 'Plasencia',
            '丹麦拉森' => 'W.O. Larsen',
            '丹麦法官' => 'Orlik',
            '大雀鸟' => 'Peterson',
            '丹麦彼特森' => 'Peterson',
            '丹麦艾林莫尔' => 'Mac Baren',
            '大亨' => 'Captain Black',
            '金古' => 'Gawith',
            '史丹威' => 'Stanwell',
            '马车' => 'Stanwell',
            '菲尔卡诺' => 'Phil & Terry',
            '爱德华七世' => 'Edward G Robinson',
            '邓希尔' => 'Dunhill',
            '登喜路' => 'Dunhill',
            '丹纳尔' => 'Dunhill',
            '登喜路烟丝' => 'Dunhill Pipe Tobacco',
            '克鲁萨德' => 'Crusader',
            '名仕' => 'Arturo Fuente',
            '军马' => 'White Horse',
            '菲利普' => 'Philip Morris',
            '伯爵' => 'Earl',
            '爱丽丝' => 'Acid',
            '利加' => 'Liga Privada',
            '私人珍藏' => 'Liga Privada',
            '恩都罗' => 'Undercrown',
            '温莎' => 'Winston Churchill',
            // Additional non-Cuban brands
            '阿兹泰克' => 'Azteca',
            '锰火' => 'Aganorsa',
            '艾伦卡特' => 'Alan Rubin',
            '奥托诺' => 'Aladino',
            '阿瓦隆' => 'Avalon',
            '布里克豪斯' => 'Brick House',
            '格里芬' => 'Griffin',
            '哈特菲尔德' => 'Crowned Heads',
            '皇冠之头' => 'Crowned Heads',
            '锤头' => 'Hammer & Sickle',
            '西里罗' => 'Cirillo',
            '达蒙' => 'Damon',
            '密室' => 'Room101',
            '101包房' => 'Room101',
            '北方' => 'Caldwell',
            '考德威尔' => 'Caldwell',
            '吉美尼兹' => 'JC Newman',
            '纽曼' => 'JC Newman',
            '古巴卡' => 'Cubanacan',
            '皇家橡树' => 'Royal Oak',
            '杰梅尔' => 'Cayman Cigar',
            '开曼' => 'Cayman Cigar',
            '戴夫' => 'Davidus',
            '达维杜斯' => 'Davidus',
            '马哈巴' => 'Matilde',
            '马提尔德' => 'Matilde',
            '萨德瓦' => 'Saddlewood',
            '达维罗夫' => 'Davidoff',
            '小批量' => 'Small Batch',
            '古铜人' => 'AJ Fernandez',
            '费尔南德斯' => 'AJ Fernandez',
            '小马' => 'Cavalier',
            '骑士' => 'Cavalier',
            '宝罗' => 'Balmoral',
            '巴尔莫勒' => 'Balmoral',
            '阿莫罗萨多' => 'Amourosado',
            '卡布雷拉' => 'Protocol',
            '协议' => 'Protocol',
            '传统' => 'Tradition',
            '传统烟草' => 'Tradition',
            '柯罗娜' => 'Curivari',
            '库里瓦里' => 'Curivari',
            '赫拉多拉' => 'Herrera Esteli',
            '埃斯特利' => 'Herrera Esteli',
            '铁骑' => 'Iron Horse',
            '古德' => 'Gurkha',
            '库尔卡' => 'Gurkha',
            '鬼武士' => 'Gurkha',
            '阿图罗黄金' => 'Arturo Fuente Don Carlos',
            '大都会' => 'Metropolitan',
            '梅特罗' => 'Metropolitan',
            '钥匙' => 'The Key',
            '拉瑞诺' => 'Larino',
            '拉里诺' => 'Larino',
            '主席' => 'El Presidente',
            '总统' => 'El Presidente',
        );
    }
    
    /**
     * Enhanced series mappings for each brand
     * Extended with more variations and detailed matching patterns
     */
    public static function get_series_mappings() {
        return array(
            // Romeo y Julieta series - expanded with more variants
            'Romeo y Julieta' => array(
                '希达戈' => 'Hidalgos', 
                '绅士' => 'Hidalgos',
                '戴安娜' => 'Dianas',
                '黛安娜' => 'Dianas',
                '贵族' => 'Nobles',
                '诺布里斯' => 'Nobles',
                '丘吉尔' => 'Churchill',
                '丘' => 'Churchill',
                '罗布图' => 'Robusto',
                '罗伯图' => 'Robusto',
                '罗拔图' => 'Robusto',
                '宽丘吉尔' => 'Wide Churchill',
                '宽丘' => 'Wide Churchill',
                '雪松' => 'Cedros',
                '短科罗尼塔' => 'Petit Coronas',
                '小皇冠' => 'Petit Coronas',
                '朱丽叶' => 'Julieta',
                '胡丽塔' => 'Julieta',
                '千花' => 'Mille Fleurs',
                '米勒福勒斯' => 'Mille Fleurs',
                '小罗' => 'Petit Julietas',
                '小朱丽叶' => 'Petit Julietas',
                '皇家' => 'Regalias',
                '瑞加利亚' => 'Regalias',
                '短丘' => 'Short Churchill',
                '罗密欧1号' => 'Romeo No.1',
                '罗密欧2号' => 'Romeo No.2',
                '罗密欧3号' => 'Romeo No.3',
                '小宫廷' => 'Petit Royales',
                '小皇室' => 'Petit Royales',
                '猎人' => 'Cazadores',
                '卡萨多雷斯' => 'Cazadores',
                '会展4号' => 'Exhibicion No.4',
                '彪丽高' => 'Belicosos',
                '鱼雷' => 'Belicosos',
                '小鱼雷' => 'Petit Belicosos',
                '特级雪松' => 'Cedros De Luxe',
                '丘比特' => 'Cupidos',
                '黄金系列' => 'Linea Oro',
                '金线' => 'Linea Oro',
                '罗密欧1875' => 'Romeo 1875',
                '维特射手' => 'Sports Largos',
                '柔和' => 'Suave',
                '罗密欧茱丽叶' => 'Romeo y Julieta',
                '罗·朱' => 'Romeo y Julieta',
                '朱丽叶之星' => 'Julieta',
                '北京' => 'Petit Churchill',
                '短丘吉尔' => 'Short Churchill',
                '宽口径' => 'Wide Churchill',
                '维加斯罗布斯托' => 'Vegas Robaina',
                '朱艳花' => 'Capuletos',
                '朱丽叶战舰' => 'Tacos',
                '罗密欧号角' => 'Tuba',
                '鹿邑' => 'Duke',
                '公爵' => 'Duke',
                '罗米丽塔' => 'Romeo y Julieta Mille Fleurs',
                '维加斯' => 'Vegas',
                '罗密欧1875保留' => 'Romeo y Julieta 1875 Reserve',
                '罗密欧红标' => 'Romeo y Julieta Havoc',
                '露喜塔尼亚' => 'Lusitania',
                '尖矛' => 'Piramides',
                '丘吉尔管装' => 'Churchill Tubos',
                '宽丘吉尔管装' => 'Wide Churchill Tubos',
                '五角大楼' => 'Pentagon',
                '宫殿' => 'Palace',
                '1873' => 'Romeo y Julieta 1875',
                '庄园3号' => 'Estate No.3',
            ),
            
            // Cohiba series - expanded with regional variations
            'Cohiba' => array(
                '世纪' => 'Siglo',
                '西格鲁' => 'Siglo',
                '世纪一' => 'Siglo I',
                '世纪一号' => 'Siglo I',
                '世纪1' => 'Siglo I',
                '世纪1号' => 'Siglo I',
                '西格鲁一' => 'Siglo I',
                '西格鲁1' => 'Siglo I',
                '西格鲁1号' => 'Siglo I',
                '世纪二' => 'Siglo II',
                '世纪二号' => 'Siglo II',
                '世纪2' => 'Siglo II',
                '世纪2号' => 'Siglo II',
                '西格鲁二' => 'Siglo II',
                '西格鲁2' => 'Siglo II',
                '西格鲁2号' => 'Siglo II',
                '世纪三' => 'Siglo III',
                '世纪三号' => 'Siglo III',
                '世纪3' => 'Siglo III',
                '世纪3号' => 'Siglo III',
                '西格鲁三' => 'Siglo III',
                '西格鲁3' => 'Siglo III',
                '西格鲁3号' => 'Siglo III',
                '世纪四' => 'Siglo IV',
                '世纪四号' => 'Siglo IV',
                '世纪4' => 'Siglo IV',
                '世纪4号' => 'Siglo IV',
                '西格鲁四' => 'Siglo IV',
                '西格鲁4' => 'Siglo IV',
                '西格鲁4号' => 'Siglo IV',
                '世纪五' => 'Siglo V',
                '世纪五号' => 'Siglo V',
                '世纪5' => 'Siglo V',
                '世纪5号' => 'Siglo V',
                '西格鲁五' => 'Siglo V',
                '西格鲁5' => 'Siglo V',
                '西格鲁5号' => 'Siglo V',
                '世纪六' => 'Siglo VI',
                '世纪六号' => 'Siglo VI',
                '世纪6' => 'Siglo VI',
                '世纪6号' => 'Siglo VI',
                '西格鲁六' => 'Siglo VI',
                '西格鲁6' => 'Siglo VI',
                '西格鲁6号' => 'Siglo VI',
                '半世纪' => 'Medio Siglo',
                '美地欧西格鲁' => 'Medio Siglo',
                '贝希克' => 'Behike',
                '贝依可' => 'Behike',
                'BHK' => 'Behike',
                '贝希克52' => 'Behike 52',
                '贝希克54' => 'Behike 54',
                '贝希克56' => 'Behike 56',
                'BHK52' => 'Behike 52',
                'BHK54' => 'Behike 54',
                'BHK56' => 'Behike 56',
                'BHK#52' => 'Behike 52',
                'BHK#54' => 'Behike 54',
                'BHK#56' => 'Behike 56',
                'BHK 52' => 'Behike 52',
                'BHK 54' => 'Behike 54',
                'BHK 56' => 'Behike 56',
                '玛杜罗' => 'Maduro',
                '玛杜罗5号' => 'Maduro 5',
                '玛杜罗5' => 'Maduro 5',
                '玛杜罗五号' => 'Maduro 5',
                '埃斯普兰迪多' => 'Esplendidos',
                '导师' => 'Esplendidos',
                '异常' => 'Esplendidos',
                '长矛' => 'Lanceros',
                '兰塞罗' => 'Lanceros',
                '帕内特拉' => 'Panetelas',
                '宾丽' => 'Panetelas',
                '罗布图' => 'Robustos',
                '罗拔图' => 'Robustos',
                '罗伯图' => 'Robustos',
                '罗布斯托' => 'Robustos',
                '精品' => 'Exquisitos',
                '吉时途' => 'Exquisitos',
                '吉士图' => 'Exquisitos',
                '特殊冠' => 'Coronas Especiales',
                '特级皇冠' => 'Coronas Especiales',
                '特选皇冠' => 'Coronas Especiales',
                '特级科罗纳' => 'Coronas Especiales',
                '1492' => 'Linea 1492',
                '经典' => 'Linea Clasica',
                '金字塔' => 'Piramides',
                '金字塔特级' => 'Piramides Extra',
                '特级鱼雷' => 'Piramides Extra',
                '天才' => 'Genios',
                '天才大' => 'Genios',
                '大天才' => 'Genios',
                '天才（大）' => 'Genios',
                '魔术师' => 'Magicos',
                '中天才' => 'Magicos',
                '秘密' => 'Secretos',
                '奥秘' => 'Secretos',
                '秘宓' => 'Secretos',
                '小天才' => 'Secretos',
                '俱乐部' => 'Club',
                '短号' => 'Short',
                '宽短号' => 'Wide Short',
                '迷你' => 'Mini',
                '琥珀' => 'Ambar',
                '55周年' => '55 Aniversario',
                '特立尼达城堡' => 'Talisman',
                '护身符' => 'Talisman',
                '大罗布斯托' => 'Robusto Supremos',
                '1966年' => '1966',
                '经典系列' => 'Linea Clasica',
                '1492系列' => 'Linea 1492',
                '马代罗系列' => 'Maduro',
                '高希霸专家' => 'Cohiba Expertos',
                '罗布托50周年' => 'Robusto 50 Aniversario',
                '高希霸55周年' => 'Cohiba 55 Aniversario',
                '伊人之源' => 'La Reina',
                '王后' => 'La Reina',
                '马格纳姆' => 'Magnum',
                '巨型' => 'Magnum',
                '世纪7号' => 'Siglo VII',
                '嘴唇' => 'Lips',
                '野兽' => 'Behemoth',
                '大魔王' => 'Behemoth',
                '哑光黑' => 'Matte Black',
                '拉巴纳' => 'La Habana',
                '罗布托T' => 'Robusto T',
            ),
            
            // Montecristo series - expanded with specific formats
            'Montecristo' => array(
                '艾德蒙多' => 'Edmundo',
                '爱德蒙多' => 'Edmundo',
                '小艾德蒙多' => 'Petit Edmundo',
                '小爱德蒙多' => 'Petit Edmundo',
                '大艾德蒙多' => 'Double Edmundo',
                '双爱德蒙多' => 'Double Edmundo',
                '大爱德蒙多' => 'Double Edmundo',
                '特制' => 'Especiales',
                '特殊' => 'Especiales',
                '特别' => 'Especiales',
                '特选' => 'Especiales',
                '至上' => 'Supremos',
                '至尊' => 'Supremos',
                '1号' => 'No.1',
                '一号' => 'No.1',
                '#1号' => 'No.1',
                '#1' => 'No.1',
                '2号' => 'No.2',
                '二号' => 'No.2',
                '#2号' => 'No.2',
                '#2' => 'No.2',
                '3号' => 'No.3',
                '三号' => 'No.3',
                '#3号' => 'No.3',
                '#3' => 'No.3',
                '4号' => 'No.4',
                '四号' => 'No.4',
                '#4号' => 'No.4',
                '#4' => 'No.4',
                '5号' => 'No.5',
                '五号' => 'No.5',
                '#5号' => 'No.5',
                '#5' => 'No.5',
                '双冠' => 'Double Coronas',
                '双皇冠' => 'Double Coronas',
                '鹰' => 'Eagle',
                '老鹰' => 'Eagle',
                '小乐趣' => 'Joyitas',
                '小喜悦' => 'Joyitas',
                '小管' => 'Petit Tubos',
                '小铝管' => 'Petit Tubos',
                '小号' => 'Junior',
                '初级' => 'Junior',
                '蒙特2号' => 'Monte 2',
                '蒙特二号' => 'Monte 2',
                '开放系列' => 'Open Series',
                '开放赛系列' => 'Open Series',
                '公开赛系列' => 'Open Series',
                '开放雷鸣' => 'Open Eagle',
                '开放雷' => 'Open Eagle',
                '公开赛比赛' => 'Open Regata',
                '开放大师赛' => 'Open Master',
                '开放高尔夫' => 'Open Golf',
                '开放网球赛' => 'Open Tennis',
                '520' => '520 Limited Edition',
                '黑色与白色' => 'Montecristo White & Black',
                '丹特' => 'Dantes',
                '媒体胡里亚' => 'Media Corona',
                '半皇冠' => 'Media Corona',
                '经典系列' => 'Linea Clasica',
                '1935' => '1935 Line',
                '1935年份' => '1935 Line',
                '马尔塔' => 'Maltes',
                '杜马斯' => 'Dumas',
                '80周年' => '80 Aniversario',
                '蒙特丘吉尔' => 'Churchill',
                '白牌' => 'White Label',
                '黑牌' => 'Black Label',
                '尼加拉瓜' => 'Nicaragua',
                '铂金' => 'Platinum',
                '经文' => 'Palabras',
                '佩雷伊博士' => 'Dr. Pereyra',
                '加利福尼亚' => 'California',
                '维哈奇' => 'Vegas',
                '特制编排' => 'Composicion No.3',
                '敬礼' => 'Coronation',
                '加冕' => 'Coronation',
                '瑞典1' => 'Swedish Petit Corona',
                '古巴' => 'Cuban',
                '多米尼加' => 'Dominican',
                '卡萨布兰卡' => 'Casablanca',
                '哈瓦那' => 'Havana',
                '洪都拉斯' => 'Honduras',
                '贵宾' => 'VIP',
                '尊贵' => 'VIP',
                '纽约' => 'New York',
                '墨西哥' => 'Mexico',
                '蒙特利尔' => 'Montreal',
                '卡曼海水' => 'Caribbean Sea',
                '帕迪拉' => 'Padilla',
                '国家' => 'Country',
                '1492系列' => '1492 Line',
                '特制大师' => 'Masters Special',
            ),
            
            // Trinidad series - expanded with official names
            'Trinidad' => array(
                '创始人' => 'Fundadores',
                '创建者' => 'Fundadores',
                '殖民地' => 'Coloniales',
                '君王' => 'Reyes',
                '国王' => 'Reyes',
                '机智' => 'Ingenios',
                '守夜人' => 'Vigia',
                '维吉亚' => 'Vigia',
                '半月' => 'Media Luna',
                '特立尼达复古' => 'Trinidad Vintage',
                '特立尼达1969' => 'Trinidad 1969',
                '千里达复古' => 'Trinidad Vintage',
                '千里达1969' => 'Trinidad 1969',
                '短号' => 'Short',
                '短' => 'Short',
                '埃斯梅拉达' => 'Esmeralda',
                '特里尼达罗布图T' => 'Robusto T',
                '罗布图T' => 'Robusto T',
                '罗布斯托T' => 'Robusto T',
                '罗布斯图T' => 'Robusto T',
                '罗布图额外' => 'Robusto Extra',
                '额外罗布图' => 'Robusto Extra',
                '特立尼达 La Trova' => 'La Trova',
                '拉特罗瓦' => 'La Trova',
                '牙买加' => 'Casilda',
                '卡西尔达' => 'Casilda',
                '梅迪亚路娜' => 'Media Luna',
                '警戒' => 'Vigia',
                '格威托' => 'Ingenios',
                '独立日' => 'Topes',
                '托佩斯' => 'Topes',
                '方顶' => 'Topes',
                '特立尼达收藏版' => 'Coleccion Trinidad',
                '三一' => 'Trinidad',
                '复古' => 'Vintage',
                '维加斯罗布斯托' => 'Vegas Robustos',
                '圣灵' => 'Espiritu',
                '特立尼经典' => 'Trinidad Clasic',
                '拉格朗哈' => 'La Granja',
                '农场' => 'La Granja',
                '德尔瓦利' => 'Del Valle',
                '特立尼达故事' => 'Historia',
                '历史' => 'Historia',
                '迪普洛马蒂科' => 'Diplomatico',
                '外交官' => 'Diplomatico',
                '钱德勒' => 'Chandler',
                '梅特罗' => 'Metro',
                '大都会' => 'Metro',
                '特立尼达黄金' => 'Trinidad Gold',
                '特立尼达白' => 'Trinidad White',
                '特立尼达黑' => 'Trinidad Black',
            ),
            
            // Partagas series - expanded with additional models
            'Partagas' => array(
                '卢西塔尼亚' => 'Lusitanias',
                '卢西坦尼亚' => 'Lusitanias',
                '露西塔尼亚' => 'Lusitanias',
                'D系列' => 'Serie D',
                'D4' => 'Serie D No.4',
                'D4号' => 'Serie D No.4',
                'D四号' => 'Serie D No.4',
                'D系列4号' => 'Serie D No.4',
                'D系列4' => 'Serie D No.4',
                'D系列四号' => 'Serie D No.4',
                'D系列四' => 'Serie D No.4',
                'D6' => 'Serie D No.6',
                'D6号' => 'Serie D No.6',
                'D系列6' => 'Serie D No.6',
                'D系列6号' => 'Serie D No.6',
                'P系列' => 'Serie P',
                'P2' => 'Serie P No.2',
                'P2号' => 'Serie P No.2',
                'P二号' => 'Serie P No.2',
                'P系列2号' => 'Serie P No.2',
                'P系列2' => 'Serie P No.2',
                'P系列二号' => 'Serie P No.2',
                'P系列二' => 'Serie P No.2',
                'E系列' => 'Serie E',
                'E2' => 'Serie E No.2',
                'E2号' => 'Serie E No.2',
                'E二号' => 'Serie E No.2',
                'E系列2号' => 'Serie E No.2',
                'E系列2' => 'Serie E No.2',
                'E系列二号' => 'Serie E No.2',
                'E系列二' => 'Serie E No.2',
                '短' => 'Shorts',
                '短款' => 'Shorts',
                '矮个子' => 'Shorts',
                '贵族' => 'Aristocrats',
                '哈瓦那' => 'Habaneros',
                '帕塔加斯2号' => 'Partagas No.2',
                '帕塔加斯二号' => 'Partagas No.2',
                '898' => '8-9-8',
                '8-9-8' => '8-9-8',
                '科罗那斯高级' => 'Coronas Senior',
                '科罗那斯高级人士' => 'Coronas Senior',
                '科罗那斯高级长老' => 'Coronas Senior',
                '超级帕塔加斯' => 'Super Partagas',
                '编年史1' => 'Serie C No.1',
                '编年史3' => 'Serie C No.3',
                '总裁' => 'Presidentes',
                '马德罗2000' => 'Maduro No.2',
                '顶皇冠' => 'Super Corona',
                '超级皇冠' => 'Super Corona',
                '哈瓦那斯' => 'Habaneros',
                '马德罗' => 'Maduro',
                '黑' => 'Maduro',
                '黑帕塔加斯' => 'Maduro',
                '丘吉尔特耐久' => 'Churchill De Luxe',
                '皇家' => 'Coronas',
                '吉林科系列' => 'Culebras',
                '蛇' => 'Culebras',
                '170周年' => '170 Aniversario',
                '马德罗明星' => 'Maduro Estrella',
                '马德罗公爵' => 'Maduro Duke',
                '世纪' => 'Siglo',
                '千里' => 'Mille',
                '千里加冕' => 'Mille Coronation',
                '帕塔加斯1845' => 'Partagas 1845',
                '黑标' => 'Black Label',
                '红标' => 'Red Label',
                '西班牙罗塞多' => 'Spanish Rosado',
                '名录' => 'Catalog',
                '卷轴' => 'Serie',
                '1600' => 'Heritage',
                '传统' => 'Heritage',
                '签名黑' => 'Signature Black',
                '签名系列' => 'Signature Series',
                '完美' => 'Perfecto',
                '珠宝' => 'Jewels',
                '帕塔加斯1860' => 'Partagas 1860',
                '帕塔加斯187' => 'Partagas 187',
                '帕塔加斯160' => 'Partagas 160',
                '帕塔加斯175' => 'Partagas 175',
                '帕塔加斯1' => 'Partagas Serie 1',
                '帕塔加斯2' => 'Partagas Serie 2',
                '帕塔加斯3' => 'Partagas Serie 3',
                '帕塔加斯4' => 'Partagas Serie 4',
                '帕塔加斯5' => 'Partagas Serie 5',
                '名门' => 'Grand Puro',
                '限定版' => 'Special Edition',
                '特别版' => 'Special Edition',
                '经典阵容' => 'Clasicos',
                '经典' => 'Classicos',
                '帕塔加斯16' => 'Partagas 16',
                '迪雷克特' => 'Direct',
                '大卫' => 'David',
                '大卫赫尔布德' => 'David Heubel',
                '艾伯特' => 'Albert',
                '艾伯特乌普曼' => 'Albert Upmann',
                '西班牙玫瑰' => 'Spanish Rosado',
                '罗布托皇家' => 'Robusto Royal',
                '帝国' => 'Imperial',
                '哥伦布' => 'Columbus',
                '古巴传统' => 'Cuban Tradition',
                '帕塔加斯黑' => 'Partagas Black',
                'PR4' => 'Partagas Royale No.4',
                '皇家4号' => 'Royale No.4',
                'D5' => 'Serie D No.5',
                'D5号' => 'Serie D No.5',
                'P1' => 'Serie P No.1',
                'P1号' => 'Serie P No.1',
            ),
            
            // H. Upmann series - expanded with regional names
            'H. Upmann' => array(
                '大皇冠' => 'Magnum',
                '大皇冠46' => 'Magnum 46',
                '大皇冠50' => 'Magnum 50',
                '大皇冠54' => 'Magnum 54',
                '大皇冠56' => 'Magnum 56',
                '麦格纳姆46' => 'Magnum 46',
                '麦格纳姆50' => 'Magnum 50',
                '麦格纳姆54' => 'Magnum 54',
                '麦格纳姆56' => 'Magnum 56',
                '半皇冠' => 'Half Corona',
                '半克朗' => 'Half Corona',
                '王冠' => 'Coronas Major',
                '大皇冠' => 'Coronas Major',
                '皇冠大' => 'Coronas Major',
                '爵士' => 'Connoisseur',
                '鉴赏家' => 'Connoisseur',
                '温斯顿爵士' => 'Sir Winston',
                '丘吉尔先生' => 'Sir Winston',
                '皇家罗布图' => 'Royal Robusto',
                '皇家罗布斯托' => 'Royal Robusto',
                '1号' => 'No.1',
                '一号' => 'No.1',
                '#1号' => 'No.1',
                '#1' => 'No.1',
                '2号' => 'No.2',
                '二号' => 'No.2',
                '#2号' => 'No.2',
                '#2' => 'No.2',
                '3号' => 'No.3',
                '三号' => 'No.3',
                '#3号' => 'No.3',
                '#3' => 'No.3',
                '4号' => 'No.4',
                '四号' => 'No.4',
                '#4号' => 'No.4',
                '#4' => 'No.4',
                '5号' => 'No.5',
                '五号' => 'No.5',
                '#5号' => 'No.5',
                '#5' => 'No.5',
                '皇家科罗纳管' => 'Coronas Major Tubos',
                '鸟笼' => 'Propios',
                '特殊' => 'Especiales',
                '连续' => 'Continuos',
                '帕尼尔' => 'Panatellas',
                '无穷' => 'Limitadas',
                '限制' => 'Limitadas',
                '马德罗' => 'Maduro',
                '科里尼奇' => 'Petit Coronas',
                '嘉宾' => 'Tapados',
                '品质' => 'Anejados',
                '陈年' => 'Anejados',
                '皇家' => 'Regalias',
                '尊享' => 'Regalia',
                '皇冠系列' => 'Coronas Series',
                '麦格南系列' => 'Magnum Series',
                '罗布托系列' => 'Robusto Series',
                '小牛' => 'Noella',
                '经典阿加达斯' => 'Anejados',
                '西班牙库姆洛尔' => 'Conmemoracion',
                '宪章' => 'The Charter',
                '皇家红褐色' => 'Royal Maduro',
                '精选经典' => 'Selected Classics',
                '皇家之选' => 'Royal Selection',
                '遗产' => 'Legacy',
                '传承' => 'Legacy',
                '连贯系列' => 'Continuos Series',
                '1844系列' => '1844 Series',
                '1844保留' => '1844 Reserve',
                '传统经典' => 'Classic Traditions',
                '欧米茄' => 'Omega',
                '维多利亚' => 'Victoria',
                '皇家维多利亚' => 'Royal Victoria',
                '雅典' => 'Athens',
                '宏伟' => 'Grand',
                '华丽' => 'Grand',
                '宏伟皇冠' => 'Grand Coronas',
                '华丽皇冠' => 'Grand Coronas',
                '优普曼本色' => 'H. Upmann Naturals',
                '艾伯特' => 'Albert',
                '卡梅隆' => 'Cameron',
                '卡马龙' => 'Cameron',
                '尼加拉瓜' => 'Nicaragua',
                '洪都拉斯' => 'Honduras',
                '多米尼加' => 'Dominican',
                '太阳种植' => 'Sun Grown',
                '日晒' => 'Sun Grown',
                '白牌' => 'White Label',
                '保留' => 'Reserve',
                '1844白金' => '1844 Platinum',
            ),
            
            // Hoyo de Monterrey series - expanded with regional variants
            'Hoyo de Monterrey' => array(
                '美食家' => 'Epicure',
                '美食家1号' => 'Epicure No.1',
                '美食家一号' => 'Epicure No.1',
                '美食家2号' => 'Epicure No.2',
                '美食家二号' => 'Epicure No.2',
                '逍遥一号' => 'Epicure No.1',
                '逍遥二号' => 'Epicure No.2',
                '逍遥1号' => 'Epicure No.1',
                '逍遥2号' => 'Epicure No.2',
                '美食家特别' => 'Epicure Especial',
                '美食家特级' => 'Epicure Especial',
                '美食家豪华' => 'Epicure Deluxe',
                '双皇冠' => 'Double Corona',
                '双科罗那' => 'Double Corona',
                '乐趣' => 'Le Hoyo',
                '德乐趣' => 'Le Hoyo',
                '棕榈树' => 'Palmas',
                '帕尔马' => 'Palmas',
                '小罗布图' => 'Petit Robusto',
                '小罗布斯托' => 'Petit Robusto',
                '皇冠' => 'Corona',
                '科罗那' => 'Corona',
                '德拉迪普' => 'de la Demi-Tasse',
                '杜洛克' => 'Du Roi',
                '杜玛约' => 'Du Maire',
                '蒙特雷' => 'Monterreyes',
                '蒙特雷耶斯' => 'Monterreyes',
                '好友短鱼雷' => 'Hoyo Short Piramides',
                '好友小鱼雷' => 'Petit Belicosos',
                '好友小比利高' => 'Petit Belicosos',
                '秀丽4号' => 'Hermosos No.4',
                '秀丽' => 'Hermosos',
                '陈年' => 'Anejados',
                '罗布图' => 'Robusto',
                '罗布图管' => 'Robusto Tubos',
                '罗布图特别版' => 'Robusto Especial',
                '小长矛' => 'Petit Lanceros',
                '小兰塞罗' => 'Petit Lanceros',
                '杜别利兹' => 'Du Prince',
                '德普林塞' => 'Du Prince',
                '帕尔玛斯额外' => 'Palmas Extra',
                '额外帕尔玛斯' => 'Palmas Extra',
                '大皇冠' => 'Grand Epicure',
                '超级美食家' => 'Grand Epicure',
                '蒙特拉莱' => 'Monterrey',
                '柏林之墙' => 'Rio Seco',
                '里约塞科' => 'Rio Seco',
                '卡莱特' => 'Caleta',
                '拉埃斯梅拉达' => 'La Esmeralda',
                '埃斯梅达尔达' => 'La Esmeralda',
                '圣胡安' => 'San Juan',
                '好友之友' => 'Hoyo Du Depute',
                '好友之友' => 'Hoyo Des Dieux',
                '大使' => 'Excalibur',
                '埃克斯卡利伯' => 'Excalibur',
                '皇家托罗' => 'Regal Toro',
                '皇家' => 'Regal',
                '大使传说' => 'Excalibur Legend',
                '1066' => 'Excalibur 1066',
                '法官' => 'The Judge',
                '法官' => 'El Juez',
                '黑带' => 'Dark Sumatra',
                '黑苏门答腊' => 'Dark Sumatra',
                '黑阴影' => 'Dark Shade',
                '纯正经典' => 'Natural Classic',
                '纯正尼加拉瓜' => 'Natural Nicaragua',
                '蒙特雷棱镜' => 'Monterrey Prism',
                '德拉斯蒙' => 'De Las Monjas',
                '黄金标签' => 'Gold Label',
                '收藏系列' => 'Collectors Series',
                '好友塞洛索' => 'Hoyo Celloso',
                '紧密编织' => 'Densely Woven',
                '好友王' => 'Hoyo King',
                '好友皇帝' => 'Hoyo Emperor',
                '皇家双雪茄' => 'Royal Dual',
                '双重' => 'Dual',
                '好友1' => 'Hoyo No.1',
                '好友2' => 'Hoyo No.2',
            ),
            
            // Bolivar series - expanded with specific vitolas
            'Bolivar' => array(
                '比利高细雪茄' => 'Belicoso Fino',
                '比利高细' => 'Belicoso Fino',
                '鱼雷细' => 'Belicoso Fino',
                '皇家皇冠' => 'Royal Coronas',
                '皇家科罗那' => 'Royal Coronas',
                '皇家冠' => 'Royal Coronas',
                '小皇冠' => 'Petit Corona',
                '小科罗那' => 'Petit Corona',
                '美洲' => 'Bonitas',
                '美洲小美人' => 'Bonitas',
                '玻利瓦尔1号' => 'Bolivar No.1',
                '玻利瓦尔一号' => 'Bolivar No.1',
                '玻利瓦尔2号' => 'Bolivar No.2',
                '玻利瓦尔二号' => 'Bolivar No.2',
                '玻利瓦尔3号' => 'Bolivar No.3',
                '玻利瓦尔三号' => 'Bolivar No.3',
                '自由' => 'Libertador',
                '解放者' => 'Libertador',
                '科罗那特级' => 'Corona Extra',
                '特级皇冠' => 'Corona Extra',
                '异常科罗那' => 'Corona Extra',
                '皇冠特大号' => 'Corona Gigantes',
                '巨型皇冠' => 'Corona Gigantes',
                '科罗那巨人' => 'Corona Gigantes',
                '科罗那金星' => 'Corona Gigantes',
                '科罗那特级管' => 'Corona Especiales',
                '超级科罗那' => 'Super Coronas',
                '超级皇冠' => 'Super Coronas',
                '国防部长' => 'Soberano',
                '至尊' => 'Soberano',
                '索贝拉诺' => 'Soberano',
                '加里格特恩' => 'Distinguidos',
                '区分' => 'Distinguidos',
                '国防' => 'Coronas Junior',
                '金链' => 'Gold Medal',
                '金牌' => 'Gold Medal',
                '五月午后' => 'Tiempo',
                '时间' => 'Tiempo',
                '蒙乘' => 'Montecarlo',
                '蒙特卡罗' => 'Montecarlo',
                '汉诺威' => 'Hanover',
                '柏林' => 'Berlin',
                '温沙' => 'Windsor',
                '金盾' => 'Escudo',
                '精选' => 'Seleccion',
                '英诺' => 'Immensas',
                '不朽' => 'Inmensas',
                '海王星' => 'Tubos No.1',
                '长管1号' => 'Tubos No.1',
                '长管一号' => 'Tubos No.1',
                '长管2号' => 'Tubos No.2',
                '长管二号' => 'Tubos No.2',
                '长管3号' => 'Tubos No.3',
                '长管三号' => 'Tubos No.3',
                '船长' => 'Captain',
                '战士' => 'Warrior',
                '勇士' => 'Warrior',
                '英雄' => 'Heroes',
                '胜利' => 'Victory',
                '多米尼加' => 'Dominican',
                '尼加拉瓜' => 'Nicaragua',
                '蓬勃' => 'Vitality',
                '哈瓦那风格' => 'Havana Style',
                '古巴风格' => 'Cuban Style',
                '拉美风格' => 'Latin Style',
                '金卫士' => 'Gold Sentinel',
                '铂卫士' => 'Platinum Sentinel',
                '铜卫士' => 'Copper Sentinel',
                '银卫士' => 'Silver Sentinel',
                '玻利瓦尔冬季' => 'Bolivar Winter',
                '玻利瓦尔夏季' => 'Bolivar Summer',
                '玻利瓦尔秋季' => 'Bolivar Autumn',
                '玻利瓦尔春季' => 'Bolivar Spring',
                '文明' => 'Civilization',
                '文明系列' => 'Civilization Series',
                '独立' => 'Independence',
                '独立系列' => 'Independence Series',
                '南美' => 'South America',
                '北美' => 'North America',
                '欧洲' => 'Europe',
                '亚洲' => 'Asia',
                '非洲' => 'Africa',
                '大洋洲' => 'Oceania',
                '南极洲' => 'Antarctica',
                '环球' => 'Global',
                '迷你' => 'Mini',
                '袖珍' => 'Pocket',
                '巨型' => 'Giant',
            ),
            
            // Davidoff series - expanded with detailed editions
            'Davidoff' => array(
                '年华' => 'Aniversario',
                '周年' => 'Aniversario',
                '大使' => 'Ambassador',
                '特选' => 'Grand Cru',
                '大师精选' => 'Grand Cru',
                '千禧' => 'Millennium',
                '白牌' => 'White Label',
                '尼加拉瓜' => 'Nicaragua',
                '尼加拉瓜系列' => 'Nicaragua',
                '1号' => 'No.1',
                '一号' => 'No.1',
                '#1' => 'No.1',
                '2号' => 'No.2',
                '二号' => 'No.2',
                '#2' => 'No.2',
                '3号' => 'No.3',
                '三号' => 'No.3',
                '#3' => 'No.3',
                '特级' => 'Special',
                '特级T' => 'Special T',
                '专家' => 'Primeros',
                '普麦罗' => 'Primeros',
                '入门' => 'Primeros',
                '长矛' => 'Lancero',
                '兰塞罗' => 'Lancero',
                '温斯顿丘吉尔' => 'Winston Churchill',
                '温斯顿‧丘吉尔' => 'Winston Churchill',
                '温斯顿丘' => 'Winston Churchill',
                '艾斯库里奥' => 'Escurio',
                '黑暗极致' => 'Escurio',
                '大托罗' => 'Gran Toro',
                '大公牛' => 'Gran Toro',
                '高朗拿高达' => 'Corona Gorda',
                '高朗拿' => 'Corona',
                '短高朗拿' => 'Short Corona',
                '702系列' => '702 Series',
                '702' => '702 Series',
                '多米尼加' => 'Dominican',
                '虎年' => 'Year of the Tiger',
                '虎年限量' => 'Year of the Tiger',
                '龙年' => 'Year of the Dragon',
                '龙年限量' => 'Year of the Dragon',
                '兔年' => 'Year of the Rabbit',
                '兔年限量' => 'Year of the Rabbit',
                '蛇年' => 'Year of the Snake',
                '蛇年限量' => 'Year of the Snake',
                '鼠年' => 'Year of the Rat',
                '鼠年限量' => 'Year of the Rat',
                '猪年' => 'Year of the Pig',
                '猪年限量' => 'Year of the Pig',
                '狗年' => 'Year of the Dog',
                '狗年限量' => 'Year of the Dog',
                '鸡年' => 'Year of the Rooster',
                '鸡年限量' => 'Year of the Rooster',
                '牛年' => 'Year of the Ox',
                '牛年限量' => 'Year of the Ox',
                '马年' => 'Year of the Horse',
                '马年限量' => 'Year of the Horse',
                '羊年' => 'Year of the Sheep',
                '羊年限量' => 'Year of the Sheep',
                '猴年' => 'Year of the Monkey',
                '猴年限量' => 'Year of the Monkey',
                '50周年' => '50 Years',
                '50周年香港' => '50 Years In HongKong',
                '50周年纪念版' => '50th Anniversary',
                '大卫杜夫黑牌' => 'Davidoff Black Label',
                '大卫杜夫黑标' => 'Davidoff Black Label',
                '大卫杜夫白牌' => 'Davidoff White Label',
                '大卫杜夫白标' => 'Davidoff White Label',
                '大卫杜夫金牌' => 'Davidoff Gold Label',
                '大卫杜夫金标' => 'Davidoff Gold Label',
                '芝华士' => 'Chivas',
                '金丝带' => 'Zino Platinum',
                '白金' => 'Platinum',
                '大使' => 'Ambassador',
                '千禧' => 'Millennium',
                '千禧混合' => 'Millennium Blend',
                '云端' => 'Grand Cru',
                '私人收藏' => 'Private Collection',
                '皇家发行' => 'Royal Release',
                '尼加拉瓜盒压' => 'Nicaragua Box Pressed',
                '尼加拉瓜钢盔' => 'Nicaragua Diademas',
                '巴西尔' => 'Brazil',
                '巴西' => 'Brazil',
                '弗罗里达选择' => 'Florida Selection',
                '佛罗里达' => 'Florida Selection',
                '签名系列' => 'Signature Series',
                '签名' => 'Signature',
                '大师选择' => 'Master Selection',
                '大师' => 'Master',
                '耶梅尼' => 'Yamasa',
                '雅玛萨' => 'Yamasa',
                '皇后选择' => 'Royal Selection',
                '精典系列' => 'Classic Series',
                '迷你' => 'Mini',
                '迷你雪茄' => 'Cigarillos',
                '雪茄小' => 'Cigarillos',
                '小雪茄' => 'Cigarillos',
                '短雪茄' => 'Small Cigars',
                '至尊' => 'Royal',
                '皇家' => 'Royal',
                '金牌' => 'Gold Band',
                '银牌' => 'Silver Band',
                '特级五' => 'Special Five',
                '特级七' => 'Special Seven',
                '萧年' => 'Zino',
                '萧诺' => 'Zino',
                '萧诺白牌' => 'Zino White',
                '萧诺银牌' => 'Zino Silver',
                '萧诺金牌' => 'Zino Gold',
                '阿莫' => 'Aniversario',
                '爱尼凡希洛' => 'Aniversario',
                '大卫杜夫皮娜' => 'Puro d\'Oro',
                '纯金' => 'Puro d\'Oro',
                '大卫杜夫后继' => 'Davidoff Revery',
                '后继者' => 'Revery',
                '旗舰店系列' => 'Flagship Series',
                '瑞士' => 'Swiss',
                '日内瓦' => 'Geneva',
                '苏黎世' => 'Zurich',
                '巴塞尔' => 'Basel',
                '日本' => 'Japan',
                '东京' => 'Tokyo',
                '柏林' => 'Berlin',
                '伦敦' => 'London',
                '巴黎' => 'Paris',
                '纽约' => 'New York',
                '洛杉矶' => 'Los Angeles',
                '迈阿密' => 'Miami',
                '拉斯维加斯' => 'Las Vegas',
                '迪拜' => 'Dubai',
                '香港' => 'Hong Kong',
                '澳门' => 'Macau',
                '上海' => 'Shanghai',
                '北京' => 'Beijing',
            ),
            
            // VegaFina series - expanded with zodiac editions
            'VegaFina' => array(
                '兔年限量版' => 'Year Of The Rabbit',
                '兔年限量版2023' => 'Year Of The Rabbit 2023LE',
                '龙年限量版' => 'Year Of The Dragon',
                '龙年限量版2024' => 'Year Of The Dragon 2024LE',
                '虎年限量版' => 'Year Of The Tiger',
                '虎年限量版2022' => 'Year Of The Tiger 2022LE',
                '蛇年限量版' => 'Year Of The Snake',
                '蛇年限量版2025' => 'Year Of The Snake 2025LE',
                '堡垒2' => 'Fortaleza 2',
                '双茄套' => 'Doble Capote',
                '强度3' => 'Fortaleza 3',
                '强度2' => 'Fortaleza 2',
                '1998' => '1998 VF',
                '尼加拉瓜' => 'Nicaragua',
                '皮耶门托' => 'Piemento',
                '佛罗尔德奥托诺' => 'Flor de Otono',
                '麦德拉' => 'Maduro',
                '时尚' => 'Chic',
                '精美' => 'Fine',
                '25周年' => '25 Aniversario',
                '20周年' => '20 Aniversario',
                '15周年' => '15 Aniversario',
                '10周年' => '10 Aniversario',
                '轻柔' => 'Suave',
                '维加斯' => 'Vegas',
                '尼加拉瓜1998' => 'Nicaragua 1998',
                '多米尼加' => 'Dominican',
                '多米尼加1998' => 'Dominican 1998',
                '维加菲娜经典' => 'VegaFina Classic',
                '维加菲娜力量' => 'VegaFina Strength',
                '维加菲娜复古' => 'VegaFina Vintage',
                '维加菲娜尊贵' => 'VegaFina Elegance',
                '维加菲娜尊贵' => 'VegaFina Elegance',
                '维加菲娜黑标' => 'VegaFina Black',
                '维加菲娜红标' => 'VegaFina Red',
                '维加菲娜蓝标' => 'VegaFina Blue',
                '维加菲娜金标' => 'VegaFina Gold',
                '维加菲娜白标' => 'VegaFina White',
                '皇家' => 'Royal',
                '皇室' => 'Royal',
                '迷你雪茄' => 'Mini Cigarillos',
                '迷你' => 'Mini',
                '短雪茄' => 'Short',
                '西班牙系列' => 'Spain Series',
                '牙买加' => 'Jamaica',
                '古巴系列' => 'Cuba Series',
                '力量2' => 'Strength 2',
                '力量3' => 'Strength 3',
                '洞察力' => 'Insight',
                '长春藤' => 'Ivy',
                '精灵' => 'Elves',
                '维加菲娜1998' => 'VegaFina 1998',
                '2000' => 'VegaFina 2000',
                '小马' => 'Petit',
                '马提尼克' => 'Martinique',
                '哥伦比亚' => 'Colombia',
                '加勒比海' => 'Caribbean',
                '海地' => 'Haiti',
                '多明尼加' => 'Dominican Republic',
                '巴拿马' => 'Panama',
                '哥斯达黎加' => 'Costa Rica',
                '厄瓜多尔' => 'Ecuador',
                '委内瑞拉' => 'Venezuela',
                '萨尔瓦多' => 'El Salvador',
                '洪都拉斯' => 'Honduras',
                '危地马拉' => 'Guatemala',
                '尼加拉瓜盒压' => 'Nicaragua Box Pressed',
                '多米尼加盒压' => 'Dominican Box Pressed',
                '拉丁美洲' => 'Latin America',
                '清晨' => 'Morning',
                '黄昏' => 'Dusk',
                '午夜' => 'Midnight',
                '日出' => 'Sunrise',
                '日落' => 'Sunset',
                '星星' => 'Stars',
                '月亮' => 'Moon',
                '太阳' => 'Sun',
            ),
            
            // El Rey del Mundo series
            'El Rey del Mundo' => array(
                '圣殿骑士' => 'Templarios',
                '皇家系列' => 'Royal Series',
                '20 Royal Series' => 'Royal Series',
                '超级皇冠' => 'Grandes de Espana',
                '西班牙大' => 'Grandes de Espana',
                '选择' => 'Choix Supreme',
                '至高无上选择' => 'Choix Supreme',
                '杰出选择' => 'Choix Supreme',
                '德明特拉索斯' => 'Demi Tasse',
                '半杯' => 'Demi Tasse',
                '拉科罗那' => 'La Corona',
                '皇冠' => 'La Corona',
                '冠军' => 'Los Infantes',
                '婴儿' => 'Los Infantes',
                '幼年' => 'Los Infantes',
                '小型卡罗那' => 'Petit Coronas',
                '皇家公爵' => 'Duke',
                '高德尔曼' => 'Tainos',
                '泰诺斯' => 'Tainos',
                '流浪者' => 'Ronnie',
                '罗尼' => 'Ronnie',
                '国王系列' => 'King Series',
                '豪华系列' => 'Luxe Series',
                '世界之王' => 'Rondo',
                '巴西马托格罗索' => 'Mato Grosso',
                '洪都拉斯王' => 'Honduran Kings',
                '烟草之路' => 'Tobacco Road',
                '纽约' => 'New York',
                '洛杉矶' => 'Los Angeles',
                '迈阿密' => 'Miami',
                '芝加哥' => 'Chicago',
                '波士顿' => 'Boston',
                '底特律' => 'Detroit',
                '达拉斯' => 'Dallas',
                '休斯顿' => 'Houston',
                '西雅图' => 'Seattle',
                '丹佛' => 'Denver',
                '亚特兰大' => 'Atlanta',
                '费城' => 'Philadelphia',
                '旧金山' => 'San Francisco',
                '圣地亚哥' => 'San Diego',
                '奥斯汀' => 'Austin',
                '拉斯维加斯' => 'Las Vegas',
                '波特兰' => 'Portland',
                '田纳西' => 'Tennessee',
                '新奥尔良' => 'New Orleans',
                '克利夫兰' => 'Cleveland',
                '匹兹堡' => 'Pittsburgh',
                '亚利桑那' => 'Arizona',
                '蒙特利尔' => 'Montreal',
                '多伦多' => 'Toronto',
                '温哥华' => 'Vancouver',
                '卡尔加里' => 'Calgary',
                '惠斯勒' => 'Whistler',
            ),
            
            // Diplomaticos series
            'Diplomaticos' => array(
                '忠诚' => 'Leal',
                '古巴地限' => 'Ex. Cuba',
                '迪普洛马蒂克斯2号' => 'Diplomaticos No.2',
                '迪普洛马蒂克斯二号' => 'Diplomaticos No.2',
                '2号' => 'No.2',
                '二号' => 'No.2',
                '外交官2号' => 'Diplomaticos No.2',
                '精力旺盛' => 'Inmensos',
                '不朽' => 'Inmensos',
                '顶部' => 'Topes',
                '布什贝克' => 'Bushido',
                '武士道' => 'Bushido',
                '艺术' => 'Arte',
                '艺术精通' => 'Arte',
                '艺术掌握' => 'Arte',
                '限量版' => 'Limited Edition',
                '外交官特别版' => 'Diplomaticos Especial',
                '外交官战斗机' => 'Fighters',
                '战斗机' => 'Fighters',
                '文明' => 'Civiles',
                '公民' => 'Civiles',
                '小型科罗纳' => 'Petit Coronas',
                '第4号' => 'No.4',
                '四号' => 'No.4',
                '第5号' => 'No.5',
                '五号' => 'No.5',
                '第7号' => 'No.7',
                '七号' => 'No.7',
                '工业' => 'Industry',
                '工商' => 'Industry',
                '商业' => 'Business',
                '政治' => 'Politics',
                '军事' => 'Military',
                '军队' => 'Military',
                '文化' => 'Culture',
                '科学' => 'Science',
                '体育' => 'Sports',
                '教育' => 'Education',
                '医疗' => 'Healthcare',
                '农业' => 'Agriculture',
                '外交' => 'Diplomacy',
                '外交系列' => 'Diplomacy Series',
                '世界和平' => 'World Peace',
                '国际关系' => 'International Relations',
                '联合国' => 'United Nations',
                '亚洲' => 'Asia',
                '欧洲' => 'Europe',
                '非洲' => 'Africa',
                '美洲' => 'America',
                '大洋洲' => 'Oceania',
                '环球' => 'Global',
                '世界' => 'World',
                '国际' => 'International',
                '和平' => 'Peace',
                '友谊' => 'Friendship',
                '合作' => 'Cooperation',
                '发展' => 'Development',
                '进步' => 'Progress',
                '未来' => 'Future',
                '外交官1号' => 'Diplomaticos No.1',
                '外交官3号' => 'Diplomaticos No.3',
                '外交官4号' => 'Diplomaticos No.4',
                '外交官5号' => 'Diplomaticos No.5',
                '外交官7号' => 'Diplomaticos No.7',
            ),
            
            // Rocky Patel series
            'Rocky Patel' => array(
                '15周年' => '15TH ANNIVERSARY',
                '20周年' => '20TH ANNIVERSARY', 
                '60周年' => '60TH ANNIVERSARY',
                'ALR第2版' => 'ALR 2nd Edition',
                'ALR第二版' => 'ALR 2nd Edition',
                'ALR第二' => 'ALR 2nd Edition',
                '白标' => 'White Label',
                '白色标签' => 'White Label',
                '黑标' => 'Black Label',
                '黑色标签' => 'Black Label',
                '秋季收获' => 'Autumn Collection',
                '复古' => 'Vintage',
                '老年' => 'Vintage',
                '古巴份额' => 'The Edge',
                '边缘' => 'The Edge',
                '日' => 'Sun Grown',
                '阳光培育' => 'Sun Grown',
                '太阳生长' => 'Sun Grown',
                '火种' => 'Burn',
                '燃烧' => 'Burn',
                '冬季收获' => 'Winter Collection',
                '季节' => 'Seasonal',
                '薄荷收集' => 'Summer Collection',
                '明智' => 'Wise Man',
                '智者' => 'Wise Man',
                '禁令' => 'Prohibition',
                '禁酒令' => 'Prohibition',
                '超级配额' => 'Super Ligero',
                'RP 55' => 'RP 55',
                '皇家' => 'Royale',
                '老年份' => 'Aged',
                '十年' => 'Decade',
                '十周年' => 'Decade',
                '双十周年' => 'Double Decade',
                '老年1990' => 'Vintage 1990',
                '老年1992' => 'Vintage 1992',
                '老年1999' => 'Vintage 1999',
                '老年2003' => 'Vintage 2003',
                '边缘巴西' => 'The Edge Brazil',
                '边缘康乃狄克' => 'The Edge Connecticut',
                '边缘科罗拉多' => 'The Edge Corojo',
                '边缘哈瓦那' => 'The Edge Habano',
                '边缘光明' => 'The Edge Light',
                '边缘马杜罗' => 'The Edge Maduro',
                '边缘苏门答腊' => 'The Edge Sumatra',
                '岩石边缘' => 'Rocky Edge',
                '岩石复古' => 'Rocky Vintage',
                '尼加拉瓜' => 'Nicaragua',
                '尼加拉瓜复古' => 'Nicaragua Vintage',
                '多米尼加' => 'Dominican',
                '洪都拉斯' => 'Honduras',
                '古巴混合' => 'Cuban Blend',
                '古巴混合马杜罗' => 'Cuban Blend Maduro',
                '翡翠' => 'Jade',
                '红雨' => 'Red Rain',
                '红宝石' => 'Ruby',
                '蓝宝石' => 'Sapphire',
                '钻石' => 'Diamond',
                '祖母绿' => 'Emerald',
                '黄玉' => 'Topaz',
                '紫水晶' => 'Amethyst',
                '珍珠' => 'Pearl',
                '月光石' => 'Moonstone',
                '石榴石' => 'Garnet',
                '橄榄石' => 'Peridot',
                '海蓝宝石' => 'Aquamarine',
                '欧泊' => 'Opal',
                '玛瑙' => 'Agate',
                '玉髓' => 'Chalcedony',
                '碧玉' => 'Jadeite',
                '玉石' => 'Jade',
                '翠玉' => 'Emerald Jade',
                '琥珀' => 'Amber',
                '珊瑚' => 'Coral',
                '象牙' => 'Ivory',
                '乌木' => 'Ebony',
                '硬木' => 'Hardwood',
                '枫木' => 'Maple',
                '橡木' => 'Oak',
                '桃花心木' => 'Mahogany',
                '黑檀' => 'Ebony',
                '胡桃木' => 'Walnut',
                '雪松' => 'Cedar',
                '西班牙雪松' => 'Spanish Cedar',
                '高地' => 'Highlands',
                '沿海' => 'Coastal',
                '边界' => 'Borders',
                '边缘公司' => 'Edge Corp',
                '特种部队' => 'Special Forces',
                '海军陆战队' => 'Marines',
                '海军' => 'Navy',
                '空军' => 'Air Force',
                '陆军' => 'Army',
                '警察' => 'Police',
                '消防员' => 'Firefighter',
                '急救人员' => 'EMT',
                '医生' => 'Doctor',
                '护士' => 'Nurse',
                '教师' => 'Teacher',
                '工程师' => 'Engineer',
                '律师' => 'Lawyer',
                '法官' => 'Judge',
                '建筑师' => 'Architect',
                '设计师' => 'Designer',
                '艺术家' => 'Artist',
                '音乐家' => 'Musician',
                '作家' => 'Writer',
                '演员' => 'Actor',
                '导演' => 'Director',
                '制片人' => 'Producer',
                '运动员' => 'Athlete',
                '教练' => 'Coach',
                '参议员' => 'Senator',
                '议员' => 'Representative',
            ),
            
            // Arturo Fuente series
            'Arturo Fuente' => array(
                '异常' => 'Exquisitos',
                '精致' => 'Exquisitos',
                '精品' => 'Exquisitos',
                '短故事' => 'Short Story',
                '短篇故事' => 'Short Story',
                '伟大传奇' => 'Gran Reserva',
                '大保留' => 'Gran Reserva',
                '唐巴利昂' => 'Don Carlos',
                '唐卡洛斯' => 'Don Carlos',
                '禁忌' => 'Forbidden X',
                '禁忌X' => 'Forbidden X',
                '被禁止的' => 'Forbidden X',
                '同熟' => 'Hemingway',
                '海明威' => 'Hemingway',
                '王中王' => 'King T',
                '皇帝中的皇帝' => 'King T',
                '珍珠' => 'Privada No.1',
                '私人1号' => 'Privada No.1',
                '珍藏1号' => 'Privada No.1',
                '风云人物' => 'Chateau Fuente',
                '罗易斯' => 'Royale',
                '皇家' => 'Royale',
                '太阳生长' => 'Sun Grown',
                '日晒' => 'Sun Grown',
                '阳光' => 'Sun Grown',
                '马杜罗' => 'Maduro',
                '黑色' => 'Maduro',
                '古巴日' => 'Cuban Corona',
                '古巴皇冠' => 'Cuban Corona',
                '不敢说话之家' => 'Casa Cuba',
                '古巴家园' => 'Casa Cuba',
                '失落的城市' => 'Lost City',
                '迷失之城' => 'Lost City',
                '安乐' => 'Don Arturo',
                '天国' => 'Don Arturo',
                '天堂之神' => 'God of Fire',
                '火神' => 'God of Fire',
                '恩内卡' => 'Anejo',
                '富恩特之间' => 'Between the Lines',
                '柴沟之间' => 'Between the Lines',
                '天使的分享' => 'Angel Share',
                '天使份额' => 'Angel Share',
                '不忿' => 'Opus X',
                '欧普斯X' => 'Opus X',
                'X作品' => 'Opus X',
                '魔爪' => 'Magnum R',
                '马格南R' => 'Magnum R',
                '大口径R' => 'Magnum R',
                '卡内隆' => 'Canones',
                '加农炮' => 'Canones',
                '大炮' => 'Canones',
                '屏蔽红色' => 'Royal Salute',
                '皇家礼炮' => 'Royal Salute',
                '冠军' => 'Campeons',
                '坎佩恩斯' => 'Campeons',
                '冠军塞恩斯' => 'Campeons',
                '芙恩特8-5-8' => 'Fuente 8-5-8',
                '富恩特858' => 'Fuente 858',
                '西班牙庄园' => 'Spanish Estates',
                '西班牙古堡' => 'Spanish Castles',
                '西班牙皇家' => 'Spanish Royale',
                '西班牙伯爵' => 'Spanish Count',
                '西班牙公爵' => 'Spanish Duke',
                '西班牙王子' => 'Spanish Prince',
                '西班牙国王' => 'Spanish King',
                'XXX' => 'Triple X',
                '三倍X' => 'Triple X',
                '双X' => 'Double X',
                '单X' => 'Single X',
                '古巴白金' => 'Cuban Platinum',
                '古巴金' => 'Cuban Gold',
                '古巴银' => 'Cuban Silver',
                '古巴青铜' => 'Cuban Bronze',
                '古巴特级' => 'Cuban Premium',
                '传统' => 'Tradition',
                '传统古巴' => 'Cuban Tradition',
                '传统西班牙' => 'Spanish Tradition',
                '传统多米尼加' => 'Dominican Tradition',
                '传统尼加拉瓜' => 'Nicaraguan Tradition',
                '传统洪都拉斯' => 'Honduran Tradition',
                '传统墨西哥' => 'Mexican Tradition',
                '传统巴西' => 'Brazilian Tradition',
            ),
            
            // Padron series
            'Padron' => array(
                '1964年' => '1964 Anniversary Series',
                '1926年' => '1926 Series',
                '1000系列' => '1000 Series',
                '家族珍藏' => 'Family Reserve',
                '大使' => 'Ambassador',
                '丘吉尔' => 'Churchill',
                '外交官' => 'Diplomatico',
                '执行官' => 'Executive',
                '皇家' => 'Imperial',
                '伦敦' => 'Londres',
                '大君' => 'Magnum',
                '帕德龙1号' => 'Padron #1',
                '帕德龙2号' => 'Padron #2',
                '帕德龙3号' => 'Padron #3',
                '帕德龙4号' => 'Padron #4',
                '帕德龙5号' => 'Padron #5',
                '帕德龙6号' => 'Padron #6',
                '帕德龙7号' => 'Padron #7',
                '帕德龙2000' => 'Padron 2000',
                '帕德龙3000' => 'Padron 3000',
                '帕德龙4000' => 'Padron 4000',
                '帕德龙5000' => 'Padron 5000',
                '帕德龙6000' => 'Padron 6000',
                '帕德龙7000' => 'Padron 7000',
                '帕德龙40周年' => 'Padron 40th Anniversary',
                '帕德龙45周年' => 'Padron 45th Anniversary',
                '帕德龙50周年' => 'Padron 50th Anniversary',
                '帕德龙80周年' => 'Padron 80th Anniversary',
                '帕德龙85周年' => 'Padron 85th Anniversary',
                '帕德龙90周年' => 'Padron 90th Anniversary',
                '帕德龙1964年马德罗' => 'Padron 1964 Anniversary Maduro',
                '帕德龙1964年自然' => 'Padron 1964 Anniversary Natural',
                '帕德龙1926年马德罗' => 'Padron 1926 Series Maduro',
                '帕德龙1926年自然' => 'Padron 1926 Series Natural',
                '帕德龙家族马德罗' => 'Padron Family Reserve Maduro',
                '帕德龙家族自然' => 'Padron Family Reserve Natural',
                '帕德龙80周年马德罗' => 'Padron 80th Anniversary Maduro',
                '帕德龙80周年自然' => 'Padron 80th Anniversary Natural',
                '帕德龙达米亚索' => 'Padron Damaso',
                '大使细长' => 'Embajador',
                '大使特大' => 'Ambassador Grande',
                '总督' => 'Governor',
                '州长' => 'Governor',
                '参议员' => 'Senator',
                '议员' => 'Representative',
                '法官' => 'Judge',
                '市长' => 'Mayor',
                '船长' => 'Captain',
                '将军' => 'General',
                '元帅' => 'Marshal',
                '海军上将' => 'Admiral',
                '空军上将' => 'Air Marshal',
                '陆军上将' => 'Army Marshal',
                '帕德龙黑色标签' => 'Padron Black Label',
                '帕德龙白色标签' => 'Padron White Label',
                '帕德龙1964年黑色' => 'Padron 1964 Black',
                '帕德龙1964年白色' => 'Padron 1964 White',
                '帕德龙1926年黑色' => 'Padron 1926 Black',
                '帕德龙1926年白色' => 'Padron 1926 White',
                '帕德龙家族黑色' => 'Padron Family Black',
                '帕德龙家族白色' => 'Padron Family White',
                '帕德龙传统' => 'Padron Tradition',
                '帕德龙传统马德罗' => 'Padron Tradition Maduro',
                '帕德龙传统自然' => 'Padron Tradition Natural',
                '帕德龙遗产' => 'Padron Legacy',
                '帕德龙遗产马德罗' => 'Padron Legacy Maduro',
                '帕德龙遗产自然' => 'Padron Legacy Natural',
                '帕德龙大师系列' => 'Padron Master Series',
                '帕德龙大师马德罗' => 'Padron Master Maduro',
                '帕德龙大师自然' => 'Padron Master Natural',
                '帕德龙经典系列' => 'Padron Classic Series',
                '帕德龙经典马德罗' => 'Padron Classic Maduro',
                '帕德龙经典自然' => 'Padron Classic Natural',
            ),
            
            // Oliva series
            'Oliva' => array(
                'V系列' => 'Serie V',
                'G系列' => 'Serie G',
                'O系列' => 'Serie O',
                '大师杰作' => 'Master Blends',
                '特别G' => 'Special G',
                '康涅狄格珍藏' => 'Connecticut Reserve',
                '康涅狄格克保留' => 'Connecticut Reserve',
                '尼加拉瓜' => 'Nicaragua',
                '尼加拉瓜5000' => 'Oliva 5000',
                '尼加拉瓜古巴' => 'Nicaraguan Cuban',
                'V马杜罗' => 'Serie V Maduro',
                'V特别版' => 'Serie V Special Edition',
                'V大丘吉尔' => 'Serie V Churchill',
                'V托尔贝多' => 'Serie V Torpedo',
                'V大型托尔贝多' => 'Serie V Double Torpedo',
                'V双重托尔贝多' => 'Serie V Double Torpedo',
                'V托罗' => 'Serie V Toro',
                'V罗伯托' => 'Serie V Robusto',
                'V特别G' => 'Serie V Special G',
                'V第五元素' => 'Serie V The Fifth Element',
                'V梅兰妮莫' => 'Serie V Melanio',
                'V梅兰尼奥' => 'Serie V Melanio',
                'V马德拉' => 'Serie V Maduro',
                'V垫片' => 'Serie V Filler',
                'V精神' => 'Serie V Especial',
                'V马德罗' => 'Serie V Maduro',
                'G马德罗' => 'Serie G Maduro',
                'G卡麦隆' => 'Serie G Cameroon',
                'G特别G' => 'Serie G Special G',
                'G托尔贝多' => 'Serie G Torpedo',
                'G大丘吉尔' => 'Serie G Churchill',
                'G分钟' => 'Serie G Minute',
                'G托罗' => 'Serie G Toro',
                'G罗伯托' => 'Serie G Robusto',
                'G特大号' => 'Serie G Gigante',
                'G比利科索' => 'Serie G Belicoso',
                'O马德罗' => 'Serie O Maduro',
                'O双丘吉尔' => 'Serie O Double Churchill',
                'O丘吉尔' => 'Serie O Churchill',
                'O分钟' => 'Serie O Minute',
                'O特别' => 'Serie O Especial',
                'O托尔贝多' => 'Serie O Torpedo',
                'O罗伯托' => 'Serie O Robusto',
                'O特别G' => 'Serie O Special G',
                '大师杰作1' => 'Master Blends 1',
                '大师杰作2' => 'Master Blends 2',
                '大师杰作3' => 'Master Blends 3',
                '大师杰作4' => 'Master Blends 4',
                '大师杰作5' => 'Master Blends 5',
                '大师收藏' => 'Master Collection',
                '奥利瓦1' => 'Oliva Serie 1',
                '奥利瓦2' => 'Oliva Serie 2',
                '奥利瓦3' => 'Oliva Serie 3',
                '奥利瓦4' => 'Oliva Serie 4',
                '奥利瓦5' => 'Oliva Serie 5',
                '奥利瓦传统' => 'Oliva Tradition',
                '奥利瓦经典' => 'Oliva Classic',
                '奥利瓦遗产' => 'Oliva Legacy',
                '奥利瓦尼加拉瓜' => 'Oliva Nicaragua',
                '奥利瓦尼加拉瓜' => 'Oliva Nicaragua',
                '奥利瓦康涅狄格' => 'Oliva Connecticut',
                '奥利瓦波多黎各' => 'Oliva Puerto Rico',
                '奥利瓦洪都拉斯' => 'Oliva Honduras',
                '奥利瓦多米尼加' => 'Oliva Dominican',
                '奥利瓦墨西哥' => 'Oliva Mexico',
                '奥利瓦巴西' => 'Oliva Brazil',
                '奥利瓦古巴' => 'Oliva Cuba',
                '奥利瓦哥伦比亚' => 'Oliva Colombia',
                '奥利瓦秘鲁' => 'Oliva Peru',
                '奥利瓦厄瓜多尔' => 'Oliva Ecuador',
                '奥利瓦委内瑞拉' => 'Oliva Venezuela',
                '奥利瓦巴拿马' => 'Oliva Panama',
                '奥利瓦哥斯达黎加' => 'Oliva Costa Rica',
                '奥利瓦萨尔瓦多' => 'Oliva El Salvador',
                '奥利瓦危地马拉' => 'Oliva Guatemala',
                '奥利瓦牙买加' => 'Oliva Jamaica',
                '奥利瓦海地' => 'Oliva Haiti',
            ),
        );
    }
/**
 * Normalize Chinese text for better comparison
 * Maps traditional characters to simplified, standardizes spacing,
 * and normalizes common variant forms of product names
 *
 * @param string $text The text to normalize
 * @return string Normalized text
 */
/**
 * Normalize Chinese text for better comparison
 * Maps traditional characters to simplified, standardizes spacing,
 * and normalizes common variant forms of product names
 *
 * @param string $text The text to normalize
 * @return string Normalized text
 */

/**
 * Normalize Chinese text for better comparison
 *
 * @param string $text The text to normalize
 * @return string Normalized text
 */
/**
 * Normalize Chinese text for better comparison
 *
 * @param string $text The text to normalize
 * @return string Normalized text
 */
	/**
 * Normalize Chinese text for better comparison
 *
 * @param string $text The text to normalize
 * @return string Normalized text
 */

/**
 * Normalize Chinese text for better comparison
 *
 * @param string $text The text to normalize
 * @return string Normalized text
 */
/**
 * Normalize Chinese text for better comparison
 *
 * @param string $text The text to normalize
 * @return string Normalized text
 */
/**
 * Normalize Chinese text for better comparison
 *
 * @param string $text The text to normalize
 * @return string Normalized text
 */
/**
 * Normalize Chinese text for better comparison
 *
 * @param string $text The text to normalize
 * @return string Normalized text
 */
public static function normalize_chinese_text($text) {
    if (empty($text)) {
        return "";
    }
    
    // Remove spaces between Chinese characters
    $text = preg_replace("/([\x{4e00}-\x{9fa5}])\s+([\x{4e00}-\x{9fa5}])/u", "$1$2", $text);
    
    // Process in small batches to avoid potential array parsing issues
    // Traditional to simplified - batch 1
    $text = str_replace(["號", "時", "長", "點", "節"], ["号", "时", "长", "点", "节"], $text);
    // Traditional to simplified - batch 2
    $text = str_replace(["紙", "紀", "歲", "經", "產"], ["纸", "纪", "岁", "经", "产"], $text);
    // Traditional to simplified - batch 3
    $text = str_replace(["週", "開", "過", "關", "當"], ["周", "开", "过", "关", "当"], $text);
    
    // Chinese punctuation - batch 1
    $text = str_replace(["，", "。", "、", "：", "；"], [",", ".", ",", ":", ";"], $text);
    // Chinese punctuation - batch 2
    $text = str_replace(["！", "？", "（", "）", "【"], ["!", "?", "(", ")", "["], $text);
    
    // Normalize spacing
    $text = preg_replace("/\s+/", " ", $text);
    $text = trim($text);
    
    return $text;
}


	
    /**
 * Standardize product format for consistent matching
 * Enhanced with better Chinese text normalization and more precise extraction
 * 
 * @param string $title Product title
 * @param string $dimensions Product dimensions (if available)
 * @return array Standardized product info
 */
public static function standardize_product_format($title, $dimensions = null) {
    // Normalize the title
    $normalized_title = self::normalize_chinese_text($title);
    
    $product_info = array(
        'title' => $title,
        'normalized_title' => $normalized_title,
        'brand' => null,
        'model' => null,
        'vitola' => null,
        'special_edition' => null,
        'year' => null,
        'count' => null,
        'packaging' => null,
        'dimension_info' => array(
            'ring_gauge' => null,
            'length' => null,
            'format' => null
        ),
        'keywords' => array()
    );
   // Extract brand with better accuracy
$product_info['brand'] = self::extract_brand($normalized_title);
if ($product_info['brand']) {
    $product_info['keywords'][] = $product_info['brand'];
}

// Extract series/model if brand is identified
if ($product_info['brand']) {
    $series_mappings = self::get_series_mappings();
    if (isset($series_mappings[$product_info['brand']])) {
        foreach ($series_mappings[$product_info['brand']] as $chinese => $english) {
            if (mb_stripos($normalized_title, $chinese) !== false || 
                mb_stripos($normalized_title, $english) !== false) {
                $product_info['model'] = $english;
                $product_info['keywords'][] = $chinese;
                $product_info['keywords'][] = $english;
                break;
            }
        }
    }
}
// If no specific model was found, check for general patterns
if (!$product_info['model']) {
    $model_patterns = self::get_special_mappings()['model_patterns'];
    foreach ($model_patterns as $pattern => $replacement) {
        try {
            // Use pattern directly with error suppression via @ operator
            if (@preg_match('#' . $pattern . '#u', $normalized_title, $matches)) {
                $model_name = $replacement;
                if (strpos($replacement, '$') !== false && !empty($matches[1])) {
                    // Also suppress errors here
                    $model_name = @preg_replace('#' . $pattern . '#u', $replacement, $matches[0]);
                }
                $product_info['model'] = $model_name;
                $product_info['keywords'][] = $model_name;
                break;
            }
        } catch (Exception $e) {
            // Skip this pattern if it causes an error
            continue;
        }
    }
}
    
    // Process dimensions with improved parsing
    if ($dimensions) {
        $product_info['dimension_info'] = self::parse_dimensions($dimensions);
        
        // Add dimension info to keywords
        if ($product_info['dimension_info']['ring_gauge']) {
            $product_info['keywords'][] = 'Ring: ' . $product_info['dimension_info']['ring_gauge'];
            $product_info['keywords'][] = $product_info['dimension_info']['ring_gauge'];
        }
        if ($product_info['dimension_info']['length']) {
            $product_info['keywords'][] = 'Length: ' . $product_info['dimension_info']['length'];
            $product_info['keywords'][] = $product_info['dimension_info']['length'];
        }
        if ($product_info['dimension_info']['ring_gauge'] && $product_info['dimension_info']['length']) {
            $product_info['keywords'][] = $product_info['dimension_info']['ring_gauge'] . '/' . 
                                         $product_info['dimension_info']['length'];
        }
        
        // Try to match dimensions to known vitolas
        $dimension_patterns = self::get_special_mappings()['dimension_patterns'];
        $ring_gauge = $product_info['dimension_info']['ring_gauge'];
        $length = $product_info['dimension_info']['length'];
        
        if ($ring_gauge && $length) {
            $dim_key = "{$ring_gauge}/{$length}";
            
            // Check exact match first
            if (isset($dimension_patterns[$dim_key])) {
                $product_info['vitola'] = $dimension_patterns[$dim_key];
                $product_info['keywords'][] = $dimension_patterns[$dim_key];
            } else {
                // Check pattern matches
                foreach ($dimension_patterns as $pattern => $vitola) {
                    if (preg_match('#^' . $pattern . '$#', $dim_key)) {
                        $product_info['vitola'] = $vitola;
                        $product_info['keywords'][] = $vitola;
                        break;
                    }
                }
            }
        }
    } else {
        // Try to extract dimensions from title if not provided separately
        preg_match('#(\d+)[*×x\/](\d+)(?:mm)?#u', $normalized_title, $dim_matches);
        if (!empty($dim_matches)) {
            $dim1 = intval($dim_matches[1]);
            $dim2 = intval($dim_matches[2]);
            
            // Determine which is ring gauge and which is length
            if ($dim1 < $dim2 && $dim1 >= 20 && $dim1 <= 70 && $dim2 >= 80 && $dim2 <= 210) {
                // Standard format: Ring/Length
                $product_info['dimension_info']['ring_gauge'] = $dim1;
                $product_info['dimension_info']['length'] = $dim2;
                $product_info['dimension_info']['format'] = "{$dim1}/{$dim2}";
            } else if ($dim2 < $dim1 && $dim2 >= 20 && $dim2 <= 70 && $dim1 >= 80 && $dim1 <= 210) {
                // Reversed format: Length/Ring
                $product_info['dimension_info']['ring_gauge'] = $dim2;
                $product_info['dimension_info']['length'] = $dim1;
                $product_info['dimension_info']['format'] = "{$dim2}/{$dim1}";
            }
            
            // If we found dimensions, try to match them to vitolas
            if ($product_info['dimension_info']['ring_gauge'] && $product_info['dimension_info']['length']) {
                $ring_gauge = $product_info['dimension_info']['ring_gauge'];
                $length = $product_info['dimension_info']['length'];
                $dim_key = "{$ring_gauge}/{$length}";
                
                // Add keywords for dimensions
                $product_info['keywords'][] = 'Ring: ' . $ring_gauge;
                $product_info['keywords'][] = 'Length: ' . $length;
                $product_info['keywords'][] = $ring_gauge . '/' . $length;
                
                // Try to match to a known vitola
                $dimension_patterns = self::get_special_mappings()['dimension_patterns'];
                
                // Check exact match first
                if (isset($dimension_patterns[$dim_key])) {
                    $product_info['vitola'] = $dimension_patterns[$dim_key];
                    $product_info['keywords'][] = $dimension_patterns[$dim_key];
                } else {
                   // Check pattern matches
                    foreach ($dimension_patterns as $pattern => $vitola) {
                        if (preg_match('#^' . $pattern . '$#', $dim_key)) {
                            $product_info['vitola'] = $vitola;
                            $product_info['keywords'][] = $vitola;
                            break;
                        }
                    }
                }
            }
        }
    }
    
    // Extract vitola if not already found from dimensions
    if (!$product_info['vitola']) {
        $size_mappings = self::get_size_mappings();
        
        // First check English vitola names in normalized title (case-insensitive)
        foreach ($size_mappings as $english => $chinese_terms) {
            if (mb_stripos($normalized_title, strtolower($english)) !== false) {
                $product_info['vitola'] = $english;
                $product_info['keywords'][] = $english;
                break;
            }
        }
        
        // If still not found, check Chinese terms
        if (!$product_info['vitola']) {
            foreach ($size_mappings as $english => $chinese_terms) {
                foreach ($chinese_terms as $chinese) {
                    if (mb_stripos($normalized_title, $chinese) !== false) {
                        $product_info['vitola'] = $english;
                        $product_info['keywords'][] = $chinese;
                        $product_info['keywords'][] = $english;
                        break 2;
                    }
                }
            }
        }
    }
    
    // Extract year with enhanced year extraction
    $product_info['year'] = self::extract_year($normalized_title);
    if ($product_info['year']) {
        $product_info['keywords'][] = $product_info['year'];
        if (is_numeric($product_info['year'])) {
            $product_info['keywords'][] = 'Year: ' . $product_info['year'];
            
            // Also add potential LE formats
            $product_info['keywords'][] = $product_info['year'] . ' Limited Edition';
            $product_info['keywords'][] = $product_info['year'] . 'LE';
            
            // Add short year version if it's a 4-digit year
            if (strlen($product_info['year']) == 4) {
                $short_year = substr($product_info['year'], 2, 2);
                $product_info['keywords'][] = $short_year . 'LE';
                $product_info['keywords'][] = $short_year . ' Limited Edition';
            }
        }
    }
    
    // Extract special edition info with more comprehensive patterns
    $special_editions = self::get_special_mappings()['special_editions'];
    $edition_parts = array();
    
    // Add year to edition parts if found
    if ($product_info['year'] && is_numeric($product_info['year'])) {
        $edition_parts[] = $product_info['year'];
    }
    
    // Add other special edition terms
    foreach ($special_editions as $chinese => $english) {
        if (mb_stripos($normalized_title, $chinese) !== false || 
            mb_stripos($normalized_title, $english) !== false) {
            $edition_parts[] = $english;
            $product_info['keywords'][] = $chinese;
            $product_info['keywords'][] = $english;
        }
    }
    
    // Enhanced zodiac year detection
    $zodiac_terms = array(
        'Tiger' => array('虎', 'Tiger'),
        'Dragon' => array('龙', 'Dragon'),
        'Rabbit' => array('兔', 'Rabbit'),
        'Snake' => array('蛇', 'Snake'),
        'Horse' => array('马', 'Horse'),
        'Sheep' => array('羊', 'Sheep', 'Goat'),
        'Monkey' => array('猴', 'Monkey'),
        'Rooster' => array('鸡', 'Rooster', 'Cock'),
        'Dog' => array('狗', 'Dog'),
        'Pig' => array('猪', 'Pig'),
        'Rat' => array('鼠', 'Rat', 'Mouse'),
        'Ox' => array('牛', 'Ox', 'Bull')
    );
    
    foreach ($zodiac_terms as $zodiac => $terms) {
        $found = false;
        foreach ($terms as $term) {
            // Check for Chinese zodiac with 年 suffix or English terms
            if (mb_stripos($normalized_title, $term . '年') !== false || 
                mb_stripos($normalized_title, $term) !== false) {
                $found = true;
                break;
            }
        }
        
        if ($found) {
            $zodiac_edition = 'Year of the ' . $zodiac;
            $edition_parts[] = $zodiac_edition;
            $product_info['keywords'][] = $zodiac_edition;
            $product_info['keywords'][] = $zodiac;
            
            // Add Chinese terms for better matching
            foreach ($terms as $term) {
                if (is_string($term) && preg_match('/[\x{4e00}-\x{9fa5}]/u', $term)) {
                    $product_info['keywords'][] = $term;
                    $product_info['keywords'][] = $term . '年';
                }
            }
            break;
        }
    }
    
    // Check for millennium edition with broader patterns
    if (mb_stripos($normalized_title, '千禧') !== false || 
        mb_stripos($normalized_title, 'Millennium') !== false ||
        mb_stripos($normalized_title, '2000') !== false && mb_stripos($normalized_title, '限量版') !== false) {
        $edition_parts[] = 'Millennium';
        $product_info['keywords'][] = 'Millennium';
        $product_info['keywords'][] = '千禧';
        $product_info['keywords'][] = '千禧年';
    }
    
    // Enhanced regional edition detection
    $regions = array(
        'Ex. Cuba' => array('古巴地限', 'Ex. Cuba', 'Ex Cuba', 'Exclusivo Cuba'),
        'Ex. Spain' => array('西班牙地限', 'Ex. Spain', 'Ex Spain', 'Exclusivo España'),
        'Ex. Portugal' => array('葡萄牙地限', 'Ex. Portugal', 'Ex Portugal', 'Exclusivo Portugal'),
        'Ex. Italy' => array('意大利地限', 'Ex. Italy', 'Ex Italy', 'Exclusivo Italia'),
        'Ex. Hong Kong & Macau' => array('港澳地限', '港澳地区限定', 'Ex. Hong Kong', 'Ex. Macau', 'Ex Hong Kong', 'Ex Macau'),
        'Ex. United Kingdom' => array('英国地限', 'Ex. UK', 'Ex UK', 'Exclusivo Reino Unido'),
        'Ex. Switzerland' => array('瑞士地限', 'Ex. Switzerland', 'Ex Switzerland', 'Exclusivo Suiza'),
        'Ex. Asia Pacific' => array('亚太地限', '亚太地区', 'Ex. APAC', 'Ex APAC', 'Asia Pacific'),
        'Ex. Canada' => array('加拿大地限', 'Ex. Canada', 'Ex Canada', 'Exclusivo Canada'),
        'Ex. Germany' => array('德国地限', 'Ex. Germany', 'Ex Germany', 'Exclusivo Alemania')
    );
    
    foreach ($regions as $region_name => $region_terms) {
        foreach ($region_terms as $term) {
            if (mb_stripos($normalized_title, $term) !== false) {
                $edition_parts[] = $region_name;
                $product_info['keywords'][] = $region_name;
                $product_info['keywords'][] = $term;
                break;
            }
        }
    }
    
    // Check for numbered editions
    if (mb_stripos($normalized_title, '独立编号') !== false || 
        mb_stripos($normalized_title, '编号') !== false || 
        mb_stripos($normalized_title, 'Numbered') !== false) {
        $edition_parts[] = 'Numbered';
        $product_info['keywords'][] = 'Numbered';
        $product_info['keywords'][] = '独立编号';
        $product_info['keywords'][] = '编号';
    }
    
    // Check for limited production with quantity
    if (preg_match('#全球限量(\d+)盒#u', $normalized_title, $lim_matches)) {
        $limited_prod = 'Limited Production: ' . $lim_matches[1];
        $edition_parts[] = $limited_prod;
        $product_info['keywords'][] = $limited_prod;
        $product_info['keywords'][] = 'Limited Production';
        $product_info['keywords'][] = '全球限量';
    }
    
    // Combine edition parts
    if (!empty($edition_parts)) {
        $product_info['special_edition'] = implode(' ', array_unique($edition_parts));
    }
    
    // Extract count with improved pattern matching for more formats
    if (preg_match('#(\d+)(?:支|×|x|pcs|个|count)\b#ui', $normalized_title, $count_matches)) {
        $product_info['count'] = intval($count_matches[1]);
        $product_info['keywords'][] = $count_matches[1] . '支';
        $product_info['keywords'][] = 'Count';
        $product_info['keywords'][] = $count_matches[1] . '-Count';
    }
    // Secondary count pattern for formats like (10支/盒)
    else if (preg_match('#\((\d+)支\/(?:盒|箱|管)\)#u', $normalized_title, $box_matches)) {
        $product_info['count'] = intval($box_matches[1]);
        $product_info['keywords'][] = $box_matches[1] . '支';
        $product_info['keywords'][] = 'Count';
        $product_info['keywords'][] = $box_matches[1] . '-Count';
    }
    // Tertiary count pattern for formats like 25支/盒
    else if (preg_match('#(\d+)支\/(?:盒|箱|管)#u', $normalized_title, $alt_matches)) {
        $product_info['count'] = intval($alt_matches[1]);
        $product_info['keywords'][] = $alt_matches[1] . '支';
        $product_info['keywords'][] = 'Count';
        $product_info['keywords'][] = $alt_matches[1] . '-Count';
    }
    // Quaternary count pattern for formats like "10×10支"
    else if (preg_match('#(\d+)(?:×|x)(\d+)支#u', $normalized_title, $multi_matches)) {
        $total_count = intval($multi_matches[1]) * intval($multi_matches[2]);
        $product_info['count'] = $total_count;
        $product_info['keywords'][] = $total_count . '支';
        $product_info['keywords'][] = 'Count';
        $product_info['keywords'][] = $total_count . '-Count';
    }
    
    // Extract packaging with more comprehensive terms
    $packaging_terms = self::get_special_mappings()['packaging'];
    foreach ($packaging_terms as $chinese => $english) {
        if (mb_stripos($normalized_title, $chinese) !== false || 
            mb_stripos($normalized_title, $english) !== false) {
            $product_info['packaging'] = $english;
            $product_info['keywords'][] = $chinese;
            $product_info['keywords'][] = $english;
            break;
        }
    }
    
    // Check for tube/aluminum packaging specifically with more variants
    if (mb_stripos($normalized_title, '铝管') !== false || 
        mb_stripos($normalized_title, '管装') !== false ||
        mb_stripos($normalized_title, 'tube') !== false || 
        mb_stripos($normalized_title, 'A/T') !== false || 
        mb_stripos($normalized_title, 'AT') !== false && mb_stripos($normalized_title, '@') === false) {
        $product_info['packaging'] = 'Aluminum Tube';
        $product_info['keywords'][] = 'Aluminum Tube';
        $product_info['keywords'][] = 'A/T';
        $product_info['keywords'][] = '铝管';
        $product_info['keywords'][] = '管装';
    }
    
    // Add all individual words from title to keywords
    $title_words = preg_split('/\s+/', $title);
    foreach ($title_words as $word) {
        if (mb_strlen($word) >= 3 && !in_array($word, self::$common_filter_words)) {
            $product_info['keywords'][] = $word;
        }
    }
    
    // Add individual Chinese characters that are significant
    preg_match_all('/[\x{4e00}-\x{9fa5}]/u', $title, $chinese_chars);
    if (!empty($chinese_chars[0])) {
        $significant_chars = array('皇', '冠', '雷', '矛', '长', '短', '小', '大', '年', '限', '量', '支', '盒', 
                                  '珍', '藏', '版', '周', '纪', '念', '丘', '吉', '尔', '兰', '罗', '龙', '虎', 
                                  '兔', '蛇', '特', '级', '精', '选', '世', '纪', '铝', '管', '朱', '丽', '叶');
        foreach ($chinese_chars[0] as $char) {
            if (in_array($char, $significant_chars)) {
                $product_info['keywords'][] = $char;
            }
        }
    }
    
    // Add the entire title as a keyword for exact matches
    $product_info['keywords'][] = $title;
    
    // Remove duplicates and empty keywords
    $product_info['keywords'] = array_values(array_unique(array_filter($product_info['keywords'])));
    
    return $product_info;
}
    
    /**
     * Find best matches between supplier and internal products
     * Improved to prioritize brand matches more strictly
     *
     * @param array $supplier_product Standardized supplier product info
     * @param array $internal_products Array of standardized internal product info
     * @param int $limit Maximum number of matches to return
     * @param bool $include_debug Whether to include debug information
     * @return array Best matching products with scores
     */
    public static function find_best_matches($supplier_product, $internal_products, $limit = 5, $include_debug = false) {
        $matches = array();
        $brand_matches = array(); // Separate array for brand matches
        $ring_gauge_matches = array(); // Separate array for ring gauge matches
        
        // Initialize debug log
        if ($include_debug && !defined('KT_DEBUG_INITIALIZED') && class_exists('KT_Cigar_Debug')) {
            KT_Cigar_Debug::init('', 2); // Set debug level to 2 (basic info)
            define('KT_DEBUG_INITIALIZED', true);
        }
        
        if ($include_debug && class_exists('KT_Cigar_Debug')) {
            KT_Cigar_Debug::log("Starting match search for: " . substr($supplier_product['title'], 0, 30) . "...", 2);
        }
        
        // Skip matching for pipe tobacco products against cigar catalog (and vice versa)
        if (isset($supplier_product['product_type'])) {
            // Filter internal products to match supplier product type
            $filtered_products = array();
            foreach ($internal_products as $product) {
                if (isset($product['product_type']) && $product['product_type'] === $supplier_product['product_type']) {
                    $filtered_products[] = $product;
                } elseif (!isset($product['product_type']) && $supplier_product['product_type'] === 'cigar') {
                    // Default to cigar if not specified in internal product
                    $filtered_products[] = $product;
                }
            }
			// BRAND MATCHING ENHANCEMENT: Pre-filter products by brand
if (!empty($supplier_product['brand'])) {
    $brand_filtered = array();
    $brand_mappings = self::get_brand_mappings();
    
    // Normalize supplier brand for comparison
    $supplier_brand_lc = strtolower(trim($supplier_product['brand']));
    
    // Build an array of potential brand matches using our existing mappings
    $potential_brand_matches = array($supplier_brand_lc);
    
    // Add English equivalent if supplier brand is Chinese
    foreach ($brand_mappings as $chinese => $english) {
        if (strtolower(trim($chinese)) === $supplier_brand_lc) {
            $potential_brand_matches[] = strtolower(trim($english));
            break;
        }
    }
    
    // Add Chinese equivalent if supplier brand is English
    foreach ($brand_mappings as $chinese => $english) {
        if (strtolower(trim($english)) === $supplier_brand_lc) {
            $potential_brand_matches[] = strtolower(trim($chinese));
        }
    }
    
    if ($include_debug && class_exists('KT_Cigar_Debug')) {
        KT_Cigar_Debug::log("Potential brand matches for '$supplier_brand_lc': " . 
                          implode(', ', array_unique($potential_brand_matches)), 2);
    }
    
    // Filter internal products by brand
    foreach ($internal_products as $internal_product) {
        if (empty($internal_product['brand'])) continue;
        
        $internal_brand_lc = strtolower(trim($internal_product['brand']));
        
        // Check for exact brand match or variant match
        $brand_match = false;
        foreach ($potential_brand_matches as $potential_match) {
            if ($internal_brand_lc === $potential_match || 
                stripos($internal_brand_lc, $potential_match) !== false || 
                stripos($potential_match, $internal_brand_lc) !== false) {
                $brand_match = true;
                break;
            }
        }
        
        if ($brand_match) {
            $brand_filtered[] = $internal_product;
        }
    }
    
    // Use brand-filtered products if available
    if (!empty($brand_filtered)) {
        $internal_products = $brand_filtered;
        
        if ($include_debug && class_exists('KT_Cigar_Debug')) {
            KT_Cigar_Debug::log("Applied brand filtering - reduced to " . 
                              count($internal_products) . " products", 2);
        }
    } else {
        if ($include_debug && class_exists('KT_Cigar_Debug')) {
            KT_Cigar_Debug::log("Warning: No brand matches found for supplier brand: " . 
                              $supplier_product['brand'], 1);
        }
    }
}
			
			
            
            // If we found matching product types, use only those
            if (!empty($filtered_products)) {
                $internal_products = $filtered_products;
            }
        }
        
        // Extract dimensions for pre-filtering
        $supplier_ring = isset($supplier_product['dimension_info']['ring_gauge']) ? 
                       $supplier_product['dimension_info']['ring_gauge'] : null;
        $supplier_length = isset($supplier_product['dimension_info']['length']) ? 
                         $supplier_product['dimension_info']['length'] : null;
        
       // Enhanced pre-filtering by brand and ring gauge
if ($supplier_product['brand'] || $supplier_ring) {
    $pre_filtered = array();
    $brand_filtered = array();
    $ring_filtered = array();
    
    // First filter by brand if available
    if ($supplier_product['brand']) {
        // Check if the brand name is non-Chinese
       $is_non_chinese_brand = !preg_match('/[\x{4e00}-\x{9fa5}]/u', (string)$supplier_product['brand']);
        
        foreach ($internal_products as $internal_product) {
            if (isset($internal_product['brand']) && 
                strtolower($supplier_product['brand']) === strtolower($internal_product['brand'])) {
                $brand_filtered[] = $internal_product;
            }
        }
        
        // If we have brand matches and it's a non-Chinese brand, prioritize them regardless of count
        if (count($brand_filtered) > 0 && $is_non_chinese_brand) {
            $pre_filtered = $brand_filtered;
            
            if ($include_debug && class_exists('KT_Cigar_Debug')) {
                KT_Cigar_Debug::log("Prioritizing exact non-Chinese brand matches for: " . 
                                  $supplier_product['brand'] . " (Found " . count($brand_filtered) . " matches)", 2);
            }
        }
        // Otherwise, use brand matches only if we have enough of them
        else if (count($brand_filtered) >= 3) {
            $pre_filtered = $brand_filtered;
        }
    }
            
            // Then filter by ring gauge if available
            if ($supplier_ring && is_numeric($supplier_ring)) {
                // Use brand-filtered list if available, otherwise use all products
                $base_list = !empty($brand_filtered) ? $brand_filtered : $internal_products;
                
                foreach ($base_list as $internal_product) {
                    $internal_ring = isset($internal_product['dimension_info']['ring_gauge']) ? 
                                   $internal_product['dimension_info']['ring_gauge'] : null;
                                   
                    if ($internal_ring && is_numeric($internal_ring)) {
                        $ring_diff = abs($supplier_ring - $internal_ring);
                        
                        // Add if ring gauge is within tolerance
                        if ($ring_diff <= 3) {  // Tighter tolerance
                            $ring_filtered[] = $internal_product;
                        }
                    }
                }
                
                // If we have enough ring gauge matches, use them
                if (count($ring_filtered) >= 3) {
                    $pre_filtered = $ring_filtered;
                }
            }
            
            // Use pre-filtered list if not empty
            if (!empty($pre_filtered)) {
                $internal_products = $pre_filtered;
                
                if ($include_debug && class_exists('KT_Cigar_Debug')) {
                    KT_Cigar_Debug::log("Pre-filtered to " . count($internal_products) . 
                                      " products based on brand and ring gauge", 2);
                }
            }
        }
        
        // Process each internal product to find matches
        foreach ($internal_products as $internal_product) {
            // Calculate match score using the enhanced scoring algorithm
            $match_result = self::calculate_match_score($supplier_product, $internal_product);
            
            // Only include as a potential match if score is above minimum threshold
            if ($match_result['score'] >= 30) {
                $match_data = array(
                    'product' => $internal_product,
                    'score' => round($match_result['score'], 1),
                    'match_type' => $match_result['match_type'],
                    'matched_terms' => $match_result['matched_terms'],
                    'year_match' => $match_result['year_match']
                );
                
                // Determine match category
                $is_brand_match = false;
                $is_ring_match = false;
                
                // Check for brand match
                if ((!empty($supplier_product['brand']) && !empty($internal_product['brand'])) &&
                    (strtolower(trim($supplier_product['brand'])) === strtolower(trim($internal_product['brand'])))) {
                    $is_brand_match = true;
                    $match_data['brand_match'] = true;
                }
                
                // Check for ring gauge match
                if ($supplier_ring && isset($internal_product['dimension_info']['ring_gauge'])) {
                    $internal_ring = $internal_product['dimension_info']['ring_gauge'];
                    if (abs($supplier_ring - $internal_ring) <= 2) {
                        $is_ring_match = true;
                        $match_data['ring_match'] = true;
                    }
                }
                
                // Include debug information if requested
                if ($include_debug) {
                    $match_data['debug_info'] = $match_result['debug_info'];
                }
                
                // Add to appropriate category arrays
                if ($is_brand_match && $is_ring_match && $match_data['score'] >= 75) {
                    // Highest priority: Both brand and ring gauge match
                    $match_data['priority'] = 'brand_ring';
                    $brand_matches[] = $match_data;
                } else if ($is_brand_match && $match_data['score'] >= 65) {
                    // High priority: Brand match
                    $match_data['priority'] = 'brand';
                    $brand_matches[] = $match_data;
                } else if ($is_ring_match && $match_data['score'] >= 60) {
                    // Medium priority: Ring gauge match
                    $match_data['priority'] = 'ring';
                    $ring_gauge_matches[] = $match_data;
                } else if ($match_data['score'] >= 45) {
                    // Lower threshold for non-priority matches
                    $match_data['priority'] = 'standard';
                    
                    // Boost score slightly if there are multiple keyword matches
                    if (count($match_data['matched_terms']) >= 4) {
                        $match_data['score'] += 5;
                    }
                    
                    $matches[] = $match_data;
                }
            }
        }
        
        // Sort each category by score
        usort($brand_matches, function($a, $b) {
            return $b['score'] <=> $a['score'];
        });
        
        usort($ring_gauge_matches, function($a, $b) {
            return $b['score'] <=> $a['score'];
        });
        
        usort($matches, function($a, $b) {
            return $b['score'] <=> $a['score'];
        });
        
        // Find products with significant keyword overlap but lower scores
        $keyword_matches = array();
        foreach ($matches as $key => $match) {
            // Check for significant common terminology
            $matched_terms_count = count($match['matched_terms']);
            
            // If many keywords match but score is below threshold, add to keyword matches
            if ($matched_terms_count >= 3 && $match['score'] >= 35 && $match['score'] < 45) {
                $match['score'] = max($match['score'], 45); // Boost score to visible threshold
                $match['match_type'] = 'Keyword Match';
                $match['priority'] = 'keyword';
                $keyword_matches[] = $match;
                
                // Remove from original array to avoid duplicates
                unset($matches[$key]);
            }
        }
        $matches = array_values($matches); // Reindex array after unset
        
        // Combine matches with priority: brand+ring matches first, then brand matches, then ring matches, then regular matches
        $combined_matches = array_merge($brand_matches, $ring_gauge_matches, $matches, $keyword_matches);
        
        if ($include_debug && class_exists('KT_Cigar_Debug')) {
            KT_Cigar_Debug::log("Found matches: Brand+Ring: " . count($brand_matches) . 
                              ", Ring: " . count($ring_gauge_matches) . 
                              ", Standard: " . count($matches) . 
                              ", Keyword: " . count($keyword_matches), 2);
        }
        
        // Return top matches up to limit
        return array_slice($combined_matches, 0, $limit);
    }
    
    /**
     * Optimized match score calculation with improved brand matching and score capping
     */
    public static function calculate_match_score($supplier_product, $internal_product) {
        $score = 0;
        $max_score = 0;
        $matched_terms = array();
        $debug_info = array(); // For detailed debugging
        
        // Store extracted product details
        $debug_info['extracted_supplier'] = $supplier_product;
        $debug_info['extracted_internal'] = $internal_product;
      // Brand matching (highest weight - critical)
if (!empty($supplier_product['brand']) && !empty($internal_product['brand'])) {
    $max_score += 40; // Increased weight for brand matching
    
    // Normalize both brands using the enhanced Chinese text normalization
    $supplier_brand = self::normalize_chinese_text(trim(strtolower((string)$supplier_product['brand'])));
    $internal_brand = self::normalize_chinese_text(trim(strtolower((string)$internal_product['brand'])));
    
    $debug_info['brand_comparison'] = array(
        'supplier_brand' => $supplier_brand,
        'internal_brand' => $internal_brand,
        'supplier_orig' => $supplier_product['brand'],
        'internal_orig' => $internal_product['brand']
    );
    
    // Check for exact brand match (case-insensitive and normalized)
    if ($supplier_brand === $internal_brand) {
        $score += 40;
        $matched_terms[] = $supplier_product['brand'];
        $debug_info['brand_comparison']['match'] = 'exact';
        $debug_info['brand_comparison']['points'] = 40;
    }
    // Enhanced flexible brand matching with normalization
    else {
        // Further normalize by removing all spaces and punctuation
        $normalized_supplier = preg_replace('/[.\s\'-]/', '', $supplier_brand);
        $normalized_internal = preg_replace('/[.\s\'-]/', '', $internal_brand);
        
        // Check for normalized match
        if ($normalized_supplier === $normalized_internal) {
            $score += 40;
            $matched_terms[] = 'Brand variant';
            $debug_info['brand_comparison']['match'] = 'normalized';
            $debug_info['brand_comparison']['points'] = 40;
        }
        // Check brand variants using our existing mappings
        else {
            $brand_mappings = self::get_brand_mappings();
            $supplier_variants = array();
            $internal_variants = array();
            
            // Find all Chinese variants that map to the same English brand as supplier
            foreach ($brand_mappings as $chinese => $english) {
                if (strtolower($english) === strtolower($supplier_product['brand'])) {
                    $supplier_variants[] = strtolower($chinese);
                }
                if (strtolower($english) === strtolower($internal_product['brand'])) {
                    $internal_variants[] = strtolower($chinese);
                }
            }
            
            // Find all English brands that these Chinese variants map to
            foreach ($brand_mappings as $chinese => $english) {
                if (in_array(strtolower($chinese), $supplier_variants)) {
                    $supplier_variants[] = strtolower($english);
                }
                if (in_array(strtolower($chinese), $internal_variants)) {
                    $internal_variants[] = strtolower($english);
                }
            }
            
            // Check if any variants match
            $found_variant_match = false;
            foreach ($supplier_variants as $supplier_variant) {
                foreach ($internal_variants as $internal_variant) {
                    if ($supplier_variant === $internal_variant || 
                        stripos($supplier_variant, $internal_variant) !== false ||
                        stripos($internal_variant, $supplier_variant) !== false) {
                        $score += 38; // Almost full points for variant match
                        $matched_terms[] = 'Brand variant match';
                        $debug_info['brand_comparison']['match'] = 'variant';
                        $debug_info['brand_comparison']['points'] = 38;
                        $found_variant_match = true;
                        break 2;
                    }
                }
            }
            
            // If no variant match, check for partial match
            if (!$found_variant_match) {
                if (stripos($supplier_brand, $internal_brand) !== false || 
                    stripos($internal_brand, $supplier_brand) !== false) {
                    $score += 20; // Partial match gets 20 points
                    $matched_terms[] = 'Brand (partial): ' . $supplier_product['brand'];
                    $debug_info['brand_comparison']['match'] = 'partial';
                    $debug_info['brand_comparison']['points'] = 20;
                } else {
                    $debug_info['brand_comparison']['match'] = 'none';
                    $debug_info['brand_comparison']['points'] = 0;
                }
            }
        }
    }
}
        
       // Model/series matching (high weight)
if (!empty($supplier_product['model']) && !empty($internal_product['model'])) {
    $max_score += 30; // Increased weight for model matching
    
    // Normalize models with the enhanced Chinese normalization
    $supplier_model = self::normalize_chinese_text(trim($supplier_product['model']));
    $internal_model = self::normalize_chinese_text(trim($internal_product['model']));
    
    $debug_info['model_comparison'] = array(
        'supplier_model' => $supplier_model,
        'internal_model' => $internal_model,
        'supplier_orig' => $supplier_product['model'],
        'internal_orig' => $internal_product['model']
    );
    
    // Check for exact model match (case-insensitive)
    if (strcasecmp($supplier_model, $internal_model) === 0) {
        $score += 30;
        $matched_terms[] = $supplier_product['model'];
        $debug_info['model_comparison']['match'] = 'exact';
        $debug_info['model_comparison']['points'] = 30;
    }
    // Enhanced partial matching for models
    else {
        // Try a more lenient match after removing spaces and punctuation
        $normalized_supplier = preg_replace('/[.\s\'-]/', '', strtolower($supplier_model));
        $normalized_internal = preg_replace('/[.\s\'-]/', '', strtolower($internal_model));
        
        if ($normalized_supplier === $normalized_internal) {
            $score += 28; // Almost full points for normalized match
            $matched_terms[] = $supplier_product['model'] . ' (normalized)';
            $debug_info['model_comparison']['match'] = 'normalized';
            $debug_info['model_comparison']['points'] = 28;
        } else {
            // Check specific known model variations
            $model_variations = array(
                // Siglo series
                array('Siglo I', 'Siglo 1', '世纪一', '世纪1', '世纪一号', '西格鲁一', '西格鲁1'),
                array('Siglo II', 'Siglo 2', '世纪二', '世纪2', '世纪二号', '西格鲁二', '西格鲁2'),
                array('Siglo III', 'Siglo 3', '世纪三', '世纪3', '世纪三号', '西格鲁三', '西格鲁3'),
                array('Siglo IV', 'Siglo 4', '世纪四', '世纪4', '世纪四号', '西格鲁四', '西格鲁4'),
                array('Siglo V', 'Siglo 5', '世纪五', '世纪5', '世纪五号', '西格鲁五', '西格鲁5'),
                array('Siglo VI', 'Siglo 6', '世纪六', '世纪6', '世纪六号', '西格鲁六', '西格鲁6'),
                array('Medio Siglo', '半世纪', '美地欧西格鲁'),
                
                // Behike series
                array('Behike 52', 'BHK 52', 'BHK52', '贝希克52', '贝依可52'),
                array('Behike 54', 'BHK 54', 'BHK54', '贝希克54', '贝依可54'),
                array('Behike 56', 'BHK 56', 'BHK56', '贝希克56', '贝依可56'),
                
                // Churchill variations
                array('Churchill', '丘吉尔', '邱吉尔', '丘切尔'),
                array('Short Churchill', '短丘吉尔', '短丘'),
                array('Petit Churchill', '小丘吉尔', '小丘'),
                array('Wide Churchill', '宽丘吉尔', '宽丘'),
                
                // Common vitolas
                array('Robusto', '罗布图', '罗拔图', '罗伯图', '罗布斯托'),
                array('Torpedo', 'Piramides', '鱼雷', '金字塔', '托皮多'),
                array('Corona', '皇冠', '科罗那', '科罗娜'),
                array('Petit Corona', '小皇冠', '小科罗那', '小冠'),
                array('Lancero', '长矛', '兰塞罗'),
                
                // Series numbers
                array('No. 1', 'No.1', '#1', '1号', '一号'),
                array('No. 2', 'No.2', '#2', '2号', '二号'),
                array('No. 3', 'No.3', '#3', '3号', '三号'),
                array('No. 4', 'No.4', '#4', '4号', '四号'),
                array('No. 5', 'No.5', '#5', '5号', '五号')
            );
            
            // Check for model variations
            $found_variation = false;
            foreach ($model_variations as $variation_group) {
                $supplier_matches = false;
                $internal_matches = false;
                
                foreach ($variation_group as $variant) {
                    if (stripos($supplier_model, $variant) !== false) {
                        $supplier_matches = true;
                    }
                    if (stripos($internal_model, $variant) !== false) {
                        $internal_matches = true;
                    }
                }
                
                if ($supplier_matches && $internal_matches) {
                    $score += 25; // Good points for known variations
                    $matched_terms[] = 'Model variant: ' . $variation_group[0];
                    $debug_info['model_comparison']['match'] = 'variation';
                    $debug_info['model_comparison']['matched_variant'] = $variation_group[0];
                    $debug_info['model_comparison']['points'] = 25;
                    $found_variation = true;
                    break;
                }
            }
            
            // If no known variation found, fall back to word matching
            if (!$found_variation) {
                $supp_model_words = preg_split('/\s+/', strtolower($supplier_model));
                $int_model_words = preg_split('/\s+/', strtolower($internal_model));
                
                $model_match_count = 0;
                $matched_words = array();
                
                // Chinese word match
                preg_match_all('/[\x{4e00}-\x{9fa5}]+/u', $supplier_model, $supp_chinese_words);
                preg_match_all('/[\x{4e00}-\x{9fa5}]+/u', $internal_model, $int_chinese_words);
                
                if (!empty($supp_chinese_words[0]) && !empty($int_chinese_words[0])) {
                    foreach ($supp_chinese_words[0] as $ch_word) {
                        if (in_array($ch_word, $int_chinese_words[0])) {
                            $model_match_count++;
                            $matched_words[] = $ch_word;
                        }
                    }
                }
                
                // Regular word match
                foreach ($supp_model_words as $word) {
                    if (in_array($word, $int_model_words) && strlen($word) > 2) {
                        $model_match_count++;
                        if (!in_array($word, $matched_words)) {
                            $matched_words[] = $word;
                        }
                    }
                }
                
                // Check for partial model name matches (e.g., "Churchill" in "Short Churchill")
                foreach ($supp_model_words as $supp_word) {
                    if (strlen($supp_word) < 3) continue;
                    
                    foreach ($int_model_words as $int_word) {
                        // Check if one word contains the other
                        if (strpos($supp_word, $int_word) !== false || 
                            strpos($int_word, $supp_word) !== false) {
                            if (!in_array($supp_word, $matched_words) && 
                                !in_array($int_word, $matched_words)) {
                                $model_match_count++;
                                $matched_words[] = $supp_word;
                            }
                        }
                    }
                }
                
                if ($model_match_count > 0) {
                    // Calculate total non-trivial words (filtering out short words)
                    $significant_supp_words = array_filter($supp_model_words, function($word) {
                        return mb_strlen($word) > 2;
                    });
                    $total_words = max(1, count($significant_supp_words));
                    
                    $percent_matched = min(1.0, $model_match_count / $total_words);
                    $model_score = ceil(22 * $percent_matched); // Out of possible 22 points
                    $score += $model_score;
                    
                    $debug_info['model_comparison']['match'] = 'partial';
                    $debug_info['model_comparison']['matched_words'] = $matched_words;
                    $debug_info['model_comparison']['total_significant_words'] = $total_words;
                    $debug_info['model_comparison']['percent'] = $percent_matched;
                    $debug_info['model_comparison']['points'] = $model_score;
                    
                    // Add matched words to terms
                    foreach (array_slice($matched_words, 0, 3) as $word) {
                        $matched_terms[] = $word;
                    }
                } else {
                    $debug_info['model_comparison']['match'] = 'none';
                    $debug_info['model_comparison']['points'] = 0;
                }
            }
        }
    }
}
        
       // Vitola matching (high weight)
if (!empty($supplier_product['vitola']) && !empty($internal_product['vitola'])) {
    $max_score += 20;
    
    // Normalize vitolas
    $supplier_vitola = self::normalize_chinese_text(trim($supplier_product['vitola']));
    $internal_vitola = self::normalize_chinese_text(trim($internal_product['vitola']));
    
    $debug_info['vitola_comparison'] = array(
        'supplier_vitola' => $supplier_vitola,
        'internal_vitola' => $internal_vitola,
        'supplier_orig' => $supplier_product['vitola'],
        'internal_orig' => $internal_product['vitola']
    );
    
    // Define expanded vitola synonym groups
    $vitola_synonyms = array(
        // Robusto family
        array('Robusto', 'Rothschild', '罗布图', '罗布托', '罗伯图', '罗拔图', '罗布斯托'),
        
        // Churchill family
        array('Churchill', 'Romeo', '丘吉尔', '邱吉尔', '丘切尔', '丘丘', '邱丘'),
        array('Short Churchill', '短丘吉尔', '短丘'),
        array('Petit Churchill', '小丘吉尔', '小丘'),
        array('Wide Churchill', '宽丘吉尔', '宽丘'),
        
        // Torpedo family
        array('Torpedo', 'Piramides', 'Pyramid', 'Belicoso', 'Belicosos', '鱼雷', '金字塔', '托皮多', '彪丽高', '比利高'),
        array('Petit Belicosos', '小鱼雷', '小比利高'),
        array('Piramides Extra', '特级鱼雷', '特级金字塔'),
        
        // Corona family
        array('Corona', 'Mareva', '皇冠', '科罗那', '科罗娜', '克罗那'),
        array('Petit Corona', 'Perla', 'Minutos', '小皇冠', '小科罗那', '小冠', '迷你皇冠'),
        array('Double Corona', 'Gran Corona', 'Prominente', '双皇冠', '双科罗那', '双冠'),
        array('Corona Gorda', '皇冠戈达', '胖皇冠', '科罗娜戈达', '胖科罗那'),
        array('Half Corona', 'Media Corona', '半皇冠', '半科罗那', '半冠'),
        
        // Lonsdale/Lancero
        array('Lonsdale', 'Dalias', '朗斯代尔', '长秀丽', '隆斯代尔', '朗思代尔'),
        array('Lancero', 'Panetela', '长矛', '兰塞罗', '长', '矛', '兰赛罗', '帕内特拉', '长宾丽', '宾丽'),
        array('Petit Lancero', '小长矛', '小兰塞罗'),
        
        // Small formats
        array('Petit Robusto', 'Perla', '小罗布图', '小罗布托', '小罗布'),
        array('Short Robusto', 'Petit Robusto', '短罗布图', '短罗布托', '短罗布'),
        array('Short', 'Club', 'Mini', 'Miniatures', 'Petit', 'Demi Tasse', '短', '短号', '矮', '小型', '小号', '迷你'),
        
        // Grande formats
        array('Gran Toro', 'Double Toro', '大托罗', '大公牛', '巨型托罗', '双托罗', '双公牛'),
        
        // Specific series vitolas
        array('Behike 52', 'BHK 52', '贝希克52', '贝依可52'),
        array('Behike 54', 'BHK 54', '贝希克54', '贝依可54'),
        array('Behike 56', 'BHK 56', '贝希克56', '贝依可56'),
        array('Siglo I', 'Siglo 1', '世纪一', '世纪1', '世纪一号'),
        array('Siglo II', 'Siglo 2', '世纪二', '世纪2', '世纪二号'),
        array('Siglo III', 'Siglo 3', '世纪三', '世纪3', '世纪三号'),
        array('Siglo IV', 'Siglo 4', '世纪四', '世纪4', '世纪四号'),
        array('Siglo V', 'Siglo 5', '世纪五', '世纪5', '世纪五号'),
        array('Siglo VI', 'Siglo 6', '世纪六', '世纪6', '世纪六号'),
        array('Medio Siglo', '半世纪', '美地欧西格鲁'),
        array('Genios', '天才', '大天才', '杰尼奥斯', '吉尼奥斯', '天资'),
        array('Magicos', '中天才', '魔术师'),
        array('Secretos', '秘密', '小天才', '奥秘', '塞克雷托斯', '秘'),
        array('Esplendidos', '导师', '埃斯普兰迪多'),
    );
    
    // Exact match check with case-insensitive comparison
    if (strcasecmp($supplier_vitola, $internal_vitola) === 0) {
        $score += 20;
        $matched_terms[] = $supplier_product['vitola'];
        $debug_info['vitola_comparison']['match'] = 'exact';
        $debug_info['vitola_comparison']['points'] = 20;
    }
    // Check for normalized match
    else {
        $normalized_supplier = preg_replace('/[.\s\'-]/', '', strtolower($supplier_vitola));
        $normalized_internal = preg_replace('/[.\s\'-]/', '', strtolower($internal_vitola));
        
        if ($normalized_supplier === $normalized_internal) {
            $score += 20;
            $matched_terms[] = $supplier_product['vitola'] . ' (normalized)';
            $debug_info['vitola_comparison']['match'] = 'normalized';
            $debug_info['vitola_comparison']['points'] = 20;
        }
        // Synonym check with expanded groups
        else {
            $found_synonym = false;
            foreach ($vitola_synonyms as $synonym_group) {
                $supplier_matches = false;
                $internal_matches = false;
                
                foreach ($synonym_group as $synonym) {
                    // Try more flexible matching for vitolas
                    if (stripos($supplier_vitola, $synonym) !== false || 
                        similar_text(strtolower($supplier_vitola), strtolower($synonym)) / max(strlen($supplier_vitola), strlen($synonym)) > 0.8) {
                        $supplier_matches = true;
                    }
                    
                    if (stripos($internal_vitola, $synonym) !== false || 
                        similar_text(strtolower($internal_vitola), strtolower($synonym)) / max(strlen($internal_vitola), strlen($synonym)) > 0.8) {
                        $internal_matches = true;
                    }
                }
                
                if ($supplier_matches && $internal_matches) {
                    $score += 18; // Almost full points for synonyms
                    $matched_terms[] = 'Vitola synonym: ' . $synonym_group[0];
                    $debug_info['vitola_comparison']['match'] = 'synonym';
                    $debug_info['vitola_comparison']['synonym_group'] = $synonym_group[0];
                    $debug_info['vitola_comparison']['points'] = 18;
                    $found_synonym = true;
                    break;
                }
            }
            
            // If not found as synonym, check for partial matches
            if (!$found_synonym) {
                if ((stripos($supplier_vitola, $internal_vitola) !== false) ||
                    (stripos($internal_vitola, $supplier_vitola) !== false)) {
                    $score += 15;
                    $matched_terms[] = $supplier_product['vitola'] . ' (partial match)';
                    $debug_info['vitola_comparison']['match'] = 'partial';
                    $debug_info['vitola_comparison']['points'] = 15;
                } 
                // Related vitola types (within same format family)
                else {
                    // Define related vitola groups by general shape/size
                    $vitola_groups = [
                        ['Churchill', 'Short Churchill', 'Petit Churchill', 'Wide Churchill'],
                        ['Corona', 'Petit Corona', 'Double Corona', 'Corona Gorda', 'Half Corona', 'Media Corona'],
                        ['Robusto', 'Petit Robusto', 'Wide Robusto', 'Grand Robusto', 'Double Robusto'],
                        ['Torpedo', 'Belicoso', 'Piramides', 'Piramides Extra', 'Pyramid', 'Short Torpedo'],
                        ['Lancero', 'Lonsdale', 'Panetela', 'Gran Panetela', 'Petit Lancero'],
                        ['Short', 'Club', 'Mini', 'Miniatures', 'Petit', 'Demi Tasse']
                    ];
                    
                    $found_related = false;
                    foreach ($vitola_groups as $group) {
                        $supplier_in_group = false;
                        $internal_in_group = false;
                        
                        foreach ($group as $vitola) {
                            if (stripos($supplier_vitola, $vitola) !== false) {
                                $supplier_in_group = true;
                            }
                            if (stripos($internal_vitola, $vitola) !== false) {
                                $internal_in_group = true;
                            }
                        }
                        
                        if ($supplier_in_group && $internal_in_group) {
                            $score += 12;
                            $matched_terms[] = 'Related vitola family: ' . $group[0];
                            $debug_info['vitola_comparison']['match'] = 'related';
                            $debug_info['vitola_comparison']['related_family'] = $group[0];
                            $debug_info['vitola_comparison']['points'] = 12;
                            $found_related = true;
                            break;
                        }
                    }
                    
                    if (!$found_related) {
                        $debug_info['vitola_comparison']['match'] = 'none';
                        $debug_info['vitola_comparison']['points'] = 0;
                    }
                }
            }
        }
    }
}
     // Dimension matching (ring gauge and length - critical for cigars)
if (isset($supplier_product['dimension_info']) && isset($internal_product['dimension_info'])) {
    // Calculate dimension scores only if both products have dimension info
    $supplier_dims = $supplier_product['dimension_info'];
    $internal_dims = $internal_product['dimension_info'];
    
    $max_score += 25; // Increased weight for dimensions
    $debug_info['dimension_comparison'] = array(
        'supplier' => $supplier_dims,
        'internal' => $internal_dims
    );
    
    // Only compare if both have at least some dimension data
    if (($supplier_dims['ring_gauge'] || $supplier_dims['length']) && 
        ($internal_dims['ring_gauge'] || $internal_dims['length'])) {
        
        $dimension_score = 0;
        
        // Ring gauge comparison (most important for cigar identification)
        if ($supplier_dims['ring_gauge'] && $internal_dims['ring_gauge']) {
            $ring_diff = abs($supplier_dims['ring_gauge'] - $internal_dims['ring_gauge']);
            
            if ($ring_diff == 0) {
                $dimension_score += 15; // Increased for exact match
                $matched_terms[] = 'Ring: ' . $supplier_dims['ring_gauge'];
                $debug_info['dimension_comparison']['ring_match'] = 'exact';
            } else if ($ring_diff <= 1) {
                $dimension_score += 12; // Very close (manufacturing variance)
                $matched_terms[] = 'Ring: ' . $supplier_dims['ring_gauge'] . ' (±1)';
                $debug_info['dimension_comparison']['ring_match'] = 'very close';
            } else if ($ring_diff <= 2) {
                $dimension_score += 10; // Close
                $matched_terms[] = 'Ring: ' . $supplier_dims['ring_gauge'] . ' (±2)';
                $debug_info['dimension_comparison']['ring_match'] = 'close';
            } else if ($ring_diff <= 4) {
                $dimension_score += 7; // Somewhat close
                $debug_info['dimension_comparison']['ring_match'] = 'approximate';
            } else if ($ring_diff <= 6) {
                $dimension_score += 3; // Distant but still viable
                $debug_info['dimension_comparison']['ring_match'] = 'distant';
            } else {
                // Less punitive for large differences
                $dimension_score -= 2;
                $debug_info['dimension_comparison']['ring_match'] = 'different';
            }
        }
        
        // Length comparison (less critical than ring gauge)
        if ($supplier_dims['length'] && $internal_dims['length']) {
            $length_diff = abs($supplier_dims['length'] - $internal_dims['length']);
            
            if ($length_diff == 0) {
                $dimension_score += 10; // Exact length match
                $matched_terms[] = 'Length: ' . $supplier_dims['length'];
                $debug_info['dimension_comparison']['length_match'] = 'exact';
            } else if ($length_diff <= 3) {
                $dimension_score += 8; // Very close
                $matched_terms[] = 'Length: ' . $supplier_dims['length'] . ' (±3)';
                $debug_info['dimension_comparison']['length_match'] = 'very close';
            } else if ($length_diff <= 7) {
                $dimension_score += 6; // Close
                $matched_terms[] = 'Length: ' . $supplier_dims['length'] . ' (±7)';
                $debug_info['dimension_comparison']['length_match'] = 'close';
            } else if ($length_diff <= 15) {
                $dimension_score += 3; // Somewhat close
                $debug_info['dimension_comparison']['length_match'] = 'approximate';
            } else if ($length_diff <= 25) {
                $dimension_score += 1; // Distant
                $debug_info['dimension_comparison']['length_match'] = 'distant';
            } else {
                $debug_info['dimension_comparison']['length_match'] = 'different';
            }
        }
        
        // Cap dimension score at maximum allowable points
        $dimension_score = min(25, max(-2, $dimension_score));
        
        // If exact format match, add additional bonus
        if ($supplier_dims['format'] && $internal_dims['format'] && 
            $supplier_dims['format'] === $internal_dims['format']) {
            $dimension_score = min(25, $dimension_score + 3);
            $matched_terms[] = 'Format: ' . $supplier_dims['format'];
        }
        
        // Apply dimension score
        $score += $dimension_score;
        $debug_info['dimension_comparison']['total_points'] = $dimension_score;
    }
}
        
        // Extract years and special editions for more accurate matching
        $supplier_year = null;
        $internal_year = null;
        
        // Extract years from product titles
        if (isset($supplier_product['title'])) {
            $supplier_year = self::extract_year($supplier_product['title']);
        }
        if (isset($internal_product['title'])) {
            $internal_year = self::extract_year($internal_product['title']);
        }
        
        // If no year was found, try to extract from special_edition field
        if (!$supplier_year && isset($supplier_product['special_edition'])) {
            $supplier_year = self::extract_year($supplier_product['special_edition']);
        }
        if (!$internal_year && isset($internal_product['special_edition'])) {
            $internal_year = self::extract_year($internal_product['special_edition']);
        }
        
        $debug_info['year_extraction'] = array(
            'supplier_year' => $supplier_year,
            'internal_year' => $internal_year
        );
      // Special edition matching (very important)
if (!empty($supplier_product['special_edition']) && !empty($internal_product['special_edition'])) {
    $max_score += 15;
    
    // Normalize special editions
    $supplier_edition = self::normalize_chinese_text(trim($supplier_product['special_edition']));
    $internal_edition = self::normalize_chinese_text(trim($internal_product['special_edition']));
    
    $debug_info['special_edition'] = array(
        'supplier' => $supplier_edition,
        'internal' => $internal_edition,
        'supplier_orig' => $supplier_product['special_edition'],
        'internal_orig' => $internal_product['special_edition']
    );
    
    // Exact special edition match
    if (strcasecmp($supplier_edition, $internal_edition) === 0) {
        $score += 15;
        $matched_terms[] = 'Special Edition: ' . $supplier_product['special_edition'];
        $debug_info['special_edition']['match'] = 'exact';
        $debug_info['special_edition']['points'] = 15;
    }
    // Check for year consistency in special editions
    else if ($supplier_year && $internal_year && $supplier_year === $internal_year) {
        $score += 13;
        $matched_terms[] = 'Year: ' . $supplier_year;
        $debug_info['special_edition']['match'] = 'year_match';
        $debug_info['special_edition']['points'] = 13;
    }
    // More sophisticated partial matching for special editions
    else {
        // Extended special edition terminology with Chinese equivalents
        $special_terms = array(
            'Limited Edition' => array('LE', '限量版', '限量', '限制版', '限制'),
            'Regional Edition' => array('RE', '区域版', '地区限定', '地限'),
            'Edición Limitada' => array('EL', '限量版'),
            'Reserva' => array('Reserva', '珍藏版', '珍藏'),
            'Gran Reserva' => array('GR', '特级珍藏', '特选珍藏'),
            'Anniversary' => array('Aniv', 'Anniversary', '周年', '週年', '周年纪念', '週年纪念'),
            'Commemorative' => array('Comm', '纪念版', '纪念', '紀念版', '紀念'),
            'Year of the Tiger' => array('Zodiac', '虎年'),
            'Year of the Dragon' => array('Zodiac', '龙年'),
            'Year of the Rabbit' => array('Zodiac', '兔年'),
            'Year of the Snake' => array('Zodiac', '蛇年'),
            'Year of the Horse' => array('Zodiac', '马年'),
            'Year of the Sheep' => array('Zodiac', '羊年'),
            'Year of the Monkey' => array('Zodiac', '猴年'),
            'Year of the Rooster' => array('Zodiac', '鸡年'),
            'Year of the Dog' => array('Zodiac', '狗年'),
            'Year of the Pig' => array('Zodiac', '猪年'),
            'Year of the Rat' => array('Zodiac', '鼠年'),
            'Year of the Ox' => array('Zodiac', '牛年'),
            'Selección' => array('Seleccion', '特选', '精选', '精選'),
            'Travel Retail' => array('TR', '旅行装', '旅行', '飞行家'),
            'Book Edition' => array('Book', '书本'),
            'LCDH' => array('LCDH', 'Casa del Habano', '友谊商店'),
            'Vintage' => array('Vintage', '年份', '老年份'),
            'Aged' => array('Aged', '陈年', '老年'),
            'Millennium' => array('Millennium', '千禧', '千禧年')
        );
        
        $found_terms = array();
        $found_term_weight = 0;
        
        // Check each special term group
        foreach ($special_terms as $main_term => $variants) {
            $supplier_has_term = false;
            $internal_has_term = false;
            
            // Check all variants for both supplier and internal
            foreach ($variants as $variant) {
                if (stripos($supplier_edition, $variant) !== false) {
                    $supplier_has_term = true;
                }
                if (stripos($internal_edition, $variant) !== false) {
                    $internal_has_term = true;
                }
            }
            
            // If both have the term, add it to found terms
            if ($supplier_has_term && $internal_has_term) {
                $found_terms[] = $main_term;
                
                // Give different weights to different types of special terms
                if ($main_term === 'Limited Edition' || strpos($main_term, 'Year of the') === 0) {
                    $found_term_weight += 3; // High importance
                } else if ($main_term === 'Anniversary' || $main_term === 'Regional Edition') {
                    $found_term_weight += 2.5; // Medium-high importance
                } else {
                    $found_term_weight += 2; // Standard importance
                }
            }
        }
        
        // Check for specific regional edition matches (more comprehensive)
        $regions = array(
            'Cuba' => array('Cuba', 'Cuban', '古巴', '古巴地限'),
            'Spain' => array('Spain', 'Spanish', '西班牙', '西班牙地限'),
            'Portugal' => array('Portugal', 'Portuguese', '葡萄牙', '葡萄牙地限'),
            'Italy' => array('Italy', 'Italian', '意大利', '意大利地限'),
            'UK' => array('UK', 'United Kingdom', 'Britain', 'British', '英国', '英國', '英国地限'),
            'Switzerland' => array('Switzerland', 'Swiss', '瑞士', '瑞士地限'),
            'Asia Pacific' => array('Asia Pacific', 'APAC', '亚太', '亚太地区', '亚太地限'),
            'Hong Kong' => array('Hong Kong', 'HK', '香港', '港澳', '港澳地限', '港澳地区限定'),
            'Macau' => array('Macau', 'Macao', '澳门', '澳門', '港澳', '港澳地限'),
            'Canada' => array('Canada', 'Canadian', '加拿大', '加拿大地限'),
            'Germany' => array('Germany', 'German', '德国', '德國', '德国地限')
        );
        
        foreach ($regions as $region => $variants) {
            $supplier_has_region = false;
            $internal_has_region = false;
            
            foreach ($variants as $variant) {
                if (stripos($supplier_edition, $variant) !== false) {
                    $supplier_has_region = true;
                }
                if (stripos($internal_edition, $variant) !== false) {
                    $internal_has_region = true;
                }
            }
            
            if ($supplier_has_region && $internal_has_region) {
                $found_terms[] = "Region: $region";
                $found_term_weight += 3; // Regions are very specific and important
            }
        }
        
        // Check for numbered editions
        if ((stripos($supplier_edition, 'numbered') !== false || stripos($supplier_edition, '编号') !== false || 
             stripos($supplier_edition, '独立编号') !== false) && 
            (stripos($internal_edition, 'numbered') !== false || stripos($internal_edition, '编号') !== false ||
             stripos($internal_edition, '独立编号') !== false)) {
            $found_terms[] = "Numbered";
            $found_term_weight += 2;
        }
        
        // Check for limited production
        if ((stripos($supplier_edition, 'Limited Production') !== false || stripos($supplier_edition, '全球限量') !== false) && 
            (stripos($internal_edition, 'Limited Production') !== false || stripos($internal_edition, '全球限量') !== false)) {
            $found_terms[] = "Limited Production";
            $found_term_weight += 2.5;
        }
        
        if (!empty($found_terms)) {
            // Calculate points based on term weights
            $term_points = min(15, $found_term_weight);
            $score += $term_points;
            $matched_terms[] = 'Special terms: ' . implode(', ', $found_terms);
            $debug_info['special_edition']['match'] = 'partial';
            $debug_info['special_edition']['matched_terms'] = $found_terms;
            $debug_info['special_edition']['term_weight'] = $found_term_weight;
            $debug_info['special_edition']['points'] = $term_points;
        } else {
            // Last resort - check for general word overlap
            $supplier_words = preg_split('/\s+/', trim(strtolower($supplier_edition)));
            $internal_words = preg_split('/\s+/', trim(strtolower($internal_edition)));
            
            $common_words = array_intersect($supplier_words, $internal_words);
            $meaningful_words = array_filter($common_words, function($word) {
                return strlen($word) > 3; // Only consider meaningful words
            });
            
            if (count($meaningful_words) > 0) {
                $word_points = min(8, count($meaningful_words) * 2);
                $score += $word_points;
                $matched_terms[] = 'Common edition words: ' . implode(', ', array_slice($meaningful_words, 0, 3));
                $debug_info['special_edition']['match'] = 'word_overlap';
                $debug_info['special_edition']['common_words'] = $meaningful_words;
                $debug_info['special_edition']['points'] = $word_points;
            } else {
                $debug_info['special_edition']['match'] = 'none';
                $debug_info['special_edition']['points'] = 0;
            }
        }
    }
}  
       
       // Count matching (increased weight from 5 to 10)
if (!empty($supplier_product['count']) && !empty($internal_product['count'])) {
    $max_score += 10; // Increased from 5 to 10
    
    if ($supplier_product['count'] == $internal_product['count']) {
        $score += 10; // Increased from 5 to 10
        $matched_terms[] = 'Count: ' . $supplier_product['count'];
        $debug_info['count']['match'] = 'exact';
        $debug_info['count']['points'] = 10;
    } else {
        // Add flexibility for count relationships
        if ($supplier_product['count'] % $internal_product['count'] === 0 || 
            $internal_product['count'] % $supplier_product['count'] === 0) {
            // Related counts (one is multiple of the other)
            $score += 7; // 70% of count points
            $matched_terms[] = 'Count (related): ' . $supplier_product['count'] . '/' . $internal_product['count'];
            $debug_info['count']['match'] = 'related';
            $debug_info['count']['points'] = 7;
        } else {
            // Standard count combinations
            $count_pairs = [[3, 15], [5, 10], [5, 25], [10, 50], [5, 20], [25, 50]];
            foreach ($count_pairs as $pair) {
                if (($supplier_product['count'] == $pair[0] && $internal_product['count'] == $pair[1]) ||
                    ($supplier_product['count'] == $pair[1] && $internal_product['count'] == $pair[0])) {
                    $score += 5;
                    $matched_terms[] = 'Count (standard combo): ' . $supplier_product['count'] . '/' . $internal_product['count'];
                    $debug_info['count']['match'] = 'standard_combo';
                    $debug_info['count']['points'] = 5;
                    break;
                }
            }
            
            if (!isset($debug_info['count']['match'])) {
                $debug_info['count']['match'] = 'none';
                $debug_info['count']['points'] = 0;
            }
        }
    }
}
        
        // Packaging matching (medium-low weight)
        if (!empty($supplier_product['packaging']) && !empty($internal_product['packaging'])) {
            $max_score += 5;
            $debug_info['packaging'] = array(
                'supplier' => $supplier_product['packaging'],
                'internal' => $internal_product['packaging'],
            );
            
            if (strcasecmp($supplier_product['packaging'], $internal_product['packaging']) === 0) {
                $score += 5;
                $matched_terms[] = 'Packaging: ' . $supplier_product['packaging'];
                $debug_info['packaging']['match'] = 'exact';
                $debug_info['packaging']['points'] = 5;
            } else {
                // Check for partial packaging matches
                $packaging_terms = array('Box', 'Aluminum Tube', 'Tin', 'Humidor');
                foreach ($packaging_terms as $term) {
                    if ((stripos($supplier_product['packaging'], $term) !== false) && 
                        (stripos($internal_product['packaging'], $term) !== false)) {
                        $score += 3;
                        $matched_terms[] = 'Packaging: ' . $term;
                        $debug_info['packaging']['match'] = 'partial';
                        $debug_info['packaging']['points'] = 3;
                        break;
                    }
                }
                
                if (!isset($debug_info['packaging']['match'])) {
                    $debug_info['packaging']['match'] = 'none';
                    $debug_info['packaging']['points'] = 0;
                }
            }
        }
     // Keyword matching with enhanced weighting for significant terms
if (!empty($supplier_product['keywords']) && !empty($internal_product['keywords'])) {
    $max_score += 30; // Increased maximum for keywords for more impact
    
    // Count how many keywords match
    $supplier_keywords = array_map('strtolower', $supplier_product['keywords']);
    $internal_keywords = array_map('strtolower', $internal_product['keywords']);
    
    $matching_keywords = array_intersect($supplier_keywords, $internal_keywords);
    $keyword_count = count($matching_keywords);
    
    // Categorize matches by importance
    $high_value_matches = array();
    $numeric_matches = array();
    $normal_matches = array();
    $direct_title_matches = array(); // New array for title keywords
    $brand_model_matches = array(); // Add new array for brand/model specific matches
    
    // Get high-value terms from existing special mappings
    $high_value_terms = array();
    $special_mappings = self::get_special_mappings();
    $special_editions = $special_mappings['special_editions'];
    
    // Add select high-value terms from our existing mappings
    foreach (array('Limited Edition', 'Anniversary', 'Special Edition', 'Regional Edition', 'Reserva', 'Commemorative Edition') as $key) {
        if (isset($special_editions[$key])) {
            $high_value_terms[] = $key;
            $high_value_terms[] = $special_editions[$key];
        }
    }
    
    // Add important cigar-specific terms
    foreach (array('Behike', 'Siglo', 'Robusto', 'Churchill', 'Edmundo', 'Medio Siglo') as $term) {
        $high_value_terms[] = $term;
    }
                             
    // Brand and model terms - highest priority
    $brand_model_terms = array();
    if (!empty($supplier_product['brand'])) {
        $brand_model_terms[] = strtolower($supplier_product['brand']);
    }
    if (!empty($supplier_product['model'])) {
        $brand_model_terms[] = strtolower($supplier_product['model']);
    }
    
    // Extract words directly from titles for priority matching
    $supplier_title_words = preg_split('/\s+/', strtolower($supplier_product['title']));
    $internal_title_words = preg_split('/\s+/', strtolower($internal_product['title']));
    
    // Also check full Chinese characters from title
    preg_match_all('/[\x{4e00}-\x{9fa5}]+/u', $supplier_product['title'], $supplier_chinese_words);
    preg_match_all('/[\x{4e00}-\x{9fa5}]+/u', $internal_product['title'], $internal_chinese_words);
    
    $supplier_title_words = array_merge($supplier_title_words, $supplier_chinese_words[0]);
    $internal_title_words = array_merge($internal_title_words, $internal_chinese_words[0]);
    
    foreach ($matching_keywords as $keyword) {
        // Skip extremely short or common keywords that may cause false matches
        if (mb_strlen($keyword) <= 2 && !is_numeric($keyword)) {
            continue;
        }
        
        // Check if it's a brand or model term - highest priority
        if (!empty($brand_model_terms) && in_array(strtolower($keyword), $brand_model_terms)) {
            $brand_model_matches[] = $keyword;
        }
        // Check if keyword appears directly in both titles - high priority
        else if (in_array(strtolower($keyword), $supplier_title_words) && 
            in_array(strtolower($keyword), $internal_title_words)) {
            $direct_title_matches[] = $keyword;
        }
        // Check if it's a numeric match (e.g., "55", "2021")
        else if (is_numeric($keyword) || preg_match('/^\d+[^\s]*$/u', $keyword)) {
            $numeric_matches[] = $keyword;
        }
        // Check if it's a high-value term
        else if (in_array(strtolower($keyword), array_map('strtolower', $high_value_terms)) || 
                preg_match('/^\d+周年$|^\d+th\s*Anniversary$/i', $keyword)) {
            $high_value_matches[] = $keyword;
        }
        else {
            $normal_matches[] = $keyword;
        }
    }
    
    // Calculate score with weighted categories
    if ($keyword_count > 0) {
        // Give different weights to different types of matches - brand/model getting highest
        $keyword_score = (count($normal_matches) * 1) +      // Regular terms
                       (count($numeric_matches) * 2.5) +    // Numbers are important
                       (count($high_value_matches) * 3) +    // High-value terms get high weight
                       (count($direct_title_matches) * 4) +  // Direct title matches get higher weight
                       (count($brand_model_matches) * 6);    // Brand/model matches get highest weight
        
        // Boost score based on number of matches (more matches = higher confidence)
        if ($keyword_count >= 8) {
            $keyword_score *= 1.3; // 30% boost for many matches
        } else if ($keyword_count >= 5) {
            $keyword_score *= 1.2; // 20% boost for several matches
        } else if ($keyword_count >= 3) {
            $keyword_score *= 1.1; // 10% boost for multiple matches
        }
        
        // Cap at maximum 30 points
        $keyword_score = min(30, $keyword_score);
        $score += $keyword_score;
                
                // Add up to 5 matched keywords as terms
                $keyword_sample = array_slice($matching_keywords, 0, 5);
                foreach ($keyword_sample as $keyword) {
                    if (!in_array($keyword, $matched_terms)) {
                        $matched_terms[] = $keyword;
                    }
                }
                
                $debug_info['keyword_match'] = array(
                    'count' => $keyword_count,
                    'sample' => $keyword_sample,
                    'points' => $keyword_score
                );
            } else {
                $debug_info['keyword_match'] = array(
                    'count' => 0,
                    'points' => 0
                );
            }
        }
        
        // Title similarity matching (for direct title matches)
        if (!empty($supplier_product['title']) && !empty($internal_product['title'])) {
            $max_score += 5;
            $supplier_title = strtolower(trim($supplier_product['title']));
            $internal_title = strtolower(trim($internal_product['title']));
            
            // Check for exact or near-exact title matches
            if ($supplier_title === $internal_title) {
                $score += 5;
                $matched_terms[] = 'Exact title match';
                $debug_info['title_match'] = array(
                    'match' => 'exact',
                    'points' => 5
                );
            } 
            // Check for significant title overlap
            else {
                // Calculate the Levenshtein distance (case insensitive)
                $leven_distance = levenshtein($supplier_title, $internal_title);
                $max_len = max(strlen($supplier_title), strlen($internal_title));
                
                // Calculate similarity percentage
                if ($max_len > 0) {
                    $similarity = (1 - ($leven_distance / $max_len)) * 100;
                    
                    // Only add points if similarity is significant
                    if ($similarity >= 70) {
                        $title_score = 5 * ($similarity / 100);
                        $score += $title_score;
                        $matched_terms[] = 'Similar title (' . round($similarity) . '%)';
                        $debug_info['title_match'] = array(
                            'match' => 'similar',
                            'similarity' => $similarity,
                            'points' => $title_score
                        );
                    } else {
                        $debug_info['title_match'] = array(
                            'match' => 'different',
                            'similarity' => $similarity,
                            'points' => 0
                        );
                    }
                }
            }
        }
        
        // If we have no max score (not enough data), set a default
        if ($max_score == 0) {
            $max_score = 100;
            $debug_info['max_score_adjustment'] = 'Set to default 100';
        }
        
        // Calculate final percentage score
        $percentage_score = min(100, ($score / $max_score) * 100); // Explicit cap at 100%
        $debug_info['initial_score'] = array(
            'raw_score' => $score,
            'max_score' => $max_score,
            'percentage' => $percentage_score
        );
        
        // ===== Year Matching Logic =====
        $year_match = null;
        
        // More sophisticated year matching logic with context-sensitive penalties
        // Handle year matching with more context
        if ($supplier_year && $internal_year) {
            // Skip year matching for common mismatch patterns that don't affect identity
            $skip_year_check = false;
            
            // If both products have "Limited Production" or similar
            if (is_string($supplier_year) && is_string($internal_year) && 
                (strpos($supplier_year, 'Limited Production') === 0 ||
                 strpos($internal_year, 'Limited Production') === 0)) {
                $skip_year_check = true;
            }
            
            // Skip year matching for standard vitolas that aren't year-dependent
            if (!$skip_year_check && !strpos($supplier_product['title'], 'Limited') && 
                !strpos($internal_product['title'], 'Limited') &&
                !strpos($supplier_product['title'], 'Edición') && 
                !strpos($internal_product['title'], 'Edición')) {
                $skip_year_check = true;
            }
            
            if ($skip_year_check) {
                // Neutral year match - neither bonus nor penalty
                $year_match = true; // Treat as match to avoid penalty
            }
            else if (is_numeric($supplier_year) && is_numeric($internal_year)) {
                // Both have years - compare them
                if ($supplier_year === $internal_year) {
                    // Years match - give a bonus (but cap at 100%)
                    $year_match = true;
                    $matched_terms[] = "Year: $supplier_year";
                    $bonus = min(15, $percentage_score * 0.15); // Limit bonus to 15 points maximum
                    $pre_bonus_score = $percentage_score;
                    $percentage_score = min(100, $percentage_score + $bonus); // Explicit cap at 100%
                    
                    $debug_info['year_bonus'] = array(
                        'matched' => true,
                        'year' => $supplier_year,
                        'pre_bonus_score' => $pre_bonus_score,
                        'bonus_amount' => $bonus,
                        'post_bonus_score' => $percentage_score
                    );
                } else {
                    // Years don't match - apply penalty ONLY for limited editions and similar
                    $year_match = false;
                    $pre_penalty_score = $percentage_score;
                    
                    // Check if this is a limited edition or other year-critical item
                    $is_year_critical = 
                        (stripos($supplier_product['title'], 'Limited') !== false || 
                         stripos($internal_product['title'], 'Limited') !== false ||
                         stripos($supplier_product['title'], 'Edición') !== false || 
                         stripos($internal_product['title'], 'Edición') !== false ||
                         stripos($supplier_product['title'], 'Year of') !== false || 
                         stripos($internal_product['title'], 'Year of') !== false ||
                         stripos($supplier_product['title'], 'Anniversary') !== false || 
                         stripos($internal_product['title'], 'Anniversary') !== false);
                    
                    if ($is_year_critical) {
                        // Significant penalty for year-critical items
                        $percentage_score *= 0.3; // 70% penalty
                        $debug_info['year_penalty'] = array(
                            'matched' => false,
                            'is_critical' => true,
                            'supplier_year' => $supplier_year,
                            'internal_year' => $internal_year,
                            'pre_penalty_score' => $pre_penalty_score,
                            'post_penalty_score' => $percentage_score
                        );
                    } else {
                        // Smaller penalty for non-critical items
                        $percentage_score *= 0.65; // 35% penalty
                        $debug_info['year_penalty'] = array(
                            'matched' => false,
                            'is_critical' => false,
                            'supplier_year' => $supplier_year,
                            'internal_year' => $internal_year,
                            'pre_penalty_score' => $pre_penalty_score,
                            'post_penalty_score' => $percentage_score
                        );
                    }
                    
                    // Force score below exact match threshold
                    $percentage_score = min($percentage_score, 90); // Never go above 90% with mismatched years
                }
            }
        }
        
        // Zodiac year matching (for special Chinese zodiac editions)
        if (!$year_match && isset($supplier_product['title']) && isset($internal_product['title'])) {
            $zodiac_terms = array('Tiger', 'Dragon', 'Rabbit', 'Snake', 'Horse', 'Goat', 
                                'Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox',
                                '虎', '龙', '兔', '蛇', '马', '羊', 
                                '猴', '鸡', '狗', '猪', '鼠', '牛');
            
            foreach ($zodiac_terms as $zodiac) {
                if ((mb_stripos($supplier_product['title'], $zodiac) !== false) && 
                    (mb_stripos($internal_product['title'], $zodiac) !== false)) {
                    // Both have same zodiac animal
                    $year_match = true;
                    $matched_terms[] = "Zodiac: $zodiac";
                    
                    // Apply bonus
                    $bonus = min(10, $percentage_score * 0.1);
                    $percentage_score = min(100, $percentage_score + $bonus);
                    
                    $debug_info['zodiac_bonus'] = array(
                        'zodiac' => $zodiac,
                        'bonus_amount' => $bonus,
                        'post_bonus_score' => $percentage_score
                    );
                    
                    break;
                }
            }
        }
        
        // Extract limited production quantities
        if (preg_match('#全球限量(\d+)盒#u', $supplier_product['title'], $limit_matches)) {
            $matched_terms[] = 'Limited Production';
            $matched_terms[] = 'Limited Production: ' . $limit_matches[1];
        }
        
        // Special handling for "独立编号" (numbered editions)
        if (mb_stripos($supplier_product['title'], '独立编号') !== false) {
            $matched_terms[] = 'Numbered';
        }
        
        // Check for regional editions
        $regions = array(
            '古巴地限' => 'Ex. Cuba',
            '西班牙地限' => 'Ex. Spain',
            '葡萄牙地限' => 'Ex. Portugal',
            '意大利地限' => 'Ex. Italy',
            '港澳地限' => 'Ex. Hong Kong & Macau'
        );
        
        foreach ($regions as $region_zh => $region_en) {
            if (mb_stripos($supplier_product['title'], $region_zh) !== false) {
                $matched_terms[] = $region_en;
            }
        }
        
        // Ensure score doesn't exceed 100% - Explicit final cap
        $percentage_score = min(100, $percentage_score);
        $debug_info['final_score'] = $percentage_score;
        
        // Final match type determination
        $match_type = self::determine_match_type($percentage_score, $year_match);
        $debug_info['match_type'] = $match_type;
        
        // Log this matching operation for debugging
        if (class_exists('KT_Cigar_Debug')) {
            KT_Cigar_Debug::log_match($supplier_product['title'], $internal_product['title'], $percentage_score, $match_type, $debug_info);
        }
        
        // Return optimized match information
        return array(
            'score' => $percentage_score,
            'matched_terms' => array_unique($matched_terms),
            'match_type' => $match_type,
            'year_match' => $year_match,
            'debug_info' => $debug_info
        );
    }
    
    /**
     * Enhanced match type determination with strict brand-matching requirement
     * 
     * @param float $score The match score percentage
     * @param bool|null $year_match Whether years mat
     *ch, if applicable
     * @return string The match type classification
     * */
public static function determine_match_type($score, $year_match = null) {
    // Simple, clear thresholds
    if ($score >= 90) {
        return 'Exact Match';
    } else if ($score >= 70) {
        return 'Close Match';
    } else if ($score >= 50) {
        return 'Possible Match';
    } else {
        return 'No Match';
    }
}
    
    /**
     * Detect product type from title (cigar, pipe tobacco, etc.)
     * 
     * @param string $title Product title
     * @return string Product type ('cigar', 'pipe_tobacco', or 'unknown')
     */
    public static function detect_product_type($title) {
        // Pipe tobacco indicators
        $pipe_indicators = array('叶丝', '烟丝', '丹麦混', '混合烟', 'pipe tobacco', 'mixture');
        
        foreach ($pipe_indicators as $indicator) {
            if (mb_stripos($title, $indicator) !== false) {
                return 'pipe_tobacco';
            }
        }
        
        // Check for pipe tobacco brands
        $pipe_brands = array(
            'davidoff pipe tobacco', 'peterson', 'mac baren', 'dunhill',
            'captain black', 'w.o. larsen', 'orlik', 'gawith', 'stanwell'
        );
        
        foreach ($pipe_brands as $brand) {
            if (mb_stripos($title, $brand) !== false) {
                return 'pipe_tobacco';
            }
        }
        
        // Default to cigar if no specific indicators found
        return 'cigar';
    }
    
    /**
     * Format match results for display
     * Provides detailed match information with enhanced debug data
     * 
     * @param array $match_info Match information
     * @param bool $include_debug Whether to include debugging information
     * @return string Formatted match info
     */
    public static function format_match_result($match_info, $include_debug = false) {
        $output = "";
        
        // Basic match information
        $output .= "Match Score: " . round($match_info['score'], 2) . "%\n";
        $output .= "Match Type: " . $match_info['match_type'] . "\n";
        
        if (isset($match_info['matched_terms']) && !empty($match_info['matched_terms'])) {
            $output .= "Matched terms: " . implode(', ', $match_info['matched_terms']) . "\n";
        }
       // Year match information
        if (isset($match_info['year_match'])) {
            $year_status = $match_info['year_match'] === true ? "Yes" : 
                          ($match_info['year_match'] === false ? "No" : "N/A");
            $output .= "Year Match: " . $year_status . "\n";
        }
        
        // Include detailed debug information if requested
        if ($include_debug && isset($match_info['debug_info'])) {
            $output .= "\nDebug Information:\n";
            foreach ($match_info['debug_info'] as $key => $value) {
                if (is_array($value)) {
                    $output .= "- " . ucfirst($key) . ": " . json_encode($value) . "\n";
                } else {
                    $output .= "- " . ucfirst($key) . ": " . $value . "\n";
                }
            }
        }
        
        return $output;
    }
    
    /**
     * Find matches for a product title
     * 
     * @param string $title Product title
     * @param int $limit Maximum number of matches to return
     * @return array Array of matches
     */
    public static function find_matches($title, $limit = 5) {
        // Process the supplier product
        $supplier_product = self::process_supplier_product($title);
        
        // Get internal products
        $internal_products = self::get_internal_products();
        
        // Find best matches
        $matches = self::find_best_matches($supplier_product, $internal_products, $limit);
        
        return $matches;
    }
    
    /**
     * Bidirectional match check - verify both supplier to internal and internal to supplier
     * to ensure high-quality matches
     * 
     * @param array $supplier_product Processed supplier product
     * @param array $internal_product Processed internal product
     * @return array Match validation results
     */
    public static function validate_bidirectional_match($supplier_product, $internal_product) {
        // Forward match: supplier to internal
        $forward_match = self::calculate_match_score($supplier_product, $internal_product);
        
        // Reverse match: internal to supplier (swap the order)
        $reverse_match = self::calculate_match_score($internal_product, $supplier_product);
        
        // Calculate weighted average of both scores with a slight emphasis on forward match
        $weighted_score = ($forward_match['score'] * 0.6) + ($reverse_match['score'] * 0.4);
        
        // Combine matched terms from both directions
        $combined_terms = array_unique(array_merge(
            $forward_match['matched_terms'], 
            $reverse_match['matched_terms']
        ));
        
        // Determine final match type using the weighted score
        $match_type = self::determine_match_type(
            $weighted_score, 
            $forward_match['year_match'] && $reverse_match['year_match']
        );
        
        return array(
            'score' => round($weighted_score, 1),
            'forward_score' => $forward_match['score'],
            'reverse_score' => $reverse_match['score'],
            'match_type' => $match_type,
            'matched_terms' => $combined_terms,
            'year_match' => $forward_match['year_match'] && $reverse_match['year_match'],
            'bidirectional_validated' => true
        );
    }
    
    /**
     * Primary matching function for use with WordPress hooks
     * 
     * @param string $supplier_title Supplier product title
     * @param string $dimensions Product dimensions (optional)
     * @param int $limit Maximum number of matches to return
     * @param bool $bidirectional Whether to validate matches bidirectionally
     * @return array Matching results
     */
    public static function match_product($supplier_title, $dimensions = null, $limit = 5, $bidirectional = true) {
        // Process the supplier product
        $supplier_product = self::process_supplier_product($supplier_title, $dimensions);
        
        // Get internal products
        $internal_products = self::get_internal_products();
        
        // Find best matches
        $matches = self::find_best_matches($supplier_product, $internal_products, $limit);
        
        // If bidirectional validation is requested, validate top matches
        if ($bidirectional && !empty($matches)) {
            foreach ($matches as &$match) {
                // Only validate matches with a score above minimum threshold
                if ($match['score'] >= 60) {
                    $validation = self::validate_bidirectional_match(
                        $supplier_product, 
                        $match['product']
                    );
                    
                    // Update match with validation results
                    $match['score'] = $validation['score'];
                    $match['match_type'] = $validation['match_type'];
                    $match['matched_terms'] = $validation['matched_terms'];
                    $match['bidirectional'] = array(
                        'forward_score' => $validation['forward_score'],
                        'reverse_score' => $validation['reverse_score'],
                        'validated' => true
                    );
                }
            }
            
            // Re-sort matches after validation
            usort($matches, function($a, $b) {
                return $b['score'] <=> $a['score'];
            });
        }
        
        return $matches;
    }
    
    /**
     * Batch process a list of supplier products and find matches
     * 
     * @param array $supplier_products Array of supplier products with titles and dimensions
     * @param int $limit Maximum number of matches to return per product
     * @param bool $bidirectional Whether to validate matches bidirectionally
     * @return array Array of matches for each supplier product
     */
    public static function batch_match_products($supplier_products, $limit = 5, $bidirectional = true) {
        $results = array();
        $internal_products = self::get_internal_products();
        
        foreach ($supplier_products as $index => $product) {
            $title = isset($product['title']) ? $product['title'] : '';
            $dimensions = isset($product['dimensions']) ? $product['dimensions'] : null;
            
            // Skip empty titles
            if (empty($title)) continue;
            
            // Process the supplier product
            $processed_product = self::process_supplier_product($title, $dimensions);
            
            // Find best matches
            $matches = self::find_best_matches($processed_product, $internal_products, $limit);
            
            // If bidirectional validation is requested, validate top matches
            if ($bidirectional && !empty($matches)) {
                foreach ($matches as &$match) {
                    // Only validate matches with a score above minimum threshold
                    if ($match['score'] >= 60) {
                        $validation = self::validate_bidirectional_match(
                            $processed_product, 
                            $match['product']
                        );
                        
                        // Update match with validation results
                        $match['score'] = $validation['score'];
                        $match['match_type'] = $validation['match_type'];
                        $match['matched_terms'] = $validation['matched_terms'];
                        $match['bidirectional'] = array(
                            'forward_score' => $validation['forward_score'],
                            'reverse_score' => $validation['reverse_score'],
                            'validated' => true
                        );
                    }
                }
                
                // Re-sort matches after validation
                usort($matches, function($a, $b) {
                    return $b['score'] <=> $a['score'];
                });
            }
            
            // Add results for this product
            $results[$index] = array(
                'supplier_title' => $title,
                'supplier_dimensions' => $dimensions,
                'matches' => $matches
            );
        }
        
        return $results;
    }
    
    /**
     * Export matching results to CSV format
     * 
     * @param array $batch_results Results from batch_match_products
     * @param bool $include_all_matches Whether to include all matches or just the best match
     * @return string CSV content
     */
    public static function export_matches_to_csv($batch_results, $include_all_matches = false) {
        $csv = "Supplier Title,Supplier Dimensions,Match Type,Match Score,SKU,Internal Title,Matched Terms\n";
        
        foreach ($batch_results as $result) {
            $supplier_title = str_replace('"', '""', $result['supplier_title']);
            $supplier_dimensions = str_replace('"', '""', $result['supplier_dimensions'] ?? '');
            
            if (empty($result['matches'])) {
                // No matches found
                $csv .= "\"{$supplier_title}\",\"{$supplier_dimensions}\",\"No Match\",0,\"\",\"\",\"\"\n";
            } else {
                if ($include_all_matches) {
                    // Include all matches
                    foreach ($result['matches'] as $match) {
                        $match_type = str_replace('"', '""', $match['match_type']);
                        $match_score = round($match['score'], 1);
                        $sku = str_replace('"', '""', $match['product']['product_code']);
                        $internal_title = str_replace('"', '""', $match['product']['title']);
                        $matched_terms = str_replace('"', '""', implode(', ', $match['matched_terms']));
                        
                        $csv .= "\"{$supplier_title}\",\"{$supplier_dimensions}\",\"{$match_type}\",{$match_score},\"{$sku}\",\"{$internal_title}\",\"{$matched_terms}\"\n";
                    }
                } else {
                    // Include only the best match
                    $best_match = $result['matches'][0];
                    $match_type = str_replace('"', '""', $best_match['match_type']);
                    $match_score = round($best_match['score'], 1);
                    $sku = str_replace('"', '""', $best_match['product']['product_code']);
                    $internal_title = str_replace('"', '""', $best_match['product']['title']);
                    $matched_terms = str_replace('"', '""', implode(', ', $best_match['matched_terms']));
                    
                    $csv .= "\"{$supplier_title}\",\"{$supplier_dimensions}\",\"{$match_type}\",{$match_score},\"{$sku}\",\"{$internal_title}\",\"{$matched_terms}\"\n";
                }
            }
        }
        
        return $csv;
    }
    
    /**
     * Get detailed comparison between two specific products
     * 
     * @param string $supplier_title Supplier product title
     * @param string $internal_title Internal product title
     * @param string $supplier_dimensions Supplier product dimensions (optional)
     * @param string $internal_dimensions Internal product dimensions (optional)
     * @return array Detailed comparison results
     */
    public static function compare_specific_products($supplier_title, $internal_title, $supplier_dimensions = null, $internal_dimensions = null) {
        // Process both products
        $supplier_product = self::process_supplier_product($supplier_title, $supplier_dimensions);
        
        // Create a temporary internal product structure
        $internal_product = array(
            'title' => $internal_title,
            'product_code' => 'TEMP',
            'brand' => self::extract_brand($internal_title),
            'model' => null,
            'vitola' => null,
            'special_edition' => null,
            'year' => self::extract_year($internal_title),
            'count' => null,
            'packaging' => null,
            'dimension_info' => array(
                'ring_gauge' => null,
                'length' => null,
                'format' => null
            ),
            'keywords' => self::extract_keywords($internal_title)
        );
        
        // Process dimensions if provided
        if ($internal_dimensions) {
            $internal_product['dimension_info'] = self::parse_dimensions($internal_dimensions);
        }
        
        // Extract other information from internal title
        $size_mappings = self::get_size_mappings();
        foreach ($size_mappings as $english => $chinese_terms) {
            if (stripos($internal_title, $english) !== false) {
                $internal_product['vitola'] = $english;
                $internal_product['keywords'][] = $english;
                break;
            }
        }
        
        // Get series/model if brand is identified
        if ($internal_product['brand']) {
            $series_mappings = self::get_series_mappings();
            if (isset($series_mappings[$internal_product['brand']])) {
                foreach ($series_mappings[$internal_product['brand']] as $chinese => $english) {
                    if (mb_stripos($internal_title, $english) !== false || mb_stripos($internal_title, $chinese) !== false) {
                        $internal_product['model'] = $english;
                        $internal_product['keywords'][] = $english;
                        break;
                    }
                }
            }
        }
        
        // Calculate match in both directions
        $forward_match = self::calculate_match_score($supplier_product, $internal_product);
        $reverse_match = self::calculate_match_score($internal_product, $supplier_product);
        
        // Calculate weighted score
        $weighted_score = ($forward_match['score'] * 0.6) + ($reverse_match['score'] * 0.4);
        
        // Combine matched terms
        $combined_terms = array_unique(array_merge(
            $forward_match['matched_terms'], 
            $reverse_match['matched_terms']
        ));
        
        // Determine match type
        $match_type = self::determine_match_type(
            $weighted_score, 
            $forward_match['year_match'] && $reverse_match['year_match']
        );
        
        // Compile detailed comparison
        $comparison = array(
            'supplier' => $supplier_product,
            'internal' => $internal_product,
            'forward_score' => $forward_match['score'],
            'reverse_score' => $reverse_match['score'],
            'weighted_score' => $weighted_score,
            'match_type' => $match_type,
            'matched_terms' => $combined_terms,
            'year_match' => $forward_match['year_match'] && $reverse_match['year_match'],
            'debug_info' => array(
                'forward' => $forward_match['debug_info'],
                'reverse' => $reverse_match['debug_info']
            )
        );
        
        return $comparison;
    }

    /**
     * Get all available brands in the system
     * 
     * @return array Array of brand names
     */
    public static function get_all_brands() {
        $brand_mappings = self::get_brand_mappings();
        $brands = array_unique(array_values($brand_mappings));
        sort($brands);
        return $brands;
    }
    
    /**
     * Get all available vitolas (sizes) in the system
     * 
     * @return array Array of vitola names
     */
    public static function get_all_vitolas() {
        $size_mappings = self::get_size_mappings();
        $vitolas = array_keys($size_mappings);
        sort($vitolas);
        return $vitolas;
    }
}
