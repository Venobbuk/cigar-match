/**
* Plugin Name: KT Cigar Matcher
* Description: Match supplier products to KT Cigar catalog SKUs
* Version: 1.7.0
* Author: Claude
*/

// Exit if accessed directly
if (!defined('ABSPATH')) {
   exit;
}


class KT_Cigar_Matcher {
   
   private $plugin_slug = 'ktcigar-matcher';
   private $version = '1.7.0';
   private $mapping_table = 'product_mapping';
   private $master_table = 'master_products';
   private $template_table = 'csv_templates';
   private $supplier_table = 'supplier_templates';
   
   public function __construct() {
       // Register activation hook for code snippets
       add_action('init', array($this, 'check_tables'));
       
       // Admin menu
       add_action('admin_menu', array($this, 'add_admin_menu'));
       
       // Enqueue scripts
       add_action('admin_enqueue_scripts', array($this, 'enqueue_scripts'));
       
       // AJAX actions
       add_action('wp_ajax_upload_supplier_csv', array($this, 'ajax_upload_supplier_csv'));
       add_action('wp_ajax_match_products', array($this, 'ajax_match_products'));
       add_action('wp_ajax_save_mapping', array($this, 'ajax_save_mapping'));
       add_action('wp_ajax_add_new_product', array($this, 'ajax_add_new_product'));
       add_action('wp_ajax_get_brand_products', array($this, 'ajax_get_brand_products'));
       add_action('wp_ajax_get_last_sku', array($this, 'ajax_get_last_sku'));
       add_action('wp_ajax_edit_kt_product', array($this, 'ajax_edit_kt_product'));
       add_action('wp_ajax_save_csv_template', array($this, 'ajax_save_csv_template'));
       add_action('wp_ajax_load_csv_template', array($this, 'ajax_load_csv_template'));
       add_action('wp_ajax_get_csv_templates', array($this, 'ajax_get_csv_templates'));
       add_action('wp_ajax_update_supplier_title', array($this, 'ajax_update_supplier_title'));
       add_action('wp_ajax_update_kt_product_title', array($this, 'ajax_update_kt_product_title'));
       add_action('wp_ajax_get_all_brands', array($this, 'ajax_get_all_brands'));
       add_action('wp_ajax_get_product_details', array($this, 'ajax_get_product_details'));
       add_action('wp_ajax_get_product_categories', array($this, 'ajax_get_product_categories'));
       
       // New supplier template AJAX actions
       add_action('wp_ajax_save_supplier_template', array($this, 'ajax_save_supplier_template'));
       add_action('wp_ajax_get_supplier_templates', array($this, 'ajax_get_supplier_templates'));
       add_action('wp_ajax_load_supplier_template', array($this, 'ajax_load_supplier_template'));
       add_action('wp_ajax_export_mapped_products', array($this, 'ajax_export_mapped_products'));
       add_action('wp_ajax_delete_csv_template', array($this, 'ajax_delete_csv_template'));
       add_action('wp_ajax_delete_supplier_template', array($this, 'ajax_delete_supplier_template'));
       add_action('wp_ajax_process_single_product', array($this, 'ajax_process_single_product'));
       add_action('wp_ajax_process_batch_products', array($this, 'ajax_process_batch_products'));
	   
	   add_action('wp_ajax_get_memory_usage', array($this, 'ajax_get_memory_usage'));

   }
   
   /**
    * Check and create tables if needed with optimized indexes
    */
   public function check_tables() {
       global $wpdb;
       
       // Create mapping table if it doesn't exist
       $charset_collate = $wpdb->get_charset_collate();
       $mapping_table = $wpdb->prefix . $this->mapping_table;
       
       if($wpdb->get_var("SHOW TABLES LIKE '$mapping_table'") != $mapping_table) {
           $sql = "CREATE TABLE $mapping_table (
               id mediumint(9) NOT NULL AUTO_INCREMENT,
               supplier_id varchar(255) NOT NULL,
               supplier_name varchar(255) NOT NULL DEFAULT '',
               supplier_title varchar(255) NOT NULL,
               kt_sku varchar(255) NOT NULL,
               match_confidence varchar(50) DEFAULT 'manual' NOT NULL,
               matched_terms text DEFAULT '' NOT NULL,
               created_at datetime DEFAULT CURRENT_TIMESTAMP NOT NULL,
               updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL,
               PRIMARY KEY  (id),
               UNIQUE KEY supplier_product (supplier_name, supplier_id),
               KEY kt_sku_idx (kt_sku),
               KEY supplier_name_idx (supplier_name),
               KEY match_confidence_idx (match_confidence),
               KEY supplier_title_idx (supplier_title(191))
           ) $charset_collate;";
           
           require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
           dbDelta($sql);
       } else {
           // Check if supplier_name column exists, add it if not
           $column = $wpdb->get_results($wpdb->prepare(
               "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = %s AND TABLE_NAME = %s AND COLUMN_NAME = %s",
               DB_NAME, $mapping_table, 'supplier_name'
           ));
           
           if(empty($column)) {
               $wpdb->query("ALTER TABLE $mapping_table ADD COLUMN supplier_name varchar(255) NOT NULL DEFAULT '' AFTER supplier_id");
               
               // Check if the index exists before trying to drop it
               $index_exists = $wpdb->get_var("SHOW INDEX FROM $mapping_table WHERE Key_name = 'supplier_id'");
               if ($index_exists) {
                   $wpdb->query("ALTER TABLE $mapping_table DROP INDEX supplier_id");
               }
               
               $wpdb->query("ALTER TABLE $mapping_table ADD UNIQUE KEY supplier_product (supplier_name, supplier_id)");
           }
           
           // Check if matched_terms column exists, add it if not
           $column_matched_terms = $wpdb->get_results($wpdb->prepare(
               "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = %s AND TABLE_NAME = %s AND COLUMN_NAME = %s",
               DB_NAME, $mapping_table, 'matched_terms'
           ));
           
           if(empty($column_matched_terms)) {
               $wpdb->query("ALTER TABLE $mapping_table ADD COLUMN matched_terms text DEFAULT '' NOT NULL AFTER match_confidence");
           }
           
           // Add performance indexes if they don't exist
           $this->add_index_if_not_exists($mapping_table, 'kt_sku_idx', 'kt_sku');
           $this->add_index_if_not_exists($mapping_table, 'supplier_name_idx', 'supplier_name');
           $this->add_index_if_not_exists($mapping_table, 'match_confidence_idx', 'match_confidence');
           $this->add_index_if_not_exists($mapping_table, 'supplier_title_idx', 'supplier_title(191)');
       }
       
       // Check master_table
       $master_table = $wpdb->prefix . $this->master_table;
       
       if($wpdb->get_var("SHOW TABLES LIKE '$master_table'") != $master_table) {
           $sql = "CREATE TABLE $master_table (
               id mediumint(9) NOT NULL AUTO_INCREMENT,
               sku varchar(255) NOT NULL,
               product_title varchar(255) NOT NULL,
               brand varchar(255) NOT NULL,
               product_category varchar(255) DEFAULT '' NOT NULL,
               seat_row varchar(50) DEFAULT '' NOT NULL,
               seat_number varchar(50) DEFAULT '' NOT NULL,
               seats_reference text DEFAULT '' NOT NULL,
               main_photo text DEFAULT '' NOT NULL,
               multiple_photos text DEFAULT '' NOT NULL,
               room_id int(11) DEFAULT 1 NOT NULL,
               created_at datetime DEFAULT CURRENT_TIMESTAMP NOT NULL,
               updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL,
               PRIMARY KEY (id),
               UNIQUE KEY sku (sku),
               KEY brand_idx (brand(191)),
               KEY product_category_idx (product_category(191)),
               KEY product_title_idx (product_title(191)),
               KEY seat_dimensions_idx (seat_row, seat_number),
               KEY room_id_idx (room_id)
           ) $charset_collate;";
           
           dbDelta($sql);
       } else {
           // Check if main_photo and multiple_photos fields exist
           $columns = $wpdb->get_results("SHOW COLUMNS FROM $master_table");
           $column_names = array_map(function($col) { return $col->Field; }, $columns);
           
           if (!in_array('main_photo', $column_names)) {
               $wpdb->query("ALTER TABLE $master_table ADD COLUMN main_photo TEXT DEFAULT '' NOT NULL AFTER seats_reference");
           }
           
           if (!in_array('multiple_photos', $column_names)) {
               $wpdb->query("ALTER TABLE $master_table ADD COLUMN multiple_photos TEXT DEFAULT '' NOT NULL AFTER main_photo");
           }
           
           if (!in_array('room_id', $column_names)) {
               $wpdb->query("ALTER TABLE $master_table ADD COLUMN room_id INT(11) DEFAULT 1 NOT NULL AFTER multiple_photos");
           }
           
           // Add performance indexes if they don't exist
           $this->add_index_if_not_exists($master_table, 'brand_idx', 'brand(191)');
           $this->add_index_if_not_exists($master_table, 'product_category_idx', 'product_category(191)');
           $this->add_index_if_not_exists($master_table, 'product_title_idx', 'product_title(191)');
           $this->add_index_if_not_exists($master_table, 'seat_dimensions_idx', 'seat_row, seat_number');
           $this->add_index_if_not_exists($master_table, 'room_id_idx', 'room_id');
       }
       
       // Create CSV templates table
       $template_table = $wpdb->prefix . $this->template_table;
       
       if($wpdb->get_var("SHOW TABLES LIKE '$template_table'") != $template_table) {
           $sql = "CREATE TABLE $template_table (
               id mediumint(9) NOT NULL AUTO_INCREMENT,
               template_name varchar(255) NOT NULL,
               column_mappings text NOT NULL,
               created_at datetime DEFAULT CURRENT_TIMESTAMP NOT NULL,
               updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL,
               PRIMARY KEY (id),
               UNIQUE KEY template_name (template_name)
           ) $charset_collate;";
           
           dbDelta($sql);
       }
       
       // Create supplier templates table
       $supplier_table = $wpdb->prefix . $this->supplier_table;
       
       if($wpdb->get_var("SHOW TABLES LIKE '$supplier_table'") != $supplier_table) {
           $sql = "CREATE TABLE $supplier_table (
               id mediumint(9) NOT NULL AUTO_INCREMENT,
               supplier_name varchar(255) NOT NULL,
               last_upload_date datetime DEFAULT CURRENT_TIMESTAMP NOT NULL,
               file_checksum varchar(32) NOT NULL,
               product_count int NOT NULL DEFAULT 0,
               mapped_count int NOT NULL DEFAULT 0,
               batch_size int NOT NULL DEFAULT 5,
               PRIMARY KEY (id),
               UNIQUE KEY supplier_name (supplier_name),
               KEY last_upload_date_idx (last_upload_date),
               KEY product_counts_idx (product_count, mapped_count)
           ) $charset_collate;";
           
           dbDelta($sql);
       } else {
           // Check if batch_size column exists, add it if not
           $column_batch_size = $wpdb->get_results($wpdb->prepare(
               "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = %s AND TABLE_NAME = %s AND COLUMN_NAME = %s",
               DB_NAME, $supplier_table, 'batch_size'
           ));
           
           if(empty($column_batch_size)) {
               $wpdb->query("ALTER TABLE $supplier_table ADD COLUMN batch_size int NOT NULL DEFAULT 5 AFTER mapped_count");
           }
           
           // Add performance indexes if they don't exist
           $this->add_index_if_not_exists($supplier_table, 'last_upload_date_idx', 'last_upload_date');
           $this->add_index_if_not_exists($supplier_table, 'product_counts_idx', 'product_count, mapped_count');
       }
       
       // Run OPTIMIZE TABLE commands for better performance
       $wpdb->query("OPTIMIZE TABLE $mapping_table");
       $wpdb->query("OPTIMIZE TABLE $master_table");
       $wpdb->query("OPTIMIZE TABLE $template_table");
       $wpdb->query("OPTIMIZE TABLE $supplier_table");
   }

   /**
    * Helper function to add an index if it doesn't exist
    * 
    * @param string $table Table name
    * @param string $index_name Index name
    * @param string $columns Columns to index
    * @return bool Success status
    */
   private function add_index_if_not_exists($table, $index_name, $columns) {
       global $wpdb;
       
       // Check if index exists
       $index_exists = $wpdb->get_var("SHOW INDEX FROM $table WHERE Key_name = '$index_name'");
       
       if (!$index_exists) {
           return $wpdb->query("ALTER TABLE $table ADD INDEX $index_name ($columns)");
       }
       
       return true;
   }
   
   /**
    * Add admin menu
    */
   public function add_admin_menu() {
       add_menu_page(
           'KT Cigar Matcher',
           'Cigar Matcher',
           'manage_options',
           $this->plugin_slug,
           array($this, 'display_admin_page'),
           'dashicons-networking',
           300000
       );
   }
   
   /**
    * Enqueue scripts
    */
   public function enqueue_scripts($hook) {
       // Only enqueue scripts on our plugin page
       if ($hook != 'toplevel_page_' . $this->plugin_slug) {
           return;
       }
       
       // Ensure jQuery is properly loaded first
       wp_enqueue_script('jquery');
       
       // jQuery UI for dialogs
       wp_enqueue_script('jquery-ui-dialog');
       wp_enqueue_style('wp-jquery-ui-dialog');
   }
   
   /**
    * Display admin page
    */
   public function display_admin_page() {
       ?>
       <style type="text/css">
       /* KT Cigar Matcher Styles */
           
       .sku-container, .category-container {
           display: flex;
           flex-wrap: wrap;
           align-items: center;
           gap: 10px;
       }

       #last-sku-display {
           width: 100%;
           margin-top: 8px;
           font-size: 0.9em;
           color: #666;
       }

       .category-help {
           margin-top: 5px;
           font-style: italic;
           color: #666;
       }

       #get-product-category {
           margin-left: 10px;
       }

       /* Add mobile responsiveness */
       @media (max-width: 768px) {
           .sku-container, .category-container {
               flex-direction: column;
               align-items: flex-start;
           }
           
           #get-product-category, #check-last-sku {
               margin-left: 0;
               margin-top: 5px;
           }
       }    
           
       .kt-title.editable-text {
           cursor: pointer;
           padding: 2px 5px;
           border-radius: 3px;
           transition: background-color 0.2s;
           border-bottom: 1px dashed #ccc;
       }

       .kt-title.editable-text:hover {
           background-color: #f0f8ff;
       }

       .kt-title.editable-text:hover::after {
           content: " ✎";
           color: #0073aa;
           font-size: 12px;
       }

       .inline-edit-kt-title {
           width: 100%;
           min-width: 200px;
           padding: 3px;
       }

       .save-success {
           color: #0c0;
           padding-left: 5px;
           font-weight: bold;
       }

       .editable-text-indicator {
           font-size: 0.8em;
           color: #666;
           margin-top: 3px;
           font-style: italic;
           display: block;
       }

       .search-brand-input {
           flex-grow: 1;
           min-width: 150px;
           padding: 5px;
       }


       .kt-cigar-matcher-container {
           margin-top: 20px;
       }

       .kt-cigar-matcher-section {
           background: #fff;
           border: 1px solid #ddd;
           border-radius: 4px;
           padding: 20px;
           margin-bottom: 20px;
       }

       .form-field {
           margin-bottom: 15px;
       }

       .form-field label {
           display: block;
           margin-bottom: 5px;
           font-weight: 600;
       }

       .progress-bar {
           height: 20px;
           background-color: #f1f1f1;
           border-radius: 10px;
           margin-top: 10px;
           overflow: hidden;
       }

       .progress-bar-fill {
           height: 100%;
           background-color: #2271b1;
           border-radius: 10px;
           transition: width 0.3s ease;
       }

       .matching-controls {
           display: flex;
           justify-content: space-between;
           align-items: center;
           margin-bottom: 20px;
       }

       .filter-section {
           display: flex;
           align-items: center;
           gap: 10px;
       }

       #matching-results-table {
           margin-top: 20px;
       }

       .pagination-controls {
           display: flex;
           justify-content: center;
           align-items: center;
           margin-top: 20px;
           gap: 15px;
       }

       .bulk-actions {
           margin-top: 20px;
           text-align: right;
       }

       .exact-match {
           background-color: #d4edda;
           color: #155724;
           font-weight: bold;
           padding: 3px 6px;
           border-radius: 3px;
       }

       .close-match {
           background-color: #fff3cd;
           color: #856404;
           font-weight: bold;
           padding: 3px 6px;
           border-radius: 3px;
       }

       .manual-match {
           background-color: #cce5ff;
           color: #004085;
           font-weight: bold;
           padding: 3px 6px;
           border-radius: 3px;
       }

       .no-match {
           background-color: #f8d7da;
           color: #721c24;
           font-weight: bold;
           padding: 3px 6px;
           border-radius: 3px;
       }

		   
		   .possible-match {
   background-color: #ffe8d6;
   color: #7f5539;
   font-weight: bold;
   padding: 3px 6px;
   border-radius: 3px;
}
		   
		   
       .loading-row {
           text-align: center;
           padding: 20px;
           font-style: italic;
       }

       .kt-product-select {
           width: 100%;
           max-width: 100%;
       }

       .selected-product {
           margin-top: 5px;
           padding: 5px;
           background-color: #f8f9fa;
           border-radius: 3px;
           font-size: 0.9em;
       }

       .add-product-form {
           background-color: #f8f9fa;
           border: 1px solid #ddd;
           border-radius: 4px;
           padding: 15px;
           margin-bottom: 20px;
       }

       .form-actions {
           display: flex;
           gap: 10px;
           margin-top: 15px;
       }

       #last-sku-display {
           display: inline-block;
           margin-left: 10px;
           font-style: italic;
           color: #666;
       }

       /* Add more styles for edit dialog */
       .edit-product-dialog {
           display: none;
       }

       .edit-product-form {
           padding: 10px;
       }

       .edit-product-form .form-field {
           margin-bottom: 15px;
       }

       .template-controls {
           margin-top: 10px;
           display: flex;
           gap: 10px;
           align-items: center;
       }

       .template-name-field {
           flex-grow: 1;
       }

       .template-dropdown {
           min-width: 150px;
       }

       .keyword-list {
           margin-top: 5px;
           font-size: 0.9em;
           color: #666;
       }

       .edit-icon {
           cursor: pointer;
           color: #0073aa;
           margin-left: 5px;
       }

       .edit-icon:hover {
           color: #006799;
       }

       .ui-dialog {
           z-index: 9999 !important;
       }

       .supplier-title-cell {
           position: relative;
       }

       .editable-text {
           cursor: pointer;
           padding: 2px 5px;
           border-radius: 3px;
           transition: background-color 0.2s;
       }

       .editable-text:hover {
           background-color: #f0f0f0;
       }

       .editable-text:hover::after {
           content: "✎";
           margin-left: 5px;
           color: #0073aa;
           font-size: 14px;
       }

       .inline-edit-title {
           width: 100%;
           padding: 5px;
           margin-bottom: 5px;
       }

       .search-controls {
           display: flex;
           margin-top: 5px;
           gap: 5px;
       }

       .search-brand-input {
           flex-grow: 1;
           min-width: 100px;
       }

       #items-per-page {
           margin-left: 20px;
       }

       .match-info {
           background-color: #f8f9fa;
           border-radius: 3px;
           padding: 5px;
           margin-top: 5px;
           font-size: 0.9em;
       }

       .match-score {
           font-weight: bold;
       }

       .matched-phrases {
           margin-top: 3px;
           font-style: italic;
           color: #666;
       }

       /* Add tooltip styles */
       .tooltip {
           position: relative;
           display: inline-block;
           cursor: help;
       }

       .tooltip .tooltiptext {
           visibility: hidden;
           width: 250px;
           background-color: #555;
           color: #fff;
           text-align: center;
           border-radius: 6px;
           padding: 5px;
           position: absolute;
           z-index: 1;
           bottom: 125%;
           left: 50%;
           margin-left: -125px;
           opacity: 0;
           transition: opacity 0.3s;
       }

       .tooltip:hover .tooltiptext {
           visibility: visible;
           opacity: 1;
       }

       .match-summary {
           background-color: #f0f7ff;
           padding: 10px 15px;
           border-radius: 4px;
           margin-bottom: 15px;
           border-left: 4px solid #2271b1;
       }

       .match-summary-title {
           font-weight: bold;
           margin-bottom: 5px;
       }

       .match-counter {
           display: flex;
           gap: 15px;
       }

       .match-type {
           font-weight: 500;
       }

       .match-count {
           font-weight: bold;
       }

       .brand-input-container {
           display: flex;
           gap: 10px;
           align-items: center;
       }
       
       /* New supplier template styles */
       .supplier-template-controls {
           background-color: #f0f7ff;
           padding: 15px;
           border-radius: 4px;
           margin-bottom: 20px;
           display: flex;
           flex-wrap: wrap;
           gap: 15px;
           align-items: center;
       }
       
       .supplier-dropdown {
           min-width: 200px;
       }
       
       /* Template management styles */
       .template-management-tabs {
           margin-bottom: 20px;
           border-bottom: 1px solid #ccc;
           display: flex;
           gap: 10px;
       }

       .template-tab {
           padding: 10px 15px;
           cursor: pointer;
           background-color: #f0f0f0;
           border: 1px solid #ccc;
           border-bottom: none;
           border-radius: 4px 4px 0 0;
       }

       .template-tab.active {
           background-color: #fff;
           border-bottom: 1px solid #fff;
           position: relative;
           bottom: -1px;
           font-weight: bold;
       }

       .template-tab-content {
           display: none;
           padding: 20px;
           background-color: #fff;
           border: 1px solid #ccc;
           border-top: none;
       }

       .template-tab-content.active {
           display: block;
       }

       .template-tab-content table {
           margin-top: 10px;
       }
       
       /* Image preview styles */
       .image-preview {
           margin-top: 10px;
           max-width: 200px;
       }
       
       .images-preview {
           display: flex;
           flex-wrap: wrap;
           gap: 10px;
           margin-top: 10px;
       }
       
       .images-preview img {
           max-width: 100px;
           max-height: 100px;
           border: 1px solid #ddd;
           border-radius: 4px;
           padding: 2px;
       }

       /* Batch processing styles */
       .batch-info {
           background-color: #e6f3ff;
           padding: 10px;
           border-radius: 4px;
           margin-bottom: 15px;
           border-left: 4px solid #007cba;
       }

       .batch-size-controls {
           display: flex;
           align-items: center;
           gap: 15px;
           margin: 15px 0;
       }

       .batch-size-controls label {
           font-weight: 600;
       }

       .batch-size-selector {
           padding: 5px 10px;
           border-radius: 3px;
           min-width: 80px;
       }

       .batch-log-item {
           margin-bottom: 8px;
           padding-bottom: 8px;
           border-bottom: 1px solid #eee;
       }

       .batch-log-header {
           font-weight: 600;
           color: #333;
       }

       .batch-log-details {
           margin-top: 5px;
           padding-left: 15px;
           font-size: 0.9em;
       }

       .batch-log-product {
           margin-bottom: 3px;
       }

       .batch-stats {
           margin-top: 15px;
           padding: 10px;
           background-color: #f9f9f9;
           border-radius: 4px;
       }

       .batch-stats-title {
           font-weight: 600;
           margin-bottom: 5px;
       }

       .batch-stats-content {
           display: flex;
           flex-wrap: wrap;
           gap: 15px;
       }

       .batch-stat-item {
           display: flex;
           flex-direction: column;
       }

       .batch-stat-label {
           font-size: 0.9em;
           color: #555;
       }

       .batch-stat-value {
           font-weight: 600;
           font-size: 1.1em;
       }

       /* Year tag styles */
       .year-tag {
           background-color: #e7f4ff;
           color: #0073aa;
           padding: 2px 6px;
           border-radius: 3px;
           font-weight: 600;
           font-size: 0.85em;
           display: inline-block;
           margin: 2px 4px 2px 0;
       }

       .zodiac-tag {
           background-color: #ffeee7;
           color: #d26e00;
           padding: 2px 6px;
           border-radius: 3px;
           font-weight: 600;
           font-size: 0.85em;
           display: inline-block;
           margin: 2px 4px 2px 0;
       }
       
       /* Improved matched terms display */
       .matched-terms-container {
           margin-top: 5px;
       }
       
       .matched-term {
           display: inline-block;
           background-color: #f0f7ff;
           border: 1px solid #cad7e6;
           border-radius: 3px;
           padding: 1px 6px;
           margin-right: 5px;
           margin-bottom: 5px;
           font-size: 0.85em;
       }

       /* Memory usage indicators */
       .memory-usage {
           margin-top: 10px;
           font-size: 0.9em;
           color: #666;
       }

       .memory-usage-bar {
           height: 8px;
           width: 100%;
           background-color: #f1f1f1;
           border-radius: 4px;
           margin-top: 5px;
           overflow: hidden;
       }

       .memory-usage-fill {
           height: 100%;
           background-color: #4caf50;
           border-radius: 4px;
           transition: width 0.3s ease;
       }

       .memory-usage-high .memory-usage-fill {
           background-color: #ff9800;
       }

       .memory-usage-critical .memory-usage-fill {
           background-color: #f44336;
       }

       /* Performance indicators - continued */
       .performance-info {
           margin-top: 15px;
           padding: 10px;
           background-color: #f9f9f9;
           border-radius: 4px;
           font-size: 0.9em;
       }

       .performance-metric {
           display: flex;
           justify-content: space-between;
           margin-bottom: 5px;
           padding-bottom: 5px;
           border-bottom: 1px solid #eee;
       }

       .performance-label {
           font-weight: 600;
       }

       .performance-value {
           color: #555;
       }

       .performance-good {
           color: #4caf50;
       }

       .performance-medium {
           color: #ff9800;
       }

       .performance-poor {
           color: #f44336;
       }
       </style>
       
       <div class="wrap">
           <h1><?php echo esc_html(get_admin_page_title()); ?></h1>
           
           <div class="kt-cigar-matcher-container">
               <div class="kt-cigar-matcher-section">
                   <h2>Upload Supplier CSV</h2>
                   <form id="supplier-csv-upload-form" enctype="multipart/form-data">
                       <div class="form-field">
                           <label for="supplier_csv">Select CSV File:</label>
                           <input type="file" name="supplier_csv" id="supplier_csv" accept=".csv" required>
                       </div>
                       
                       <div class="form-field">
                           <label for="supplier-name">Supplier Name:</label>
                           <input type="text" id="supplier-name" name="supplier_name" placeholder="Enter supplier name">
                       </div>
                       
                       <p>Upload the CSV file containing the supplier's cigar products.</p>
                       
                       <div class="template-controls">
                           <div class="form-field template-name-field">
                               <label for="template-name">Template Name (for saving):</label>
                               <input type="text" id="template-name" name="template_name" placeholder="Enter a name to save this CSV format">
                           </div>
                           <div class="form-field">
                               <label for="csv-template">Load Saved Template:</label>
                               <select id="csv-template" class="template-dropdown">
                                   <option value="">Select a template</option>
                               </select>
                           </div>
                       </div>
                       
                       <div class="form-field">
                           <button type="submit" class="button button-primary">Upload & Start Matching</button>
                       </div>
                   </form>
                   <div id="upload-progress" style="display: none;">
                       <p>Processing... <span id="progress-percentage">0%</span></p>
                       <div class="progress-bar">
                           <div class="progress-bar-fill" style="width: 0%"></div>
                       </div>
                   </div>
               </div>
               
               <div id="supplier-template-section" class="supplier-template-controls" style="display: none;">
                   <div class="form-field">
                       <label for="supplier-template">Load Supplier:</label>
                       <select id="supplier-template" class="supplier-dropdown">
                           <option value="">Select a supplier</option>
                       </select>
                       <button type="button" id="load-supplier-template" class="button button-secondary">Load Supplier</button>
                   </div>
                   <div class="form-field">
                       <button type="button" id="export-mapped-csv" class="button button-secondary">Export Mapped Products as CSV</button>
                   </div>
               </div>
               
               <!-- Template Management Section -->
               <div id="template-management-section" class="kt-cigar-matcher-section">
                   <h2>Template Management</h2>
                   
                   <div class="template-management-tabs">
                       <button class="template-tab active" data-tab="csv-templates">CSV Templates</button>
                       <button class="template-tab" data-tab="supplier-templates">Supplier Templates</button>
                   </div>
                   
                   <div id="csv-templates-tab" class="template-tab-content active">
                       <h3>CSV Column Templates</h3>
                       <p>These templates define how CSV columns are mapped during import.</p>
                       <table class="wp-list-table widefat fixed striped">
                           <thead>
                               <tr>
                                   <th>Template Name</th>
                                   <th>Created</th>
                                   <th>Actions</th>
                               </tr>
                           </thead>
                           <tbody id="csv-templates-body">
                               <!-- Will be populated dynamically -->
                           </tbody>
                       </table>
                   </div>
                   
                   <div id="supplier-templates-tab" class="template-tab-content">
                       <h3>Supplier Mapping Templates</h3>
                       <p>These templates store the mappings between supplier products and your catalog.</p>
                       <table class="wp-list-table widefat fixed striped">
                           <thead>
                               <tr>
                                   <th>Supplier Name</th>
                                   <th>Last Updated</th>
                                   <th>Products</th>
                                   <th>Mapped</th>
                                   <th>Actions</th>
                               </tr>
                           </thead>
                           <tbody id="supplier-templates-body">
                               <!-- Will be populated dynamically -->
                           </tbody>
                       </table>
                   </div>
               </div>
               
               <div id="matching-results-container" class="kt-cigar-matcher-section" style="display: none;">
                   <h2>Matching Results</h2>
                   
                   <!-- Match Summary Counter -->
                   <div id="match-summary" class="match-summary">
                       <div class="match-summary-title">Match Summary</div>
                       <div class="match-counter">
                           <div><span class="match-type">Exact Matches:</span> <span class="match-count exact-count">0</span></div>
                           <div><span class="match-type">Close Matches:</span> <span class="match-count close-count">0</span></div>
                          <div><span class="match-type">Manual Matches:</span> <span class="match-count manual-count">0</span></div>
                           <div><span class="match-type">No Matches:</span> <span class="match-count no-count">0</span></div>
                           <div><span class="match-type">Total:</span> <span class="match-count total-count">0</span></div>
                       </div>
                   </div>
                   
                   <div id="progressive-matching-container" class="kt-cigar-matcher-section">
                       <h2>Process Products in Batches</h2>
                       <p>This method processes products in batches to avoid timeouts and improve performance.</p>
                       
                       <div class="batch-info">
                           <p>Processing in batches allows for more reliable matching and better performance. Adjust the batch size based on your server capability.</p>
                       </div>
                       
                       <div class="batch-size-controls">
                           <label for="batch-size">Batch Size:</label>
                           <select id="batch-size" class="batch-size-selector">
                               <option value="1">1 product</option>
                               <option value="5" selected>5 products</option>
                               <option value="10">10 products</option>
                               <option value="20">20 products</option>
                               <option value="50">50 products</option>
                           </select>
                           <div class="batch-size-info">
                               <span class="tooltip">
                                   ℹ️ Batch Size Info
                                   <span class="tooltiptext">Larger batch sizes process more products at once but may cause timeouts on slower servers. Start with 5 and adjust as needed.</span>
                               </span>
                           </div>
                       </div>
                       
                       <div class="progress-container">
                           <div class="progress-bar">
                               <div id="progress-bar-fill" class="progress-bar-fill" style="width: 0%"></div>
                           </div>
                           <div id="progress-status">Ready to start (0 of 0 products processed)</div>
                       </div>
                       
                       <div class="progress-actions">
                           <button id="start-processing" class="button button-primary">Start Processing</button>
                           <button id="pause-processing" class="button button-secondary" style="display: none;">Pause</button>
                           <button id="resume-processing" class="button button-secondary" style="display: none;">Resume</button>
                       </div>
                       
                       <div class="batch-stats" style="display: none;">
                           <div class="batch-stats-title">Processing Statistics</div>
                           <div class="batch-stats-content">
                               <div class="batch-stat-item">
                                   <span class="batch-stat-label">Avg. Time per Batch</span>
                                   <span class="batch-stat-value" id="avg-batch-time">0.00s</span>
                               </div>
                               <div class="batch-stat-item">
                                   <span class="batch-stat-label">Exact Matches</span>
                                   <span class="batch-stat-value" id="batch-exact-matches">0</span>
                               </div>
                               <div class="batch-stat-item">
                                   <span class="batch-stat-label">Close Matches</span>
                                   <span class="batch-stat-value" id="batch-close-matches">0</span>
                               </div>
                               <div class="batch-stat-item">
                                   <span class="batch-stat-label">No Matches</span>
                                   <span class="batch-stat-value" id="batch-no-matches">0</span>
                               </div>
                               <div class="batch-stat-item">
                                   <span class="batch-stat-label">Est. Time Remaining</span>
                                   <span class="batch-stat-value" id="est-time-remaining">--:--</span>
                               </div>
                           </div>
                       </div>
                       
                       <div class="memory-usage">
                           <div>Memory Usage: <span id="memory-used">0</span>MB / <span id="memory-limit">0</span>MB</div>
                           <div class="memory-usage-bar">
                               <div id="memory-usage-fill" class="memory-usage-fill" style="width: 0%"></div>
                           </div>
                       </div>
                       
                       <div id="processing-log" style="margin-top: 20px; max-height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 10px;">
                           <div>Processing Log:</div>
                       </div>
                   </div>
                   
                   <div class="matching-controls">
                       <div class="filter-section">
                           <label for="brand-filter">Filter by Brand:</label>
                           <select id="brand-filter">
                               <option value="">All Brands</option>
                           </select>
                           <label for="match-status-filter">Match Status:</label>
                          <select id="match-status-filter">
   <option value="">All</option>
   <option value="exact">Exact Matches</option>
   <option value="close">Close Matches</option>
   <option value="possible">Possible Matches</option>
   <option value="none">No Matches</option>
   <option value="manual">Manually Matched</option>
</select>
                           
						   
						   <label for="year-filter">Year:</label>
                           <select id="year-filter">
                               <option value="">All Years</option>
                               <!-- Will be populated dynamically -->
                           </select>
                           <button id="refresh-matches" class="button button-secondary">Refresh Matches</button>
                       </div>
                       <div class="add-product-section">
                           <button id="add-new-product-btn" class="button button-primary">Add New Product</button>
                       </div>
                   </div>
                   
                 <div id="add-product-form" class="add-product-form" style="display: none;">
                   <h3>Add New Product</h3>
                   <div class="form-field">
                       <label for="new-product-brand">Brand:</label>
                       <div class="brand-input-container">
                           <input type="text" id="new-product-brand" name="brand" list="brand-datalist" required>
                           <datalist id="brand-datalist"></datalist>
                           <button type="button" id="refresh-brands" class="button button-secondary">Refresh Brands</button>
                       </div>
                   </div>
                   <div class="form-field">
                       <label for="new-product-title">Product Title:</label>
                       <input type="text" id="new-product-title" name="product_title" required>
                   </div>
                   <div class="form-field">
                       <label for="new-product-sku">SKU:</label>
                       <div class="sku-container">
                           <input type="text" id="new-product-sku" name="sku" required>
                           <button id="check-last-sku" class="button button-secondary">Get Last SKU for Brand</button>
                           <div id="last-sku-display"></div>
                       </div>
                   </div>
                   <div class="form-field">
                       <label for="new-product-category">Category:</label>
                       <div class="category-container">
                           <select id="new-product-category" name="product_category">
                               <option value="">Select a category</option>
                           </select>
                           <button type="button" id="get-product-category" class="button button-secondary">Get Categories from Database</button>
                       </div>
                       <div class="category-help">Click the button to load categories from the database.</div>
                   </div>
                   <div class="form-field">
                       <label for="new-product-room-id">Room ID:</label>
                       <select id="new-product-room-id" name="room_id">
                           <option value="1" selected>Room ID: 1</option>
                           <option value="2">Room ID: 2</option>
                           <option value="3">Room ID: 3</option>
                           <option value="4">Room ID: 4</option>
                       </select>
                   </div>
                   <div class="form-field">
                       <label for="new-product-seat-row">Ring Size:</label>
                       <input type="text" id="new-product-seat-row" name="seat_row">
                   </div>
                   <div class="form-field">
                       <label for="new-product-seat-number">Length:</label>
                       <input type="text" id="new-product-seat-number" name="seat_number">
                   </div>
                   <div class="form-field">
                       <label for="new-product-seats-reference">Description/Reference:</label>
                       <textarea id="new-product-seats-reference" name="seats_reference" rows="3"></textarea>
                   </div>
                   <div class="form-field">
                       <label for="new-product-main-photo">Main Photo URL:</label>
                       <input type="text" id="new-product-main-photo" name="main_photo">
                       <!-- Preview will be added dynamically -->
                   </div>
                   <div class="form-field">
                       <label for="new-product-photos">Additional Photos (comma separated URLs):</label>
                       <input type="text" id="new-product-photos" name="multiple_photos">
                       <!-- Preview will be added dynamically -->
                   </div>
                   <div class="form-actions">
                       <button type="button" id="save-new-product" class="button button-primary">Save Product</button>
                       <button type="button" id="cancel-add-product" class="button button-secondary">Cancel</button>
                   </div>
               </div>
                   
                   <table id="matching-results-table" class="wp-list-table widefat fixed striped">
                       <thead>
                           <tr>
                               <th>Supplier ID</th>
                               <th>Supplier Title</th>
                               <th>Dimensions</th>
                               <th>Match Status</th>
                               <th width="30%">KT Product Match</th>
                               <th>Actions</th>
                           </tr>
                       </thead>
                       <tbody id="matching-results-body">
                           <!-- Results will be populated here -->
                       </tbody>
                   </table>
                   
                   <div class="pagination-controls">
                      <button id="prev-page" class="button button-secondary">Previous</button>
                       <span id="page-info">Page 1 of 1</span>
                      <button id="next-page" class="button button-secondary">Next</button>
                       <select id="items-per-page">
                           <option value="20">20 per page</option>
                           <option value="50">50 per page</option>
                           <option value="100">100 per page</option>
                           <option value="200">200 per page</option>
                           <option value="500">500 per page</option>
                       </select>
                       <label for="show-only-matches">
                           <input type="checkbox" id="show-only-matches"> Show only matching items
                       </label>
                   </div>
                   
                   <div class="bulk-actions">
                       <button id="save-all-mappings" class="button button-primary">Save All Mappings</button>
                   </div>
               </div>
           </div>
           
           <!-- Edit Product Dialog -->
           <div id="edit-product-dialog" class="edit-product-dialog">
               <div class="edit-product-form">
                   <div class="form-field">
                       <label for="edit-product-sku">SKU:</label>
                       <input type="text" id="edit-product-sku" name="sku" readonly>
                   </div>
                   <div class="form-field">
                       <label for="edit-product-title">Product Title:</label>
                       <input type="text" id="edit-product-title" name="product_title" required>
                   </div>
                   <div class="form-field">
                       <label for="edit-product-seat-row">Ring Size:</label>
                       <input type="text" id="edit-product-seat-row" name="seat_row">
                   </div>
                   <div class="form-field">
                       <label for="edit-product-seat-number">Length:</label>
                       <input type="text" id="edit-product-seat-number" name="seat_number">
                   </div>
                   <div class="form-field">
                       <label for="edit-product-seats-reference">Description/Reference:</label>
                       <textarea id="edit-product-seats-reference" name="seats_reference" rows="3"></textarea>
                   </div>
                   <!-- Add photo fields to edit dialog -->
                   <div class="form-field">
                       <label for="edit-product-main-photo">Main Photo URL:</label>
                       <input type="text" id="edit-product-main-photo" name="main_photo">
                       <!-- Preview will be added dynamically -->
                   </div>
                   <div class="form-field">
                       <label for="edit-product-photos">Additional Photos (comma separated URLs):</label>
                       <input type="text" id="edit-product-photos" name="multiple_photos">
                       <!-- Preview will be added dynamically -->
                   </div>
               </div>
           </div>
       </div>
  
<script type="text/javascript">
jQuery(document).ready(function($) {
   console.log("jQuery loaded and ready");
           
   // Global variables
   let currentPage = 1;
   let totalPages = 1;
   let selectedBrand = "";
   let selectedStatus = "";
   let selectedYear = "";
   let currentTemplateId = 0;
   let itemsPerPage = 20; // Default items per page
   let showOnlyMatches = false;
	
	
	// Enhanced global variables for client-side filtering and caching
let allLoadedMatches = []; // Stores all matches retrieved from the server  
let isInitialLoad = true;
let forceRefresh = false;
   
   // Batch processing variables
   let isProcessing = false;
   let isPaused = false;
   let currentPosition = 0;
   let totalProducts = 0;
   let batchSize = 5; // Default batch size
   let batchesProcessed = 0;
   let batchTimings = [];
   let exactMatchCount = 0;
   let closeMatchCount = 0;
   let noMatchCount = 0;
   let processingStartTime = null;
   
   // Initialize memory usage tracking
   updateMemoryUsage();
   
   // Function to update memory usage display
  function updateMemoryUsage() {
    // Get actual server memory usage via AJAX
    $.ajax({
        url: ajaxurl,
        type: "POST",
        data: {
            action: "get_memory_usage",
            nonce: '<?php echo wp_create_nonce("kt-cigar-matcher-nonce"); ?>'
        },
        success: function(response) {
            if (response.success && response.data) {
                const memoryUsed = response.data.memory_used || 0;
                const memoryLimit = response.data.memory_limit || 100;
                const percentage = (memoryUsed / memoryLimit) * 100;
                
                $("#memory-used").text(memoryUsed);
                $("#memory-limit").text(memoryLimit);
                $("#memory-usage-fill").css("width", percentage + "%");
                
                // Update class based on usage
                const memoryBar = $("#memory-usage-fill");
                memoryBar.removeClass("memory-usage-high memory-usage-critical");
                
                if (percentage > 80) {
                    memoryBar.addClass("memory-usage-critical");
                } else if (percentage > 60) {
                    memoryBar.addClass("memory-usage-high");
                }
            }
        }
    });
}
   // Update batch size from dropdown
   $("#batch-size").on("change", function() {
       batchSize = parseInt($(this).val());
       
       // Save batch size preference in transient via AJAX
       const supplierName = $("#supplier-name").val();
       if (supplierName) {
           $.ajax({
               url: ajaxurl,
               type: "POST",
               data: {
                   action: "save_supplier_template",
                   nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
                   supplier_name: supplierName,
                   batch_size: batchSize,
                   update_batch_size_only: true
               }
           });
       }
   });
   
   // Initialize year filter
   function populateYearFilter() {
       // Find all year tags in the current results
       const yearTags = $(".year-tag");
       const years = [];
       
       yearTags.each(function() {
           const year = $(this).text();
           if (year && !years.includes(year)) {
               years.push(year);
           }
       });
       
       // Sort years in descending order
       years.sort((a, b) => b - a);
       
       // Populate the dropdown
       const yearFilter = $("#year-filter");
       yearFilter.empty();
       yearFilter.append('<option value="">All Years</option>');
       
       years.forEach(function(year) {
           yearFilter.append(`<option value="${year}">${year}</option>`);
       });
   }
   
  // Year filter change handler
$("#year-filter").on("change", function() {
    selectedYear = $(this).val();
    currentPage = 1;
    filterExistingMatches(); // Changed this line
});
	
	
   // Start batch processing
   $("#start-processing").on("click", function() {
       if (isProcessing) return;
       
       // Reset processing stats
       isProcessing = true;
       isPaused = false;
       batchesProcessed = 0;
       batchTimings = [];
       exactMatchCount = 0;
       closeMatchCount = 0;
       noMatchCount = 0;
       processingStartTime = new Date();
       
       // Update UI
       $(this).prop("disabled", true);
       $("#pause-processing").show();
       $(".batch-stats").show();
       
       // Clear the log
       $("#processing-log").html('<div>Processing Log:</div>');
       
       // Start the first batch
       processBatch();
   });
   
   // Pause processing
   $("#pause-processing").on("click", function() {
       isPaused = true;
       isProcessing = false;
       $(this).hide();
       $("#resume-processing").show();
   });
   
   // Resume processing
   $("#resume-processing").on("click", function() {
       isPaused = false;
       isProcessing = true;
       $(this).hide();
       $("#pause-processing").show();
       
       // Continue processing
       processBatch();
   });
   
   // Add this variable at the global scope with other variables
let batchProcessingLock = false;

// Replace the entire processBatch function with this:
function processBatch() {
    // Skip if paused, not processing, or another batch is in progress
    if (!isProcessing || isPaused || batchProcessingLock) return;
    
    // Set processing lock
    batchProcessingLock = true;
    
    // Show a visual indicator that we're working
    $("#progress-status").addClass("progress-active");
    updateMemoryUsage();
    
    const batchStartTime = new Date();
    
    $.ajax({
        url: ajaxurl,
        type: "POST",
        data: {
            action: "process_batch_products",
            nonce: '<?php echo wp_create_nonce("kt-cigar-matcher-nonce"); ?>',
            position: currentPosition,
            batch_size: batchSize
        },
        success: function(response) {
            // Release the lock when done
            batchProcessingLock = false;
            
            if (!response.success) {
                handleBatchError(null, null, response.data ? response.data.message : "Unknown error");
                return;
            }
            
            // Calculate batch processing time
            const batchEndTime = new Date();
            const batchTime = (batchEndTime - batchStartTime) / 1000; // in seconds
            batchTimings.push(batchTime);
            
            // Update stats
            batchesProcessed++;
            
            // Update current position
            currentPosition = response.data.position;
            totalProducts = response.data.total;
            
            // Update match counts
            exactMatchCount += response.data.match_counts.exact || 0;
            closeMatchCount += response.data.match_counts.close || 0;
            noMatchCount += response.data.match_counts.none || 0;
            
            // Update UI
            updateBatchStats();
            var percentage = response.data.percentage;
            $("#progress-bar-fill").css("width", percentage + "%");
            $("#progress-status").text(
                "Processing: " + currentPosition + " of " + totalProducts + " products (" + percentage + "%)"
            );
            
            // Add to log
            if (response.data.batch_results && response.data.batch_results.length > 0) {
                addBatchToLog(response.data.batch_results, batchesProcessed, batchTime);
            }
            
            // Continue or finish
            if (!response.data.completed && isProcessing && !isPaused) {
                // Continue after a short delay to prevent browser freezing
                setTimeout(processBatch, 300);
            } else {
                // Processing complete or paused
                if (response.data.completed) {
                    isProcessing = false;
                    $("#pause-processing, #resume-processing").hide();
                    $("#start-processing").text("Processing Complete").prop("disabled", true);
                    $("#progress-status").text("Processing complete: " + totalProducts + " products processed");
                    
                    // Refresh the matches display
                    loadMatches();
                }
                
                // Remove active state
                $("#progress-status").removeClass("progress-active");
            }
        },
        error: function(xhr, status, error) {
            // Release the lock on error
            batchProcessingLock = false;
            handleBatchError(xhr, status, error);
        },
        timeout: 60000 // 60 second timeout for larger batches
    });
}
   // Update batch stats display
   function updateBatchStats() {
       // Calculate average time per batch
       let avgTime = 0;
       if (batchTimings.length > 0) {
           const sum = batchTimings.reduce((a, b) => a + b, 0);
           avgTime = sum / batchTimings.length;
       }
       $("#avg-batch-time").text(avgTime.toFixed(2) + "s");
       
       // Update match counts
       $("#batch-exact-matches").text(exactMatchCount);
       $("#batch-close-matches").text(closeMatchCount);
       $("#batch-no-matches").text(noMatchCount);
       
       // Calculate estimated time remaining
       if (avgTime > 0 && totalProducts > 0) {
           const remainingBatches = Math.ceil((totalProducts - currentPosition) / batchSize);
           const remainingSeconds = Math.round(remainingBatches * avgTime);
           
           // Format as MM:SS
           const minutes = Math.floor(remainingSeconds / 60);
           const seconds = remainingSeconds % 60;
           $("#est-time-remaining").text(
               String(minutes).padStart(2, '0') + ':' + String(seconds).padStart(2, '0')
           );
       }
   }
   
   // Add batch results to log
   function addBatchToLog(batchResults, batchNumber, batchTime) {
       // Count match types
       const matchCounts = {
           exact: 0,
           close: 0,
           manual: 0,
           none: 0
       };
       
       batchResults.forEach(function(result) {
           if (result.match_status === "exact_match") {
               matchCounts.exact++;
           } else if (result.match_status === "close_match") {
               matchCounts.close++;
           } else if (result.match_status === "manual_match") {
               matchCounts.manual++;
           } else {
               matchCounts.none++;
           }
       });
       
       // Create batch log entry
       const logEntry = `
           <div class="batch-log-item">
               <div class="batch-log-header">
                   Batch #${batchNumber}: ${batchResults.length} products (${batchTime.toFixed(2)}s) - 
                   ${matchCounts.exact} exact, ${matchCounts.close} close, ${matchCounts.none} no match
               </div>
               <div class="batch-log-details">
                   ${batchResults.map(result => `
                       <div class="batch-log-product">
                           ${result.product_title} - 
                           <span class="${result.match_status.replace('_', '-')}">
                               ${result.match_status.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                           </span>
                           ${result.best_match ? ` → ${result.best_match.sku}` : ''}
                       </div>
                   `).join('')}
               </div>
           </div>
       `;
       
       // Add to log
       $("#processing-log").prepend(logEntry);
   }
   
   // Handle batch processing error - continued
      function handleBatchError(xhr, status, error) {
    isProcessing = false;
    isPaused = true;
    $("#pause-processing").hide();
    $("#resume-processing").show();
    
    // More robust error handling with null checking
    let errorMessage = "Unknown error";
    if (xhr && xhr.status === 524) {
        errorMessage = "Server timeout (524). Server took too long to respond. Try reducing the batch size.";
    } else if (status === "timeout") {
        errorMessage = "Request timed out. Try reducing the batch size or server is busy processing large data.";
    } else if (error) {
        errorMessage = error;
    }
    
    // Add error to log
    $("#processing-log").prepend(
        '<div class="batch-log-item error">' +
            '<span class="log-time">' + new Date().toLocaleTimeString() + '</span>: ' +
            '<span class="log-error">Error: ' + errorMessage + '</span>' +
        '</div>'
    );
    
    // Remove active state
    $("#progress-status").removeClass("progress-active");
}
   // Add CSS styles
   $("<style>")
       .text(`
           .log-item {
               margin-bottom: 5px;
               padding: 3px;
               border-radius: 3px;
           }
           .log-item.exact-match {
               background-color: #d4edda;
           }
           .log-item.close-match {
               background-color: #fff3cd;
           }
           .log-item.error {
               background-color: #f8d7da;
               color: #721c24;
           }
           .log-time {
               color: #666;
               font-size: 0.9em;
           }
           .log-product {
               font-weight: bold;
           }
           
           .progress-active {
               position: relative;
           }
           .progress-active::after {
               content: "...";
               display: inline-block;
               animation: ellipsis 1.5s infinite;
           }
           @keyframes ellipsis {
               0% { content: "."; }
               33% { content: ".."; }
               66% { content: "..."; }
           }
       `)
       .appendTo("head");
   
   // Initialize dialogs
   $("#edit-product-dialog").dialog({
       autoOpen: false,
       modal: true,
       width: 600,
       title: "Edit Product",
       buttons: {
           "Save Changes": function() {
               saveProductChanges();
           },
           "Cancel": function() {
               $(this).dialog("close");
           }
       },
       position: { my: "center", at: "center", of: window }
   });
   
   // Setup image previews
   setupImagePreviews();
   
   // Load saved CSV templates
   loadSavedTemplates();
   
   // Load supplier templates
   loadSupplierTemplates();
   
   // Load template management 
   loadTemplateManagement();
   
   // Show supplier template section
   $("#supplier-template-section").show();
   
   // Setup image previews function
   function setupImagePreviews() {
       // For main photo URL field
       $("#new-product-main-photo, #edit-product-main-photo").on("change blur", function() {
           const photoUrl = $(this).val().trim();
           let previewHtml = '';
           
           if (photoUrl) {
               previewHtml = `
                   <div class="image-preview">
                       <img src="${photoUrl}" alt="Product photo preview" style="max-width: 150px; max-height: 150px; margin-top: 10px;">
                   </div>
               `;
           }
           
           // Remove existing preview and add new one
           $(this).siblings('.image-preview').remove();
           $(this).after(previewHtml);
       });
       
       // For additional photos
       $("#new-product-photos, #edit-product-photos").on("change blur", function() {
           const photoUrls = $(this).val().trim().split(',');
           let previewHtml = '<div class="images-preview" style="display: flex; flex-wrap: wrap; gap: 10px; margin-top: 10px;">';
           
           photoUrls.forEach(function(url) {
               const trimmedUrl = url.trim();
               if (trimmedUrl) {
                   previewHtml += `<img src="${trimmedUrl}" alt="Additional photo preview" style="max-width: 100px; max-height: 100px;">`;
               }
           });
           
           previewHtml += '</div>';
           
           // Remove existing preview and add new one
           $(this).siblings('.images-preview').remove();
           
           if (photoUrls.length > 0 && photoUrls[0].trim() !== '') {
               $(this).after(previewHtml);
           }
       });
   }
   
   // Populate brand datalist when the form opens
   $("#add-new-product-btn").on("click", function() {
       // Call the get_last_sku with empty brand to get all brands
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "get_all_brands",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>'
           },
           success: function(response) {
               if (response.success && response.data.brands) {
                   // Clear and populate the datalist
                   $("#brand-datalist").empty();
                   response.data.brands.forEach(function(brand) {
                       $("#brand-datalist").append(`<option value="${brand}">`);
                   });
               }
           },
           error: function(xhr, status, errThrown) {
               console.error("Error fetching brands:", errThrown);
           }
       });
   });
   
   // Populate product fields when a value from datalist is selected
   $("#new-product-brand").on("change", function() {
       // Auto-check for latest SKUs when a brand is selected from list
       setTimeout(function() {
           $("#check-last-sku").click();
       }, 100);
   });
   
   // Template Management function
   function loadTemplateManagement() {
       // Load CSV Templates
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "get_csv_templates",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>'
           },
           success: function(response) {
               if (response.success) {
                   // Populate templates table
                   const templatesBody = $("#csv-templates-body");
                   templatesBody.empty();
                   
                   if (response.data.templates && response.data.templates.length > 0) {
                       response.data.templates.forEach(function(template) {
                           const row = `
                               <tr>
                                   <td>${template.template_name}</td>
                                   <td>${template.created_at || 'Unknown'}</td>
                                   <td>
                                       <button class="button button-small load-csv-template" data-id="${template.id}">Load</button>
                                       <button class="button button-small delete-csv-template" data-id="${template.id}" data-name="${template.template_name}">Delete</button>
                                   </td>
                               </tr>
                           `;
                           templatesBody.append(row);
                       });
                   } else {
                       templatesBody.html('<tr><td colspan="3">No CSV templates found</td></tr>');
                   }
               }
           }
       });
       
       // Load Supplier Templates
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "get_supplier_templates",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>'
           },
           success: function(response) {
               if (response.success) {
                   // Populate templates table
                   const templatesBody = $("#supplier-templates-body");
                   templatesBody.empty();
                   
                   if (response.data.templates && response.data.templates.length > 0) {
                       response.data.templates.forEach(function(template) {
                           const date = new Date(template.last_upload_date);
                           const dateStr = date.toLocaleDateString();
                           const row = `
                               <tr>
                                   <td>${template.supplier_name}</td>
                                   <td>${dateStr}</td>
                                   <td>${template.product_count}</td>
                                   <td>${template.mapped_count}</td>
                                   <td>
                                       <button class="button button-small load-supplier-template" data-name="${template.supplier_name}" data-batch-size="${template.batch_size || 5}">Load</button>
                                       <button class="button button-small export-supplier-csv" data-name="${template.supplier_name}">Export</button>
                                       <button class="button button-small delete-supplier-template" data-name="${template.supplier_name}">Delete</button>
                                   </td>
                               </tr>
                           `;
                           templatesBody.append(row);
                       });
                   } else {
                       templatesBody.html('<tr><td colspan="5">No supplier templates found</td></tr>');
                   }
               }
           }
       });
   }
   
   // Tab switching functionality
   $(".template-tab").on("click", function() {
       $(".template-tab").removeClass("active");
       $(this).addClass("active");
       
       const tabId = $(this).data("tab");
       $(".template-tab-content").removeClass("active");
       $(`#${tabId}-tab`).addClass("active");
   });
   
   // Handle template load/delete actions
   $(document).on("click", ".load-csv-template", function() {
       const templateId = $(this).data("id");
       $("#csv-template").val(templateId).trigger("change");
   });
   
   $(document).on("click", ".delete-csv-template", function() {
       const templateId = $(this).data("id");
       const templateName = $(this).data("name");
       
       if (confirm(`Are you sure you want to delete the CSV template "${templateName}"?`)) {
           $.ajax({
               url: ajaxurl,
               type: "POST",
               data: {
                   action: "delete_csv_template",
                   nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
                   template_id: templateId
               },
               success: function(response) {
                   if (response.success) {
                       alert("Template deleted successfully");
                       loadTemplateManagement();
                       loadSavedTemplates(); // Refresh dropdown
                   } else {
                       alert("Error: " + (response.data ? response.data.message : "Unknown error"));
                   }
               },
               error: function(xhr, status, errThrown) {
                   console.error("Delete error:", errThrown);
                   alert("Error deleting template: " + errThrown);
               }
           });
       }
   });
   
   $(document).on("click", ".load-supplier-template", function() {
       const supplierName = $(this).data("name");
       const supplierBatchSize = $(this).data("batch-size") || 5;
       
       // Set batch size in UI
       $("#batch-size").val(supplierBatchSize);
       batchSize = supplierBatchSize;
       
       $("#supplier-name").val(supplierName);
       $("#load-supplier-template").trigger("click");
   });
   
   $(document).on("click", ".delete-supplier-template", function() {
       const supplierName = $(this).data("name");
       
       if (confirm(`Are you sure you want to delete the supplier template "${supplierName}"?`)) {
           $.ajax({
               url: ajaxurl,
               type: "POST",
               data: {
                   action: "delete_supplier_template",
                   nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
                   supplier_name: supplierName
               },
               success: function(response) {
                   if (response.success) {
                       alert("Supplier template deleted successfully");
                       loadTemplateManagement();
                       loadSupplierTemplates(); // Refresh dropdown
                   } else {
                       alert("Error: " + (response.data ? response.data.message : "Unknown error"));
                   }
               },
               error: function(xhr, status, errThrown) {
                   console.error("Delete error:", errThrown);
                   alert("Error deleting template: " + errThrown);
               }
           });
       }
   });
   
   $(document).on("click", ".export-supplier-csv", function() {
       const supplierName = $(this).data("name");
       $("#supplier-name").val(supplierName);
       $("#export-mapped-csv").trigger("click");
   });
   
   // Upload supplier CSV
   $("#supplier-csv-upload-form").on("submit", function(e) {
       e.preventDefault();
       
       // Validate template name
       const templateName = $("#template-name").val();
       if (templateName) {
           // Check if a template with this name already exists
           if ($("#csv-template option").filter(function() {
               return $(this).text() === templateName;
           }).length > 0 && currentTemplateId === 0) {
               // Template with this name exists
               if (!confirm(`A template named "${templateName}" already exists. Do you want to update it?`)) {
                   return; // User cancelled, do not proceed
               }
           }
       }
       
       const formData = new FormData(this);
       formData.append("action", "upload_supplier_csv");
       formData.append("nonce", '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>');
       
       // Add template name if provided
       if (templateName) {
           formData.append("template_name", templateName);
           formData.append("template_id", currentTemplateId);
       }
       
       // Add supplier name if provided
       const supplierName = $("#supplier-name").val();
       if (supplierName) {
           formData.append("supplier_name", supplierName);
       }
       
       // Add batch size to supplier template
       formData.append("batch_size", batchSize);
       
       // Show progress
       $("#upload-progress").show();
       $("#progress-percentage").text("0%");
       $(".progress-bar-fill").css("width", "0%");
       
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: formData,
           contentType: false,
           processData: false,
           xhr: function() {
               const xhr = new window.XMLHttpRequest();
               xhr.upload.addEventListener("progress", function(evt) {
                   if (evt.lengthComputable) {
                       const percentComplete = (evt.loaded / evt.total) * 100;
                       $("#progress-percentage").text(percentComplete.toFixed(0) + "%");
                       $(".progress-bar-fill").css("width", percentComplete.toFixed(0) + "%");
                   }
               }, false);
               return xhr;
           },
           success: function(response) {
               console.log("Upload response:", response);
               
               if (response.success) {
                   $("#upload-progress").hide();
                   
                   // Populate brand filter
                   const brandFilter = $("#brand-filter");
                   brandFilter.empty();
                   brandFilter.append('<option value="">All Brands</option>');
                   
                   if (response.data.brands && response.data.brands.length > 0) {
                       response.data.brands.forEach(function(brand) {
                           brandFilter.append(`<option value="${brand}">${brand}</option>`);
                       });
                   }

                   // Populate year filter
                   const yearFilter = $("#year-filter");
                   yearFilter.empty();
                   yearFilter.append('<option value="">All Years</option>');

                   if (response.data.years && response.data.years.length > 0) {
                       // Sort years in descending order
                       response.data.years.sort((a, b) => b - a);
                       
                       response.data.years.forEach(function(year) {
                           yearFilter.append(`<option value="${year}">${year}</option>`);
                       });
                   }
                   
                   // Show matching results section
                   $("#matching-results-container").show();
                   
                   // Reset processing controls
                   currentPosition = 0;
                   totalProducts = response.data.product_count || 0;
                   $("#progress-bar-fill").css("width", "0%");
                   $("#progress-status").text(`Ready to start (0 of ${totalProducts} products processed)`);
                   $("#start-processing").prop("disabled", false).text("Start Processing");
                   $("#pause-processing, #resume-processing").hide();
                   
                   // Load initial matches
                   loadMatches();
                   
                   // Save template if name provided
                   if (templateName && response.data.column_mappings) {
                       saveCSVTemplate(templateName, response.data.column_mappings);
                   }
                   
                   // Save supplier template if name provided
                   if (supplierName) {
                       const fileChecksum = response.data.file_checksum || '';
                       const productCount = response.data.product_count || 0;
                       saveSupplierTemplate(supplierName, fileChecksum, productCount, batchSize);
                   }
                   
                   // Show success message
                   alert(response.data.message + " - Loaded " + response.data.product_count + " products");
               } else {
                   $("#upload-progress").hide();
                   alert("Error: " + (response.data ? response.data.message : "Unknown error"));
               }
           },
          
		   error: function(xhr, status, errThrown) {
    console.error("Upload error:", errThrown);
    $("#upload-progress").hide();
    
    let errorMessage = "Error uploading file";
    
    // More descriptive error messages
    if (xhr.status === 0) {
        errorMessage = "Network error - please check your connection";
    } else if (xhr.status === 413) {
        errorMessage = "File too large - please reduce file size or increase server limits";
    } else if (xhr.status >= 400 && xhr.status < 500) {
        errorMessage = "Client error (" + xhr.status + "): " + (errThrown || "Unknown error");
    } else if (xhr.status >= 500) {
        errorMessage = "Server error (" + xhr.status + "): " + (errThrown || "Unknown error");
    } else if (status === "timeout") {
        errorMessage = "Request timed out - server might be busy";
    } else if (status === "abort") {
        errorMessage = "Request was aborted";
    } else if (errThrown) {
        errorMessage = errThrown;
    }
    
    if (xhr.responseText) {
        try {
            const response = JSON.parse(xhr.responseText);
            if (response.data && response.data.message) {
                errorMessage += ": " + response.data.message;
            }
        } catch (e) {
            console.error("Could not parse error response:", e);
        }
    }
    
    alert(errorMessage);
}
		   
       });
	   
   });
   
  // Enhanced loadMatches function with improved caching
function loadMatches() {
    // Show loading
    $("#matching-results-body").html('<tr><td colspan="6" class="loading-row">Loading matches...</td></tr>');
    
    // Add a delay before processing to reduce server load
    setTimeout(function() {
        // Add console log to debug
        console.log("Loading matches with filters:", {
            page: currentPage,
            per_page: itemsPerPage,
            brand: selectedBrand,
            status: selectedStatus,
            year: selectedYear,
            show_only_matches: showOnlyMatches ? 1 : 0
        });
        
        $.ajax({
            url: ajaxurl,
            type: "POST",
            data: {
                action: "match_products",
                nonce: '<?php echo wp_create_nonce("kt-cigar-matcher-nonce"); ?>',
                page: currentPage,
                per_page: itemsPerPage,
                brand: selectedBrand,
                status: selectedStatus,
                year: selectedYear,
                show_only_matches: showOnlyMatches ? 1 : 0
            },
            success: function(response) {
                console.log("Match response:", response);
                
                if (response.success) {
                    // Store all matches for client-side filtering
                    allLoadedMatches = response.data.matches;
                    
                    // Update pagination info
                    totalPages = response.data.pagination.total_pages;
                    currentPage = response.data.pagination.current_page;
                    
                    $("#page-info").text("Page " + currentPage + " of " + totalPages);
                    
                    // Enable/disable pagination buttons
                    $("#prev-page").prop("disabled", currentPage <= 1);
                    $("#next-page").prop("disabled", currentPage >= totalPages);
                    
                    // Clear existing rows
                    $("#matching-results-body").empty();
                    
                    // Update match summary counter
                    updateMatchSummary(response.data.match_count);
                    
                    // Add match rows
                    if (response.data.matches && response.data.matches.length > 0) {
                        // Process each match with a slight delay to prevent browser freezing
                        let i = 0;
                        function processNextMatch() {
                            if (i < response.data.matches.length) {
                                addMatchRow(response.data.matches[i]);
                                i++;
                                // Use requestAnimationFrame for smoother UI updates
                                window.requestAnimationFrame(processNextMatch);
                            } else {
                                // After all matches are processed, populate filters
                                populateBrandFilter(); // Add this line
                                populateYearFilter();
                                isInitialLoad = false;
                            }
                        }
                        processNextMatch();
                    } else {
                        $("#matching-results-body").html('<tr><td colspan="6">No matches found</td></tr>');
                        // Still populate filters from the empty result
                        populateBrandFilter(); // Add this line
                        populateYearFilter();
                        isInitialLoad = false;
                    }
                } else {
                    alert("Error: " + (response.data ? response.data.message : "Unknown error"));
                }
            },
            error: function(xhr, status, errThrown) {
                console.error("Ajax error:", errThrown);
                
                // Safe handling of xhr.responseText
                if (xhr && xhr.responseText) {
                    console.error("Response:", xhr.responseText);
                }
                
                // Better error handling for timeout errors
                if (xhr && xhr.status === 524) {
                    alert("Server timeout error (524). Try reducing the number of items per page or applying filters to narrow down results.");
                } else if (status === "timeout") {
                    alert("Request timed out. Try reducing the number of items per page or applying filters.");
                } else {
                    alert("Error loading matches: " + (errThrown || "Unknown error"));
                }
            },
            // Set a longer timeout for the AJAX request
            timeout: 120000, // 120 seconds timeout
            cache: false,
        });
    }, 500); // 0.5 second delay
}
	
	
	
 function updateMatchSummary(matchCount) {
   // Make sure matchCount has all required properties
   if (!matchCount) {
       matchCount = {
           exact: 0,
           close: 0, 
           manual: 0,
           possible: 0, // Add possible match counter
           none: 0,
           total: 0
       };
   }
   
   // Ensure possible matches property exists (for backward compatibility)
   if (typeof matchCount.possible === 'undefined') {
       matchCount.possible = 0;
   }
   
   // Update the match summary section with proper styling
   let summaryHTML = '<div class="match-summary-title">Match Summary</div>';
   summaryHTML += '<div class="match-counter">';
   summaryHTML += '<div><span class="match-type">Exact Matches:</span> <span class="match-count exact-count">' + matchCount.exact + '</span></div>';
   summaryHTML += '<div><span class="match-type">Close Matches:</span> <span class="match-count close-count">' + matchCount.close + '</span></div>';
   summaryHTML += '<div><span class="match-type">Manual Matches:</span> <span class="match-count manual-count">' + matchCount.manual + '</span></div>';
   summaryHTML += '<div><span class="match-type">Possible Matches:</span> <span class="match-count possible-count">' + matchCount.possible + '</span></div>';
   summaryHTML += '<div><span class="match-type">No Matches:</span> <span class="match-count no-count">' + matchCount.none + '</span></div>';
   summaryHTML += '<div><span class="match-type">Total:</span> <span class="match-count total-count">' + matchCount.total + '</span></div>';
   summaryHTML += '</div>';
   
   $("#match-summary").html(summaryHTML);
   
   // Also update the count in the HTML directly for better reliability
   $(".exact-count").text(matchCount.exact);
   $(".close-count").text(matchCount.close);
   $(".manual-count").text(matchCount.manual);
   $(".possible-count").text(matchCount.possible);
   $(".no-count").text(matchCount.none);
   $(".total-count").text(matchCount.total);
   
   console.log("Updated match summary:", matchCount);
}  

   // Add match row to the table
   function addMatchRow(match) {
       let statusClass = "";
      
	switch(match.match_status) {
   case "Exact Match":
       statusClass = "exact-match";
       break;
   case "Close Match":
       statusClass = "close-match";
       break;
   case "Possible Match":
       statusClass = "possible-match";
       break;
   case "Manual Match":
       statusClass = "manual-match";
       break;
   case "No Match":
       statusClass = "no-match";
       break;
}   
  
	   
	   // Create potential matches dropdown options
       let matchOptions = "";
       if (match.potential_matches && match.potential_matches.length > 0) {
           match.potential_matches.forEach(function(potentialMatch) {
               const selected = potentialMatch.sku === match.kt_sku ? "selected" : "";
               matchOptions += `<option value="${potentialMatch.sku}" ${selected} data-score="${potentialMatch.score}">${potentialMatch.sku} - ${potentialMatch.title} (${potentialMatch.dimensions}) [Score: ${potentialMatch.score}%]</option>`;
           });
       }
       
       // Extract and display years
       let yearTags = '';
       const yearMatch = match.supplier_title.match(/\b(19[5-9][0-9]|20[0-2][0-9]|2030)\b/);
       if (yearMatch) {
           yearTags = `<span class="year-tag">${yearMatch[1]}</span>`;
       }
       
       // Extract and display zodiac animals
       let zodiacTags = '';
       const zodiacAnimals = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig'];
       const zodiacRegex = new RegExp('\\b(' + zodiacAnimals.join('|') + ')\\b', 'i');
       const zodiacMatch = match.supplier_title.match(zodiacRegex);
       
       if (zodiacMatch) {
           zodiacTags = `<span class="zodiac-tag">${zodiacMatch[1]}</span>`;
       }
       
       // Check for Chinese zodiac names
       const chineseZodiacMap = {
           '鼠': 'Rat',
           '牛': 'Ox',
           '虎': 'Tiger', 
           '兔': 'Rabbit',
           '龙': 'Dragon',
           '蛇': 'Snake',
           '马': 'Horse',
           '羊': 'Goat',
           '猴': 'Monkey',
           '鸡': 'Rooster',
           '狗': 'Dog',
           '猪': 'Pig'
       };
       
       for (const [chinese, english] of Object.entries(chineseZodiacMap)) {
           if (match.supplier_title.includes(chinese + '年')) {
               zodiacTags = `<span class="zodiac-tag">${english}</span>`;
               break;
           }
       }
       
       // Keywords for matching
       let keywordsList = "";
       if (match.keywords && match.keywords.length > 0) {
           keywordsList = `<div class="keyword-list">Keywords: ${match.keywords}</div>`;
       }
       
       // Add match details if we have a match
       let matchDetails = "";
       if (match.match_status === "Exact Match" || match.match_status === "Close Match") {
           const bestMatch = match.potential_matches[0];
           if (bestMatch) {
               matchDetails = `
                   <div class="match-info">
                       <div class="match-score">Match Score: ${bestMatch.score}%</div>
                       <div class="matched-phrases">
                           <span class="tooltip">Matched terms
                               <span class="tooltiptext">The key terms that were used for matching</span>
                           </span>: 
                           ${bestMatch.keywords || "N/A"}
                       </div>
                   </div>
               `;
           }
       }

       // Create matched terms display
       let matchedTermsDisplay = '';
       if (match.matched_terms && match.matched_terms.length > 0) {
           const termsArray = typeof match.matched_terms === 'string' ? 
               match.matched_terms.split(',') : match.matched_terms;
               
           matchedTermsDisplay = '<div class="matched-terms-container">';
           
           termsArray.forEach(function(term) {
               const trimmedTerm = term.trim();
               if (trimmedTerm) {
                   matchedTermsDisplay += `<span class="matched-term">${trimmedTerm}</span>`;
               }
           });
           
           matchedTermsDisplay += '</div>';
       }

       const row = `
           <tr data-supplier-id="${match.supplier_id}" data-supplier-title="${match.supplier_title}">
               <td>${match.supplier_id}</td>
               <td class="supplier-title-cell">
                   <strong class="supplier-title editable-text">${match.supplier_title}</strong>
                   ${yearTags}${zodiacTags}
                   ${keywordsList}
                   ${matchDetails}
                   ${matchedTermsDisplay}
               </td>
               <td>${match.supplier_dimensions}</td>
               <td class="${statusClass}">
                   ${match.match_status}
               </td>
               <td>
                   <select class="kt-product-select" data-supplier-id="${match.supplier_id}">
                       <option value="">Select a product...</option>
                       ${matchOptions}
                   </select>
                   ${match.kt_sku ? `<div class="selected-product">
                       <strong>Selected:</strong> ${match.kt_sku} - 
                       <span class="kt-title editable-text" data-sku="${match.kt_sku}">${match.kt_title}</span>
                       <span class="editable-text-indicator">Double-click to edit</span>
                       <i class="dashicons dashicons-edit edit-icon" data-sku="${match.kt_sku}" title="Edit more details"></i>
                   </div>` : ""}
               </td>
               <td>
                   <button class="button button-small save-mapping" data-supplier-id="${match.supplier_id}">Save</button>
                   <div class="search-controls">
                       <input type="text" class="search-brand-input" placeholder="Search for products...">
                       <button class="button button-small search-by-brand" data-brand="${match.supplier_title.split(" ")[0]}">Find Products</button>
                   </div>
               </td>
           </tr>
       `;
       
       $("#matching-results-body").append(row);
   }
   
   // Inline edit for supplier title
   $(document).on("dblclick", ".supplier-title", function() {
       const titleContainer = $(this);
       const originalTitle = titleContainer.text().trim();
       const supplierID = titleContainer.closest("tr").data("supplier-id");
       
      // Replace with an input field
       titleContainer.html(`<input type="text" class="inline-edit-title" value="${originalTitle}">`);
       const inputField = titleContainer.find("input");
       inputField.focus();
       
     // Handle saving on blur or enter key
inputField.on("blur keypress", function(e) {
    // If Enter key or blur event
    if (e.type === "blur" || (e.type === "keypress" && e.which === 13)) {
                   const newTitle = $(this).val().trim();
                   // If title hasn't changed
                   if (newTitle === originalTitle) {
                       titleContainer.html(originalTitle);
                       return;
                   }
                   // Update the title in the database (via AJAX)
                   $.ajax({
                       url: ajaxurl,
                       type: "POST",
                       data: {
                           action: "update_supplier_title",
                           nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
                           supplier_id: supplierID,
                           new_title: newTitle
                       },
                       success: function(response) {
                           if (response.success) {
                               // Update the displayed title
                               titleContainer.html(newTitle);
                               
                               // Update the data attribute
                               titleContainer.closest("tr").data("supplier-title", newTitle);
                               
                               // Re-analyze and update year and zodiac tags
                               const row = titleContainer.closest("tr").find(".supplier-title-cell");
                               
                               // Remove existing tags
                               row.find(".year-tag, .zodiac-tag").remove();
                               
                               // Extract and display years
                               const yearMatch = newTitle.match(/\b(19[5-9][0-9]|20[0-2][0-9]|2030)\b/);
                               if (yearMatch) {
                                   $(`<span class="year-tag">${yearMatch[1]}</span>`).insertAfter(titleContainer);
                               }
                               
                               // Extract and display zodiac animals
                               const zodiacAnimals = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig'];
                               const zodiacRegex = new RegExp('\\b(' + zodiacAnimals.join('|') + ')\\b', 'i');
                               const zodiacMatch = newTitle.match(zodiacRegex);
                               
                               if (zodiacMatch) {
                                   $(`<span class="zodiac-tag">${zodiacMatch[1]}</span>`).insertAfter(titleContainer);
                               }
                           }
                           else {
                               // Show error and revert
                               alert("Error updating title: " + (response.data ? response.data.message : "Unknown error"));
                               titleContainer.html(originalTitle);
                           }
                       },
                       error: function(xhr, status, errThrown) {
                           alert("Error updating title. Please try again.");
                           titleContainer.html(originalTitle);
                       }
                   });
                   
                   if (e.type === "keypress") {
                       e.preventDefault();
                   }
               }
           });
       });
   
   // Inline edit for KT product title
   $(document).on("dblclick", ".kt-title", function() {
       console.log("KT title double-clicked");

       const titleElement = $(this);
       const originalTitle = titleElement.text().trim();
       const ktSku = titleElement.data("sku");
       
       // Replace with an input field
       titleElement.html(`<input type="text" class="inline-edit-kt-title" value="${originalTitle}">`);
       const inputField = titleElement.find("input");
       inputField.focus();
       
       // Select all text
       inputField[0].setSelectionRange(0, originalTitle.length);
       
       // Handle saving on blur or enter key
       inputField.on("blur keypress", function(e) {
           // If Enter key or blur event
           if (e.type === "blur" || (e.type === "keypress" && e.which === 13)) {
               const newTitle = $(this).val().trim();
               
               // If title hasn't changed
               if (newTitle === originalTitle) {
                   titleElement.text(originalTitle);
                   return;
               }
               
               // Show saving indicator
               titleElement.html(`<em>Saving...</em>`);
               
               // Update the title in the database (via AJAX)
               $.ajax({
                   url: ajaxurl,
                   type: "POST",
                   data: {
                       action: "update_kt_product_title",
                       nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
                       sku: ktSku,
                       new_title: newTitle
                   },
                   success: function(response) {
                       if (response.success) {
                           // Update the displayed title
                           titleElement.text(newTitle);
                           
                           // Update the dropdown option text as well
                           const option = $(`.kt-product-select option[value="${ktSku}"]`);
                           const optionText = option.text();
                           const newOptionText = optionText.replace(originalTitle, newTitle);
                           option.text(newOptionText);
                           
                           // Show temporary success message
                           $('<span class="save-success">✓ Saved</span>').insertAfter(titleElement).fadeOut(2000, function() {
                               $(this).remove();
                           });
                       } else {
                           // Show error and revert
                           alert("Error updating product title: " + (response.data ? response.data.message : "Unknown error"));
                           titleElement.text(originalTitle);
                       }
                   },
                   error: function(xhr, status, errThrown) {
                       alert("Error updating product title. Please try again.");
                       titleElement.text(originalTitle);
                   }
               });
               
               if (e.type === "keypress") {
                   e.preventDefault();
               }
           }
       });
   });
     
   // Save mapping
   $(document).on("click", ".save-mapping", function() {
       const supplierId = $(this).data("supplier-id");
       const supplierTitle = $(this).closest("tr").data("supplier-title");
       const ktSku = $(this).closest("tr").find(".kt-product-select").val();
       const supplierName = $("#supplier-name").val();
       
       if (!ktSku) {
           alert("Please select a product match");
           return;
       }
       
       // Get matched terms
       let matchedTerms = [];
       const option = $(this).closest("tr").find(".kt-product-select option:selected");
       
       if (option.data("score")) {
           matchedTerms.push("Score: " + option.data("score") + "%");
       }
       
       // Extract year from title if present
       const yearMatch = supplierTitle.match(/\b(19[5-9][0-9]|20[0-2][0-9]|2030)\b/);
       if (yearMatch) {
           matchedTerms.push("Year: " + yearMatch[1]);
       }
       
       // Extract dimensions if present
       const dimensions = $(this).closest("tr").find("td:eq(2)").text();
       if (dimensions && dimensions !== "N/A") {
           matchedTerms.push("Dimensions: " + dimensions);
       }
       
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "save_mapping",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
               supplier_id: supplierId,
               supplier_title: supplierTitle,
               supplier_name: supplierName,
               kt_sku: ktSku,
               confidence: "manual",
               matched_terms: matchedTerms.join(", ")
           },
           success: function(response) {
               if (response.success) {
                   alert("Mapping saved successfully");
                   loadMatches(); // Reload to reflect changes
                   
                   // Update supplier template mapped count
                   if (supplierName) {
                       loadSupplierTemplates();
                   }
               } else {
                   alert("Error: " + (response.data ? response.data.message : "Unknown error"));
               }
           },
           error: function(xhr, status, errThrown) {
               console.error("Save mapping error:", errThrown);
               alert("Error saving mapping: " + errThrown);
           }
       });
   });
   
   // Save all mappings
   $("#save-all-mappings").on("click", function() {
       const mappings = [];
       const supplierName = $("#supplier-name").val();
       
       // Collect all visible mappings
       $("#matching-results-body tr").each(function() {
           const supplierId = $(this).data("supplier-id");
           const supplierTitle = $(this).data("supplier-title");
           const ktSku = $(this).find(".kt-product-select").val();
           
           if (ktSku) {
               // Get matched terms
               let matchedTerms = [];
               const option = $(this).find(".kt-product-select option:selected");
               
               if (option.data("score")) {
                   matchedTerms.push("Score: " + option.data("score") + "%");
               }
               
               // Extract year from title if present
               const yearMatch = supplierTitle.match(/\b(19[5-9][0-9]|20[0-2][0-9]|2030)\b/);
               if (yearMatch) {
                   matchedTerms.push("Year: " + yearMatch[1]);
               }
               
               // Extract dimensions
               const dimensions = $(this).find("td:eq(2)").text();
               if (dimensions && dimensions !== "N/A") {
                   matchedTerms.push("Dimensions: " + dimensions);
               }
               
               mappings.push({
                   supplier_id: supplierId,
                   supplier_title: supplierTitle,
                   supplier_name: supplierName,
                   kt_sku: ktSku,
                   matched_terms: matchedTerms.join(", ")
               });
           }
       });
       
       if (mappings.length === 0) {
           alert("No mappings to save");
           return;
       }
       
       // Save each mapping
       let savedCount = 0;
       let errorCount = 0;
       
       function saveNextMapping(index) {
           if (index >= mappings.length) {
               alert(`Saved ${savedCount} mappings (${errorCount} errors)`);
               loadMatches(); // Reload to reflect changes
               
               // Update supplier template mapped count
               if (supplierName) {
                   loadSupplierTemplates();
               }
               return;
           }
           
           const mapping = mappings[index];
           
           $.ajax({
               url: ajaxurl,
               type: "POST",
               data: {
                   action: "save_mapping",
                   nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
                   supplier_id: mapping.supplier_id,
                   supplier_title: mapping.supplier_title,
                   supplier_name: mapping.supplier_name,
                   kt_sku: mapping.kt_sku,
                   confidence: "manual",
                   matched_terms: mapping.matched_terms
               },
               success: function(response) {
                   if (response.success) {
                       savedCount++;
                   } else {
                       errorCount++;
                       console.error("Error saving mapping: " + (response.data ? response.data.message : "Unknown error"));
                   }
                   
                   saveNextMapping(index + 1);
               },
               error: function(xhr, status, errThrown) {
                   errorCount++;
                   console.error("Error saving mapping: " + errThrown);
                   saveNextMapping(index + 1);
               }
           });
       }
       
       saveNextMapping(0);
   });
   
   // Pagination
   $("#prev-page").on("click", function() {
       if (currentPage > 1) {
           currentPage--;
           loadMatches();
       }
   });
   
   $("#next-page").on("click", function() {
       if (currentPage < totalPages) {
           currentPage++;
           loadMatches();
       }
   });

// Client-side filtering function
function filterExistingMatches() {
    console.log("Filtering matches with criteria:", {
        brand: selectedBrand,
        status: selectedStatus,
        year: selectedYear,
        showOnlyMatches: showOnlyMatches
    });
    
    // If no matches loaded yet, load them
    if (allLoadedMatches.length === 0) {
        loadMatches();
        return;
    }
    
    // Show loading
    $("#matching-results-body").html('<tr><td colspan="6" class="loading-row">Filtering matches...</td></tr>');
    
    // Filter matches based on criteria
    const filteredMatches = allLoadedMatches.filter(function(match) {
        // Brand filter
        if (selectedBrand && !match.supplier_title.includes(selectedBrand)) {
            return false;
        }
        
        // Status filter - improved to handle different formats
        if (selectedStatus) {
            // Convert match status to lowercase and remove spaces for comparison
            const normalizedStatus = match.match_status.toLowerCase().replace(/\s+/g, '');
            
            if (selectedStatus === 'exact' && normalizedStatus !== 'exactmatch') {
                return false;
            } else if (selectedStatus === 'close' && normalizedStatus !== 'closematch') {
                return false;
            } else if (selectedStatus === 'possible' && normalizedStatus !== 'possiblematch') {
                return false;
            } else if (selectedStatus === 'none' && normalizedStatus !== 'nomatch') {
                return false;
            } else if (selectedStatus === 'manual' && normalizedStatus !== 'manualmatch') {
                return false;
            }
        }
        
        // Year filter
        if (selectedYear && !match.supplier_title.includes(selectedYear)) {
            return false;
        }
        
        // Show only matches filter
        if (showOnlyMatches && match.match_status === 'No Match') {
            return false;
        }
        
        return true;
    });
    
    // Calculate pagination
    totalPages = Math.ceil(filteredMatches.length / itemsPerPage);
    if (currentPage > totalPages) {
        currentPage = 1;
    }
    
    // Update pagination info
    $("#page-info").text("Page " + currentPage + " of " + (totalPages || 1));
    $("#prev-page").prop("disabled", currentPage <= 1);
    $("#next-page").prop("disabled", currentPage >= totalPages);
    
    // Clear existing rows
    $("#matching-results-body").empty();
    
    // Count matches by type for summary
    const matchCount = {
        exact: 0,
        close: 0,
        manual: 0,
        possible: 0,
        none: 0,
        total: filteredMatches.length
    };
    
    filteredMatches.forEach(function(match) {
        const normalizedStatus = match.match_status.toLowerCase().replace(/\s+/g, '');
        if (normalizedStatus === 'exactmatch') {
            matchCount.exact++;
        } else if (normalizedStatus === 'closematch') {
            matchCount.close++;
        } else if (normalizedStatus === 'manualmatch') {
            matchCount.manual++;
        } else if (normalizedStatus === 'possiblematch') {
            matchCount.possible++;
        } else {
            matchCount.none++;
        }
    });
    
    // Update match summary
    updateMatchSummary(matchCount);
    
    // Display current page matches
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = Math.min(startIndex + itemsPerPage, filteredMatches.length);
    
    if (filteredMatches.length > 0) {
        for (let i = startIndex; i < endIndex; i++) {
            addMatchRow(filteredMatches[i]);
        }
    } else {
        $("#matching-results-body").html('<tr><td colspan="6">No matches found</td></tr>');
    }
    
    console.log("Filtered matches: " + filteredMatches.length + " displayed on page: " + currentPage);
}
// Populate brand filter dropdown from loaded matches
function populateBrandFilter() {
    // Find all unique brands in the loaded matches
    const brands = [];
    
    allLoadedMatches.forEach(function(match) {
        // Extract brand from supplier title
        // Using a simplified approach (first word) - can be improved with regex
        const title = match.supplier_title;
        const brandName = title.split(' ')[0]; 
        
        if (brandName && !brands.includes(brandName)) {
            brands.push(brandName);
        }
    });
    
    // Sort brands alphabetically
    brands.sort();
    
    // Populate the dropdown
    const brandFilter = $("#brand-filter");
    brandFilter.empty();
    brandFilter.append('<option value="">All Brands</option>');
    
    brands.forEach(function(brand) {
        brandFilter.append(`<option value="${brand}">${brand}</option>`);
    });
}	
	
 // Brand filter
$("#brand-filter").on("change", function() {
    selectedBrand = $(this).val();
    currentPage = 1;
    filterExistingMatches(); // Use client-side filtering
});

// Match status filter
$("#match-status-filter").on("change", function() {
    selectedStatus = $(this).val();
    currentPage = 1;
    filterExistingMatches(); // Use client-side filtering
});

// Year filter
$("#year-filter").on("change", function() {
    selectedYear = $(this).val();
    currentPage = 1;
    filterExistingMatches(); // Use client-side filtering
});

// Items per page
$("#items-per-page").on("change", function() {
    itemsPerPage = parseInt($(this).val());
    currentPage = 1;
    filterExistingMatches(); // Use client-side filtering for current data
});

// Show only matches checkbox
$("#show-only-matches").on("change", function() {
    showOnlyMatches = $(this).prop("checked");
    currentPage = 1;
    filterExistingMatches(); // Use client-side filtering
});

// Refresh matches - clear cache and reload
$("#refresh-matches").on("click", function() {
    // Clear the cached matches to force a reload
    allLoadedMatches = [];
    forceRefresh = true;
    loadMatches(); // Reload from server
    forceRefresh = false;
});
   // Refresh brand list
   $("#refresh-brands").on("click", function() {
       // Show loading indicator
       $(this).text("Loading...").prop("disabled", true);
       
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "get_all_brands",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>'
           },
           success: function(response) {
               if (response.success && response.data.brands) {
                   // Clear and populate the datalist
                   $("#brand-datalist").empty();
                   response.data.brands.forEach(function(brand) {
                       $("#brand-datalist").append(`<option value="${brand}">`);
                   });
                   
                   // Show feedback
                   $("#refresh-brands").text("Refresh Brands").prop("disabled", false);
                   alert("Brand list refreshed with " + response.data.brands.length + " brands");
               } else {
                   $("#refresh-brands").text("Refresh Brands").prop("disabled", false);
                   alert("Error refreshing brand list");
               }
           },
           error: function(xhr, status, errThrown) {
               $("#refresh-brands").text("Refresh Brands").prop("disabled", false);
               alert("Error connecting to server");
           }
       });
   });
   
   // Search by brand
   $(document).on("click", ".search-by-brand", function() {
       console.log("Search brand button clicked");
       const button = $(this);
       const brand = button.data("brand");
       console.log("Brand:", brand);
       const supplierRow = button.closest("tr");
       const ktProductSelect = supplierRow.find(".kt-product-select");
       const searchInput = supplierRow.find(".search-brand-input");
       const searchTerm = searchInput.val().trim();
       console.log("Search term:", searchTerm);
       
       // Show loading indicator
       button.text("Searching...").prop("disabled", true);
       
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "get_brand_products",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
               brand: brand,
               search_term: searchTerm
           },
           success: function(response) {
               // Reset button
               button.text("Find Products").prop("disabled", false);
               
               if (response.success) {
                   // Clear existing options except the first one
                   ktProductSelect.find("option:not(:first)").remove();
                   
                   // Add product options
                   if (response.data.products && response.data.products.length > 0) {
                       response.data.products.forEach(function(product) {
                           ktProductSelect.append(`<option value="${product.sku}">${product.sku} - ${product.product_title}</option>`);
                       });
                       
                       // Auto-expand the dropdown
                       ktProductSelect.focus();
                       ktProductSelect.click();
                       
                       console.log("Found products:", response.data.products.length);
                   } else {
                       alert("No products found for brand: " + brand + (searchTerm ? " with search term: " + searchTerm : ""));
                   }
               } else {
                   alert("Error: " + (response.data ? response.data.message : "Unknown error"));
               }
           },
           error: function(xhr, status, errThrown) {
               button.text("Find Products").prop("disabled", false);
               console.error("Search error:", errThrown);
               alert("Error searching brand: " + errThrown);
           }
       });
   });
   
   // Add new product
   $("#add-new-product-btn").on("click", function() {
       // Clear the form first
       $("#add-product-form input[type='text']").val("");
       $("#add-product-form textarea").val("");
       $("#last-sku-display").text("");
       
       $("#add-product-form").show();
   });

   $("#cancel-add-product").on("click", function() {
       $("#add-product-form").hide();
   });

   // Get last SKU for brand
   $("#check-last-sku").on("click", function() {
       const brand = $("#new-product-brand").val();
       
       if (!brand) {
           alert("Please enter a brand first");
           return;
       }
       
       // Show loading indicator
       $(this).text("Checking...").prop("disabled", true);
       
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "get_last_sku",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
               brand: brand
           },
           success: function(response) {
               $("#check-last-sku").text("Get Last SKU for Brand").prop("disabled", false);
               
               if (response.success) {
                   if (response.data.skus && response.data.skus.length > 0) {
                       const skuList = response.data.skus.join(", ");
                       $("#last-sku-display").text("Last SKUs: " + skuList);
                   } else {
                       $("#last-sku-display").text("No SKUs found for this brand");
                   }
               } else {
                   alert("Error: " + (response.data ? response.data.message : "Unknown error"));
               }
           },
           error: function(xhr, status, errThrown) {
               $("#check-last-sku").text("Get Last SKU for Brand").prop("disabled", false);
               console.error("SKU check error:", errThrown);
               alert("Error getting last SKU: " + errThrown);
           }
       });
   });

   // Get product categories from database
   $("#get-product-category").on("click", function() {
       var button = $(this);
       button.text("Loading...").prop("disabled", true);
       
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "get_product_categories",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>'
           },
           success: function(response) {
               button.text("Get Categories from Database").prop("disabled", false);
               
               if (response.success) {
                   // Clear existing options except the first one
                   $("#new-product-category option:not(:first)").remove();
                   
                   // Add categories
                   if (response.data.categories && response.data.categories.length > 0) {
                       $.each(response.data.categories, function(index, category) {
                           $("#new-product-category").append('<option value="' + category + '">' + category + '</option>');
                       });
                       
                       alert("Categories loaded successfully. Found " + response.data.categories.length + " categories.");
                   } else {
                       alert("No categories found in the database.");
                   }
               } else {
                   alert("Error: " + (response.data ? response.data.message : "Unknown error"));
               }
           },
           error: function(xhr, status, errThrown) {
               button.text("Get Categories from Database").prop("disabled", false);
               console.error("Categories load error:", errThrown);
               alert("Error loading categories: " + errThrown);
           }
       });
   });
   
   // Save new product
   $("#save-new-product").on("click", function() {
       const brand = $("#new-product-brand").val();
       const productTitle = $("#new-product-title").val();
       const sku = $("#new-product-sku").val();
       const productCategory = $("#new-product-category").val();
       const seatRow = $("#new-product-seat-row").val();
       const seatNumber = $("#new-product-seat-number").val();
       const seatsReference = $("#new-product-seats-reference").val();
       const mainPhoto = $("#new-product-main-photo").val();
       const multiplePhotos = $("#new-product-photos").val();
       const roomId = $("#new-product-room-id").val(); // Get room_id from form
       
       if (!brand || !productTitle || !sku) {
           alert("Please fill in all required fields");
           return;
       }
       
       // Show loading indicator
       $(this).text("Saving...").prop("disabled", true);
       
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "add_new_product",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
               brand: brand,
               product_title: productTitle,
               sku: sku,
               product_category: productCategory,
               seat_row: seatRow,
               seat_number: seatNumber,
               seats_reference: seatsReference,
               main_photo: mainPhoto,
               multiple_photos: multiplePhotos,
               room_id: roomId // Include room_id in AJAX request
           },
           success: function(response) {
               // Reset button
               $("#save-new-product").text("Save Product").prop("disabled", false);
               
               if (response.success) {
                   alert("Product added successfully");
                   
                   // Clear form
                   $("#new-product-brand").val("");
                   $("#new-product-title").val("");
                   $("#new-product-sku").val("");
                   $("#new-product-category").val("");
                   $("#new-product-seat-row").val("");
                   $("#new-product-seat-number").val("");
                   $("#new-product-seats-reference").val("");
                   $("#new-product-main-photo").val("");
                   $("#new-product-photos").val("");
                   $("#new-product-room-id").val("1"); // Reset to default room_id
                   $("#last-sku-display").text("");
                   
                   // Hide form
                   $("#add-product-form").hide();
                   
                   // Refresh matches
                   loadMatches();
               } else {
                   alert("Error: " + (response.data ? response.data.message : "Unknown error"));
               }
           },
           error: function(xhr, status, errThrown) {
               $("#save-new-product").text("Save Product").prop("disabled", false);
               console.error("Add product error:", errThrown);
               alert("Error adding product: " + errThrown);
           }
       });
   });
   
   // Edit product
   $(document).on("click", ".edit-icon", function() {
       const sku = $(this).data("sku");
       openEditProductDialog(sku);
   });
   
   function openEditProductDialog(sku) {
       console.log("Opening edit dialog for SKU:", sku);
       
       // Get product data from the selected product in the table
       const selectedProduct = $(`option[value="${sku}"]:selected`);
       if (selectedProduct.length === 0) {
           alert("Product not found");
           return;
       }
       
       // Extract the full product title - this needs to be improved
       let productText = selectedProduct.text();
       let productTitle = "";
       
       // Extract title more carefully to include all the information
       if (productText.includes(" - ")) {
           // Split on first occurrence of " - " only
           productTitle = productText.split(" - ")[1];
           
           // If there's dimension info in parentheses, keep that part of the title
           if (productTitle.includes("(")) {
               productTitle = productTitle.split(" (")[0];
           }
       } else {
           productTitle = productText;
       }
       
       // Fill the dialog form with product data
       $("#edit-product-sku").val(sku);
       $("#edit-product-title").val(productTitle);
       
       // Fix for dimension extraction
       let dimensions = null;
       if (productText) {
           dimensions = productText.match(/\(([^)]+)\)/);
       }

       if (dimensions && dimensions.length > 1) {
           const dimensionParts = dimensions[1].split("/");
           if (dimensionParts.length >= 1) {
               // Extract ring size (first part before the "/")
             $("#edit-product-seat-row").val(dimensionParts[0].trim());
               
               // Handle length (part after "/")
               if (dimensionParts.length > 1) {
                   // Remove any closing parenthesis or other characters
                   let length = dimensionParts[1].trim();
                   length = length.replace("盒)", "").trim();
                   $("#edit-product-seat-number").val(length);
               }
           }
       }
       
       // Clear existing image previews
       $('.image-preview, .images-preview').remove();
       
       // Also try to fetch more details from the server
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "get_product_details",
               nonce: '<?php echo wp_create_nonce("kt-cigar-matcher-nonce"); ?>',
               sku: sku
           },
           success: function(response) {
               if (response.success && response.data) {
                   // Update form with full product details
                   $("#edit-product-title").val(response.data.product_title);
                   $("#edit-product-seat-row").val(response.data.seat_row);
                   $("#edit-product-seat-number").val(response.data.seat_number);
                   $("#edit-product-seats-reference").val(response.data.seats_reference);
                   
                   // Add photo fields
                   $("#edit-product-main-photo").val(response.data.main_photo);
                   $("#edit-product-photos").val(response.data.multiple_photos);
                   
                   // Trigger the change event to show previews
                   $("#edit-product-main-photo").trigger("change");
                   $("#edit-product-photos").trigger("change");
               }
           }
       });
       
       console.log("Dialog initialized with:", {
           sku: sku,
           title: productTitle
       });
       
       // Open the dialog
       $("#edit-product-dialog").dialog("open");
   }
   
   // Save product changes
   function saveProductChanges() {
       const sku = $("#edit-product-sku").val();
       const productTitle = $("#edit-product-title").val();
       const seatRow = $("#edit-product-seat-row").val();
       const seatNumber = $("#edit-product-seat-number").val();
       const seatsReference = $("#edit-product-seats-reference").val();
       const mainPhoto = $("#edit-product-main-photo").val();
       const multiplePhotos = $("#edit-product-photos").val();
       
       if (!sku || !productTitle) {
           alert("SKU and Product Title are required");
           return;
       }
       
       // Disable save button
       $(".ui-dialog-buttonpane button:contains('Save Changes')").button("disable").text("Saving...");
       
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "edit_kt_product",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
               sku: sku,
               product_title: productTitle,
               seat_row: seatRow,
               seat_number: seatNumber,
               seats_reference: seatsReference,
               main_photo: mainPhoto,
               multiple_photos: multiplePhotos
           },
           success: function(response) {
               // Reset button
               $(".ui-dialog-buttonpane button:contains('Saving...')").button("enable").text("Save Changes");
               
               if (response.success) {
                   alert("Product updated successfully");
                   $("#edit-product-dialog").dialog("close");
                   
                   // Refresh matches
                   loadMatches();
               } else {
                   alert("Error: " + (response.data ? response.data.message : "Unknown error"));
               }
           },
           error: function(xhr, status, errThrown) {
               $(".ui-dialog-buttonpane button:contains('Saving...')").button("enable").text("Save Changes");
               console.error("Edit product error:", errThrown);
               alert("Error updating product: " + errThrown);
           }
       });
   }
   
   // Save CSV template
   function saveCSVTemplate(templateName, columnMappings) {
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "save_csv_template",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
               template_name: templateName,
               column_mappings: JSON.stringify(columnMappings),
               template_id: currentTemplateId
           },
           success: function(response) {
               if (response.success) {
                   alert("Template '" + templateName + "' saved successfully");
                   console.log("Template saved successfully");
                   loadSavedTemplates();
                   loadTemplateManagement();
               } else {
                   // Show error message to user
                   alert("Error saving template: " + (response.data ? response.data.message : "Unknown error"));
                   console.error("Error saving template: " + (response.data ? response.data.message : "Unknown error"));
               }
           },
           error: function(xhr, status, errThrown) {
               alert("Error saving template: " + errThrown);
               console.error("Error saving template:", errThrown);
           }
       });
   }
   
   // Load saved templates
   function loadSavedTemplates() {
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "get_csv_templates",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>'
           },
           success: function(response) {
               if (response.success) {
                   // Populate template dropdown
                   const templateDropdown = $("#csv-template");
                   templateDropdown.empty();
                   templateDropdown.append('<option value="">Select a template</option>');
                   
                   if (response.data.templates && response.data.templates.length > 0) {
                       response.data.templates.forEach(function(template) {
                           templateDropdown.append(`<option value="${template.id}">${template.template_name}</option>`);
                       });
                   }
               }
           }
       });
   }
   
  // Load CSV template
$("#csv-template").on("change", function() {
    const templateId = $(this).val();
    
       if (!templateId) return;
       
       currentTemplateId = templateId;
       
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "load_csv_template",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
               template_id: templateId
           },
           success: function(response) {
               if (response.success) {
                   // Set template name
                   $("#template-name").val(response.data.template_name);
                   
                   // Show message
                   alert("Template " + response.data.template_name + " loaded successfully.");
               } else {
                   alert("Error: " + (response.data ? response.data.message : "Unknown error"));
               }
           },
           error: function(xhr, status, errThrown) {
               console.error("Template load error:", errThrown);
               alert("Error loading template: " + errThrown);
           }
       });
   });
   
   // Save supplier template
   function saveSupplierTemplate(supplierName, fileChecksum, productCount, batchSize) {
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "save_supplier_template",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
               supplier_name: supplierName,
               file_checksum: fileChecksum,
               product_count: productCount,
               batch_size: batchSize || 5
           },
           success: function(response) {
               if (response.success) {
                   console.log("Supplier template saved successfully");
                   loadSupplierTemplates(); // Refresh the dropdown
               } else {
                   console.error("Error saving supplier template: " + (response.data ? response.data.message : "Unknown error"));
               }
           },
           error: function(xhr, status, errThrown) {
               console.error("Error saving supplier template:", errThrown);
           }
       });
   }
   
   // Load supplier templates
   function loadSupplierTemplates() {
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "get_supplier_templates",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>'
           },
           success: function(response) {
               if (response.success) {
                   // Populate supplier dropdown
                   const supplierDropdown = $("#supplier-template");
                   supplierDropdown.empty();
                   supplierDropdown.append('<option value="">Select a supplier</option>');
                   
                   if (response.data.templates && response.data.templates.length > 0) {
                       response.data.templates.forEach(function(template) {
                           const date = new Date(template.last_upload_date);
                           const dateStr = date.toLocaleDateString();
                           supplierDropdown.append(`<option value="${template.supplier_name}">${template.supplier_name} (${dateStr}, ${template.mapped_count}/${template.product_count})</option>`);
                       });
                   }
               }
           },
           error: function(xhr, status, errThrown) {
               console.error("Error loading supplier templates:", errThrown);
           }
       });
   }
   
   // Load supplier template
   $("#load-supplier-template").on("click", function() {
       const supplierName = $("#supplier-template").val();
       
       if (!supplierName) {
           alert("Please select a supplier");
           return;
       }
       
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "load_supplier_template",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
               supplier_name: supplierName
           },
           success: function(response) {
               if (response.success) {
                   // Set supplier name in the form
                   $("#supplier-name").val(supplierName);
                   
                   // Update batch size if available
                   if (response.data.batch_size) {
                       $("#batch-size").val(response.data.batch_size);
                       batchSize = parseInt(response.data.batch_size);
                   }
                   
                   // Show matching results section
                   $("#matching-results-container").show();
                   
                   // Reset processing state
                   currentPosition = 0;
                   totalProducts = response.data.product_count || 0;
                   
                   // Update progress bar to reflect loaded state
                   $("#progress-bar-fill").css("width", "0%");
                   $("#progress-status").text(`Ready to start (0 of ${totalProducts} products processed)`);
                   $("#start-processing").prop("disabled", false).text("Start Processing");
                   $("#pause-processing, #resume-processing").hide();
                   
                   // Load matches with existing mappings
                   loadMatches();
                   
                   alert("Supplier template loaded successfully. " + response.data.mapped_count + " product mappings loaded. Batch size set to " + batchSize + ".");
               } else {
                   alert("Error: " + (response.data ? response.data.message : "Unknown error"));
               }
           },
           error: function(xhr, status, errThrown) {
               console.error("Template load error:", errThrown);
               alert("Error loading template: " + errThrown);
           }
       });
   });
   
   // Export mapped products as CSV
   $("#export-mapped-csv").on("click", function() {
       const supplierName = $("#supplier-name").val();
       
       if (!supplierName) {
           alert("Please enter or select a supplier name first");
           return;
       }
       
       $(this).text("Generating...").prop("disabled", true);
       
       $.ajax({
           url: ajaxurl,
           type: "POST",
           data: {
               action: "export_mapped_products",
               nonce: '<?php echo wp_create_nonce('kt-cigar-matcher-nonce'); ?>',
               supplier_name: supplierName
           },
           success: function(response) {
               $("#export-mapped-csv").text("Export Mapped Products as CSV").prop("disabled", false);
               
               if (response.success) {
                   // Create download link
                   const link = document.createElement('a');
                   link.href = response.data.file_url;
                   link.download = response.data.filename;
                   document.body.appendChild(link);
                   link.click();
                   document.body.removeChild(link);
                   
                   alert("CSV exported successfully. The download should start automatically.");
               } else {
                   alert("Error: " + (response.data ? response.data.message : "Unknown error"));
               }
           },
           error: function(xhr, status, errThrown) {
               $("#export-mapped-csv").text("Export Mapped Products as CSV").prop("disabled", false);
               console.error("Export error:", errThrown);
               alert("Error exporting CSV: " + errThrown);
           }
       });
   });
});
</script>

<?php
   }
   
   /**
    * AJAX: Upload supplier CSV
    */
   public function ajax_upload_supplier_csv() {
       check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
       
       if (!current_user_can('manage_options')) {
           wp_send_json_error(array('message' => 'Insufficient permissions'));
       }
       
       if (!isset($_FILES['supplier_csv'])) {
           wp_send_json_error(array('message' => 'No file uploaded'));
       }
       
       $file = $_FILES['supplier_csv'];
       
       // Check for upload errors
       if ($file['error'] !== UPLOAD_ERR_OK) {
           wp_send_json_error(array('message' => 'File upload error: ' . $file['error']));
       }
       
       // Validate file type
       $file_type = wp_check_filetype(basename($file['name']));
       if ($file_type['ext'] !== 'csv') {
           wp_send_json_error(array('message' => 'Please upload a CSV file'));
       }
       
       // Create a temporary file
       $upload_dir = wp_upload_dir();
       $temp_file = $upload_dir['basedir'] . '/kt_cigar_supplier_' . time() . '.csv';
       
       if (!move_uploaded_file($file['tmp_name'], $temp_file)) {
           wp_send_json_error(array('message' => 'Failed to save uploaded file'));
       }
       
       // Read the CSV file
       $handle = fopen($temp_file, 'r');
       if (!$handle) {
           wp_send_json_error(array('message' => 'Could not open the CSV file'));
       }
       
	   
	   // Add these lines to handle encoding
setlocale(LC_ALL, 'en_US.UTF-8');
if (function_exists('mb_convert_encoding')) {
    mb_internal_encoding('UTF-8');
}
       // Get the headers
       $headers = fgetcsv($handle);
       if (!$headers) {
           fclose($handle);
           unlink($temp_file);
           wp_send_json_error(array('message' => 'Empty or invalid CSV file'));
       }
       
       // Normalize headers
       $headers = array_map('trim', $headers);
       
       // Check if the required columns exist
       $required_columns = array('ID', 'Title', 'Ring Size', 'Length');
       $missing_columns = array();
       
       foreach ($required_columns as $column) {
           if (!in_array($column, $headers)) {
               $missing_columns[] = $column;
           }
       }
       
       if (!empty($missing_columns)) {
           fclose($handle);
           unlink($temp_file);
           wp_send_json_error(array(
               'message' => 'Missing required columns: ' . implode(', ', $missing_columns)
           ));
       }
       
       // Read all products from the CSV
       $products = array();
       while (($data = fgetcsv($handle)) !== false) {
           if (count($data) !== count($headers)) {
               continue; // Skip rows with incorrect column count
           }
           
           $product = array_combine($headers, $data);
           $products[] = $product;
       }
       
       fclose($handle);
       unlink($temp_file);
       
       // Get supplier name from the form
       $supplier_name = isset($_POST['supplier_name']) ? sanitize_text_field($_POST['supplier_name']) : '';
       
       // Get batch size from the form
       $batch_size = isset($_POST['batch_size']) ? intval($_POST['batch_size']) : 5;
       
       // Calculate file checksum for identifying this upload
       $file_checksum = md5(serialize($products));
       
       // Store products in session
       set_transient('kt_cigar_supplier_products', $products, 12 * HOUR_IN_SECONDS);
       
       // If supplier name is provided, store it with the products
       if (!empty($supplier_name)) {
           // Store supplier name in session
           set_transient('kt_cigar_current_supplier', $supplier_name, 12 * HOUR_IN_SECONDS);
           
           // Also store the file checksum
           set_transient('kt_cigar_current_checksum', $file_checksum, 12 * HOUR_IN_SECONDS);
       }
       
       // Extract unique brands and years for filters
       $brands = array();
       $years = array();
       
       foreach ($products as $product) {
           $title = isset($product['Title']) ? $product['Title'] : '';
           
           // Extract years
           if (preg_match('/\b(19[5-9][0-9]|20[0-2][0-9]|2030)\b/', $title, $year_matches)) {
               if (!in_array($year_matches[1], $years)) {
                   $years[] = $year_matches[1];
               }
           }
           
           // Use the KT_Cigar_Mappings class to extract brand
           $brand = KT_Cigar_Mappings::extract_brand($title);
           
           if (!empty($brand) && !in_array($brand, $brands)) {
               $brands[] = $brand;
           }
       }
       
       // Prepare column mappings for template
       $column_mappings = array();
       foreach ($headers as $header) {
           $column_mappings[$header] = $header;
       }
       
       wp_send_json_success(array(
           'message' => 'CSV uploaded successfully',
           'product_count' => count($products),
           'brands' => $brands,
           'years' => $years,
           'column_mappings' => $column_mappings,
           'file_checksum' => $file_checksum,
           'supplier_name' => $supplier_name
       ));
   }
public function ajax_process_batch_products() {
    check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
    
    if (!current_user_can('manage_options')) {
        wp_send_json_error(array('message' => 'Insufficient permissions'));
    }
    
    // Get supplier products
    $supplier_products = get_transient('kt_cigar_supplier_products');
    $supplier_name = get_transient('kt_cigar_current_supplier');
    
    if (empty($supplier_products)) {
        wp_send_json_error(array('message' => 'No supplier products found'));
    }
    
    // Get position from request, or from stored position
    $position = isset($_POST['position']) ? intval($_POST['position']) : 0;
    $batch_size = isset($_POST['batch_size']) ? intval($_POST['batch_size']) : 5;
    
    // Validate position
    if ($position < 0 || $position >= count($supplier_products)) {
        wp_send_json_error(array('message' => 'Invalid position'));
    }
    
    // Calculate end position for this batch
    $end_position = min($position + $batch_size, count($supplier_products));
    
    // Prepare batch results array and match counters
    $batch_results = array();
    $match_counts = array(
        'exact' => 0,
        'close' => 0,
        'manual' => 0,
        'none' => 0
    );
    
    // Get internal products once for all batch items
    global $wpdb;
    $internal_products = $wpdb->get_results(
        "SELECT sku, product_title, brand, seat_row, seat_number, seats_reference 
         FROM {$wpdb->prefix}{$this->master_table}"
    );
    
    // Transform internal products
    $transformed_internal = array();
    foreach ($internal_products as $int_product) {
        // Create a product data array for processing

$product_data = array(
    'sku' => $int_product->sku,
    'title' => $int_product->product_title,
    'brand' => $int_product->brand,
    'seat_row' => $int_product->seat_row,
    'seat_number' => $int_product->seat_number
);

$processed_internal = KT_Cigar_Mappings::process_internal_product($product_data);

// Make sure product code is set for matching
$processed_internal['product_code'] = $int_product->sku;		
		
		
		
		
		
        // Make sure product code is set for matching
        $processed_internal['product_code'] = $int_product->sku;
        
        $transformed_internal[] = $processed_internal;
    }
    
    // Process each product in the batch
    for ($i = $position; $i < $end_position; $i++) {
        $product = $supplier_products[$i];
        
        // Process this product
        $dimensions = isset($product['Ring Size']) && isset($product['Length']) ? 
                      $product['Ring Size'] . '/' . $product['Length'] : 'N/A';
                      
        $processed_supplier = KT_Cigar_Mappings::process_supplier_product(
            $product['Title'],
            $dimensions
        );
        
		
		
       $matches = KT_Cigar_Mappings::find_best_matches_debug(
    $processed_supplier,
    $transformed_internal,
    3, // Limit to 3 matches
    true // Include debug info
);
        $match_status = 'no_match';
        $best_match_info = null;
        $matched_terms = array();
        
        // Handle match results
        if (!empty($matches)) {
            $best_match = $matches[0];
            
            if ($best_match['match_type'] === 'Exact Match') {
                // Check if there's a year mismatch (additional validation)
                $year_mismatch = false;
                
                // Extract years from both titles
                $supplier_year = null;
                $internal_year = null;
                
                if (preg_match('/\b(19|20)(\d{2})\b/', $product['Title'], $s_matches)) {
                    $supplier_year = $s_matches[1] . $s_matches[2];
                }
                
                if (preg_match('/\b(19|20)(\d{2})\b/', $best_match['product']['title'], $i_matches)) {
                    $internal_year = $i_matches[1] . $i_matches[2];
                }
                
                // If both have years and they don't match, don't count as exact match
                if ($supplier_year && $internal_year && $supplier_year !== $internal_year) {
                    $year_mismatch = true;
                    $match_status = 'close_match';
                    $match_counts['close']++;
                } else {
                    $match_status = 'exact_match';
                    $match_counts['exact']++;
                }
                
                // Get matched terms
                $matched_terms = isset($best_match['matched_terms']) ? $best_match['matched_terms'] : array();
                if (is_array($matched_terms)) {
                    $matched_terms = array_map(function($terms) {
                        return is_array($terms) ? implode(', ', $terms) : $terms;
                    }, $matched_terms);
                    $matched_terms = array_filter($matched_terms);
                } else {
                    $matched_terms = array();
                }
                
                // Save mapping with appropriate confidence level
                $this->save_mapping(
                    $product['ID'],
                    $product['Title'],
                    $supplier_name,
                    $best_match['product']['product_code'],
                    $year_mismatch ? 'medium' : 'high',
                    implode(', ', $matched_terms)
                );
                
                $best_match_info = array(
                    'sku' => $best_match['product']['product_code'],
                    'title' => $best_match['product']['title'],
                    'score' => round($best_match['score'], 1)
                );
            }
            else if ($best_match['match_type'] === 'Close Match') {
                $match_status = 'close_match';
                $match_counts['close']++;
                
                // Get matched terms
                $matched_terms = isset($best_match['matched_terms']) ? $best_match['matched_terms'] : array();
                if (is_array($matched_terms)) {
                    $matched_terms = array_map(function($terms) {
                        return is_array($terms) ? implode(', ', $terms) : $terms;
                    }, $matched_terms);
                    $matched_terms = array_filter($matched_terms);
                } else {
                    $matched_terms = array();
                }
                
                // Save mapping
                $this->save_mapping(
                    $product['ID'],
                    $product['Title'],
                    $supplier_name,
                    $best_match['product']['product_code'],
                    'medium',
                    implode(', ', $matched_terms)
                );
                
                $best_match_info = array(
                    'sku' => $best_match['product']['product_code'],
                    'title' => $best_match['product']['title'],
                    'score' => round($best_match['score'], 1)
                );
            }
            else if ($best_match['match_type'] === 'Possible Match') {
                $match_status = 'possible_match';
                $match_counts['none']++; // Count as no match in the UI
                
                // Get matched terms but don't save mapping for possible matches automatically
                $matched_terms = isset($best_match['matched_terms']) ? $best_match['matched_terms'] : array();
                if (is_array($matched_terms)) {
                    $matched_terms = array_map(function($terms) {
                        return is_array($terms) ? implode(', ', $terms) : $terms;
                    }, $matched_terms);
                    $matched_terms = array_filter($matched_terms);
                } else {
                    $matched_terms = array();
                }
                
                $best_match_info = array(
                    'sku' => $best_match['product']['product_code'],
                    'title' => $best_match['product']['title'],
                    'score' => round($best_match['score'], 1)
                );
            } else {
                $match_counts['none']++;
            }
        } else {
            $match_counts['none']++;
        }  
        
        // Add to batch results
        $batch_results[] = array(
            'product_id' => $product['ID'],
            'product_title' => $product['Title'],
            'match_status' => $match_status,
            'best_match' => $best_match_info,
            'matched_terms' => $matched_terms
        );
    }
    
    // Clean up memory
    unset($internal_products);
    unset($transformed_internal);
    
    // Return results
    wp_send_json_success(array(
        'position' => $end_position,
        'total' => count($supplier_products),
        'percentage' => round(($end_position / count($supplier_products)) * 100),
        'completed' => ($end_position >= count($supplier_products)),
        'batch_results' => $batch_results,
        'batch_size' => $batch_size,
        'match_counts' => $match_counts
    ));
}
   
   /**
    * AJAX: Process a single product (legacy method - kept for backward compatibility)
    */
   public function ajax_process_single_product() {
       check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
       
       if (!current_user_can('manage_options')) {
           wp_send_json_error(array('message' => 'Insufficient permissions'));
       }
       
       // Get supplier products
       $supplier_products = get_transient('kt_cigar_supplier_products');
       $supplier_name = get_transient('kt_cigar_current_supplier');
       
       if (empty($supplier_products)) {
           wp_send_json_error(array('message' => 'No supplier products found'));
       }
       
       // Get position from request, or from stored position
       $position = isset($_POST['position']) ? intval($_POST['position']) : 0;
       
       // Validate position
       if ($position < 0 || $position >= count($supplier_products)) {
           wp_send_json_error(array('message' => 'Invalid position'));
       }
       
       // Get the product to process
       $product = $supplier_products[$position];
       
       // Process this single product
       $dimensions = isset($product['Ring Size']) && isset($product['Length']) ? 
                     $product['Ring Size'] . '/' . $product['Length'] : 'N/A';
                     
       $processed_supplier = KT_Cigar_Mappings::process_supplier_product(
           $product['Title'],
           $dimensions
       );
       
       // Get internal products
       global $wpdb;
       $internal_products = $wpdb->get_results(
           "SELECT sku, product_title, brand, seat_row, seat_number, seats_reference 
            FROM {$wpdb->prefix}{$this->master_table}"
       );
       
       // Transform internal products
       $transformed_internal = array();
       foreach ($internal_products as $int_product) {
           $int_dimensions = '';
           if (!empty($int_product->seat_row) || !empty($int_product->seat_number)) {
               $int_dimensions = (!empty($int_product->seat_row) ? $int_product->seat_row : '') . '/' . 
                             (!empty($int_product->seat_number) ? $int_product->seat_number : '');
           }
          $product_data = array(
    'sku' => $int_product->sku,
    'title' => $int_product->product_title,
    'brand' => $int_product->brand,
    'seat_row' => $int_product->seat_row,
    'seat_number' => $int_product->seat_number
);

$processed_internal = KT_Cigar_Mappings::process_internal_product($product_data);

// Ensure the product code is set
$processed_internal['product_code'] = $int_product->sku;
           
           $transformed_internal[] = $processed_internal;
       }
       
       // Find matches

 $matches = KT_Cigar_Mappings::find_best_matches_debug(
    $processed_supplier,
    $transformed_internal,
    3, // Limit to 3 matches
    true
);
	   
	   
	   
	   
	   
	   $match_status = 'no_match';
       $best_match_info = null;
       $matched_terms = array();
       
     // Handle match results
       if (!empty($matches)) {
           $best_match = $matches[0];
           
           // Get matched terms
           $matched_terms = $best_match['matched_terms'];
           
           // Get match status
           if ($best_match['match_type'] === 'Exact Match') {
               $match_status = 'exact_match';
               
               // Save mapping
               $this->save_mapping(
                   $product['ID'],
                   $product['Title'],
                   $supplier_name,
                   $best_match['product']['product_code'],
                   'high',
                   implode(', ', $matched_terms)
               );
               
               $best_match_info = array(
                   'sku' => $best_match['product']['product_code'],
                   'title' => $best_match['product']['title'],
                   'score' => round($best_match['score'], 1)
               );
           } 
           else if ($best_match['match_type'] === 'Close Match') {
               $match_status = 'close_match';
               
               // Save mapping
               $this->save_mapping(
                   $product['ID'],
                   $product['Title'],
                   $supplier_name,
                   $best_match['product']['product_code'],
                   'medium',
                   implode(', ', $matched_terms)
               );
               
               $best_match_info = array(
                   'sku' => $best_match['product']['product_code'],
                   'title' => $best_match['product']['title'],
                   'score' => round($best_match['score'], 1)
               );
           }
           else if ($best_match['match_type'] === 'Possible Match') {
               $match_status = 'no_match'; // Treat as no match in UI
               
               // Don't save mapping for possible matches automatically
               $best_match_info = array(
                   'sku' => $best_match['product']['product_code'],
                   'title' => $best_match['product']['title'],
                   'score' => round($best_match['score'], 1)
               );
           }
       }
       
       // Update progress
       $next_position = $position + 1;
       $is_completed = ($next_position >= count($supplier_products));
       
       // Save current position in a transient
       set_transient('kt_cigar_current_position_' . $supplier_name, $next_position, DAY_IN_SECONDS);
       
       // Return results
       wp_send_json_success(array(
           'position' => $next_position,
           'total' => count($supplier_products),
           'percentage' => round(($next_position / count($supplier_products)) * 100),
           'completed' => $is_completed,
           'product_processed' => $product['Title'],
           'match_status' => $match_status,
           'best_match' => $best_match_info,
           'matched_terms' => $matched_terms
       ));
   }
   
   /**
    * Helper: Save a mapping
*/

private function save_mapping($supplier_id, $supplier_title, $supplier_name, $kt_sku, $confidence, $matched_terms = '') {
    global $wpdb;
    $mapping_table = $wpdb->prefix . $this->mapping_table;
    
    // Map confidence levels consistently - use standardized values
    $match_confidence = $confidence;
    if ($confidence === 'high' || $confidence === 'exact') {
        $match_confidence = 'exact';
    } else if ($confidence === 'medium' || $confidence === 'close') {
        $match_confidence = 'close';
    } else if ($confidence === 'low' || $confidence === 'possible') {
        $match_confidence = 'possible';
    } else if ($confidence === 'manual') {
        $match_confidence = 'manual';
    }   
	   
	   
// Double-check for year mismatches in the title and prevent exact match if years don't match
if ($match_confidence === 'exact') {
    // Extract years from both titles
    $supplier_year = null;
    $kt_year = null;
    
    if (preg_match('/\b(19|20)(\d{2})\b/', $supplier_title, $s_matches)) {
        $supplier_year = $s_matches[1] . $s_matches[2];
    }
    
    // Try to get the KT product title
    global $wpdb;
    $master_table = $wpdb->prefix . $this->master_table;
    $kt_title = $wpdb->get_var($wpdb->prepare(
        "SELECT product_title FROM $master_table WHERE sku = %s",
        $kt_sku
    ));
    
    if ($kt_title && preg_match('/\b(19|20)(\d{2})\b/', $kt_title, $k_matches)) {
        $kt_year = $k_matches[1] . $k_matches[2];
    }
    
    // If both have years and they don't match, downgrade from exact to close
    if ($supplier_year && $kt_year && $supplier_year !== $kt_year) {
        $match_confidence = 'close';
        // Add year mismatch info to matched terms
        if (!empty($matched_terms)) {
            $matched_terms .= ', ';
        }
        $matched_terms .= "Year mismatch: $supplier_year vs $kt_year";
    }
}
// Clean up matched terms to avoid redundancy
if (!empty($matched_terms)) {
    $matched_terms_array = is_array($matched_terms) ? $matched_terms : explode(',', $matched_terms);
    $matched_terms_array = array_map('trim', $matched_terms_array);
    $matched_terms_array = array_unique($matched_terms_array);
    $matched_terms = implode(', ', $matched_terms_array);
}
	   
	   
	   
	   
       // Check if mapping already exists
       $existing = $wpdb->get_row($wpdb->prepare(
           "SELECT id FROM $mapping_table WHERE supplier_name = %s AND supplier_id = %s",
           $supplier_name, $supplier_id
       ));
       
       if ($existing) {
           // Update existing mapping
           $wpdb->update(
               $mapping_table,
               array(
                   'kt_sku' => $kt_sku,
                   'match_confidence' => $match_confidence,
                   'matched_terms' => $matched_terms
               ),
               array('id' => $existing->id),
               array('%s', '%s', '%s'),
               array('%d')
           );
       } else {
           // Insert new mapping
           $wpdb->insert(
               $mapping_table,
               array(
                   'supplier_id' => $supplier_id,
                   'supplier_name' => $supplier_name,
                   'supplier_title' => $supplier_title,
                   'kt_sku' => $kt_sku,
                   'match_confidence' => $match_confidence,
                   'matched_terms' => $matched_terms
               ),
               array('%s', '%s', '%s', '%s', '%s', '%s')
           );
       }
   }
   
   /**
    * AJAX: Match products
    * Enhanced with KT_Cigar_Mappings integration for better matching
    */
   public function ajax_match_products() {
       check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
       
       if (!current_user_can('manage_options')) {
           wp_send_json_error(array('message' => 'Insufficient permissions'));
       }
       
       // Get pagination parameters
       $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
       $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 20;
       $offset = ($page - 1) * $per_page;
       
       // Get filter parameters
       $brand_filter = isset($_POST['brand']) ? sanitize_text_field($_POST['brand']) : '';
       $status_filter = isset($_POST['status']) ? sanitize_text_field($_POST['status']) : '';
       $year_filter = isset($_POST['year']) ? sanitize_text_field($_POST['year']) : '';
       $show_only_matches = isset($_POST['show_only_matches']) && $_POST['show_only_matches'] == 1;
       
       // Get supplier products from session
       $supplier_products = get_transient('kt_cigar_supplier_products');
       $supplier_name = get_transient('kt_cigar_current_supplier');
       
       if (empty($supplier_products)) {
           wp_send_json_error(array('message' => 'No supplier products found. Please upload a CSV file first.'));
       }
       
       // Get all mappings for this supplier
       global $wpdb;
       $mappings = array();
       
       if (!empty($supplier_name)) {
           $mappings_results = $wpdb->get_results($wpdb->prepare(
               "SELECT supplier_id, kt_sku, match_confidence, matched_terms FROM {$wpdb->prefix}{$this->mapping_table} WHERE supplier_name = %s",
               $supplier_name
           ));
           
           foreach ($mappings_results as $mapping) {
               $mappings[$mapping->supplier_id] = array(
                   'kt_sku' => $mapping->kt_sku,
                   'confidence' => $mapping->match_confidence,
                   'matched_terms' => $mapping->matched_terms
               );
           }
       }
       
       // Get internal products for matching
       $internal_products_db = $wpdb->get_results(
           "SELECT sku, product_title, brand, seat_row, seat_number, seats_reference 
            FROM {$wpdb->prefix}{$this->master_table}"
       );
       
       // Transform internal products to the format required by KT_Cigar_Mappings
       $internal_products = array();
       foreach ($internal_products_db as $product) {
           $dimensions = '';
           if (!empty($product->seat_row) || !empty($product->seat_number)) {
               $dimensions = (!empty($product->seat_row) ? $product->seat_row : '') . '/' . 
                             (!empty($product->seat_number) ? $product->seat_number : '');
           }
          $product_data = array(
    'sku' => $product->sku,
    'title' => $product->product_title,
    'brand' => $product->brand,
    'seat_row' => $product->seat_row,
    'seat_number' => $product->seat_number
);

$processed_product = KT_Cigar_Mappings::process_internal_product($product_data);
           
           $internal_products[] = $processed_product;
       }
      $match_count = array(
   'exact' => 0,
   'close' => 0,
   'manual' => 0,
   'possible' => 0, // Add possible match counter
   'none' => 0,
   'total' => 0
);
       
       // Add time limit extension to avoid timeouts
       set_time_limit(120); // Extend time limit to 120 seconds
       
       // Filter products based on criteria
       $filtered_products = array();
       
       foreach ($supplier_products as $product) {
           $supplier_id = $product['ID'];
           $supplier_title = $product['Title'];
           $supplier_dimensions = isset($product['Ring Size']) && isset($product['Length']) ? 
                                 $product['Ring Size'] . '/' . $product['Length'] : 'N/A';
           
           // Extract year from title if present
           $has_year_match = false;
           if (!empty($year_filter)) {
               if (preg_match('/\b(' . $year_filter . ')\b/', $supplier_title)) {
                   $has_year_match = true;
               }
           }
           
           // Skip if year filter is active and no match
           if (!empty($year_filter) && !$has_year_match) {
               continue;
           }
           
           // Apply brand filter if specified - continued
               if (!empty($brand_filter)) {
                   // Use the KT_Cigar_Mappings class for brand extraction
                   $product_brand = KT_Cigar_Mappings::extract_brand($supplier_title);
                   
                   if ($product_brand !== $brand_filter) {
                       continue;
                   }
               }
               
               // Check if this product is already mapped
               $kt_sku = '';
               $match_status = "No Match";
               $match_confidence = "none";
               $matched_terms_text = '';
               
               if (isset($mappings[$supplier_id])) {
                   $kt_sku = $mappings[$supplier_id]['kt_sku'];
                   $match_confidence = $mappings[$supplier_id]['confidence'];
                   $matched_terms_text = $mappings[$supplier_id]['matched_terms'] ?? '';
                   
                   // Translate confidence level to appropriate display status
                   if ($match_confidence === 'exact') {
                       $match_status = 'Exact Match';
                       $match_count['exact']++;
                   } else if ($match_confidence === 'close') {
                       $match_status = 'Close Match';
                       $match_count['close']++;
                   } else {
                       $match_status = 'Manual Match';
                       $match_count['manual']++;
                   }
                   if (!empty($status_filter)) {
   if ($status_filter === 'exact' && $match_status !== 'Exact Match') {
       continue;
   } elseif ($status_filter === 'close' && $match_status !== 'Close Match') {
       continue;
   } elseif ($status_filter === 'possible' && $match_status !== 'Possible Match') {
       continue;
   } elseif ($status_filter === 'none' && $match_status !== 'No Match') {
       continue;
   } elseif ($status_filter === 'manual' && $match_status !== 'Manual Match') {
       continue;
   }
}
                 
				   
                   
                   // Skip if show only matches is true and this has no match
                   if ($show_only_matches && $match_status === 'No Match') {
                       continue;
                   }
                   
                   // Add to filtered products
                   $filtered_products[] = $product;
               } else {
                   // Apply status filter
                   if (!empty($status_filter) && $status_filter !== 'none') {
                       continue; // Skip non-matches when filtering by match status
                   }
                   
                   // Skip if show only matches is true
                   if ($show_only_matches) {
                       continue;
                   }
                   
                   // Add to filtered products
                   $filtered_products[] = $product;
                   $match_count['none']++;
               }
           }
           
           // Update total count
           $match_count['total'] = count($filtered_products);
           
           // Paginate the filtered products
           $start_index = $offset;
           $end_index = min($offset + $per_page, count($filtered_products));
           $paginated_products = array_slice($filtered_products, $start_index, $per_page);
           
           // Process the paginated set
           foreach ($paginated_products as $product) {
               $supplier_id = $product['ID'];
               $supplier_title = $product['Title'];
               $supplier_dimensions = isset($product['Ring Size']) && isset($product['Length']) ? 
                                   $product['Ring Size'] . '/' . $product['Length'] : 'N/A';
               
               // Check if this product is already mapped
               $kt_sku = '';
               $match_status = "No Match";
               $match_confidence = "none";
               $matched_terms_array = array();
               
               if (isset($mappings[$supplier_id])) {
                   $kt_sku = $mappings[$supplier_id]['kt_sku'];
                   $match_confidence = $mappings[$supplier_id]['confidence'];
                   
                   // Parse matched terms
                   if (!empty($mappings[$supplier_id]['matched_terms'])) {
                       $matched_terms_array = explode(', ', $mappings[$supplier_id]['matched_terms']);
                   }
                   
                   // Translate confidence level to display status
                   if ($match_confidence === 'exact') {
                       $match_status = 'Exact Match';
                   } else if ($match_confidence === 'close') {
                       $match_status = 'Close Match';
                   } else {
                       $match_status = 'Manual Match';
                   }
                   
                   // Get potential matches for display in dropdown
                   $potential_matches = array();
                   
                   // In case of existing mapping, get the info for the mapped product
                   if (!empty($kt_sku)) {
                       $kt_product = $wpdb->get_row($wpdb->prepare(
                           "SELECT sku, product_title, brand, seat_row, seat_number FROM {$wpdb->prefix}{$this->master_table} WHERE sku = %s",
                           $kt_sku
                       ));
                       
                       if ($kt_product) {
                           $dimensions = '';
                           if (!empty($kt_product->seat_row) || !empty($kt_product->seat_number)) {
                               $dimensions = (!empty($kt_product->seat_row) ? $kt_product->seat_row : '') . '/' . 
                                           (!empty($kt_product->seat_number) ? $kt_product->seat_number : '');
                           }
                           
                           // Add as the first potential match
                           $potential_matches[] = array(
                               'sku' => $kt_product->sku,
                               'title' => $kt_product->product_title,
                               'brand' => $kt_product->brand,
                               'dimensions' => $dimensions,
                               'score' => 100, // Default score for manually mapped products
                               'match_type' => $match_status
                           );
                       }
                   }
               } else {
                   // Not mapped yet, process and find matches
                   // Process supplier product with enhanced KT_Cigar_Mappings class
                   $processed_supplier = KT_Cigar_Mappings::process_supplier_product(
                       $supplier_title,
                       $supplier_dimensions
                   );
                   
                   // Find potential matches using the enhanced matching algorithm
                   $match_results = KT_Cigar_Mappings::find_best_matches(
                       $processed_supplier,
                       $internal_products,
                       5, // Number of matches to return
                       false // Don't include debug info
                   );
                   
                   if (!empty($match_results)) {
                       // Format potential matches for display
                       $potential_matches = array();
                       foreach ($match_results as $match) {
                           // Get dimensions string
                           $dimensions = '';
                           if (!empty($match['product']['dimension_info']['ring_gauge']) || 
                               !empty($match['product']['dimension_info']['length'])) {
                               $dimensions = 
                                   (!empty($match['product']['dimension_info']['ring_gauge']) ? 
                                   $match['product']['dimension_info']['ring_gauge'] : '?') . '/' . 
                                   (!empty($match['product']['dimension_info']['length']) ? 
                                   $match['product']['dimension_info']['length'] : '?');
                           }
                           
                           $potential_matches[] = array(
                               'sku' => $match['product']['product_code'],
                               'title' => $match['product']['title'],
                               'brand' => $match['product']['brand'],
                               'dimensions' => $dimensions,
                               'score' => round($match['score'], 1),
                               'match_type' => $match['match_type'],
                               'keywords' => implode(', ', $match['matched_terms'])
                           );
                           
                           // Populate matched terms array
                           if ($match['match_type'] === 'Exact Match' || $match['match_type'] === 'Close Match') {
                               $matched_terms_array = $match['matched_terms'];
                           }
                       }
                       
                       $best_match = $match_results[0]; // First match is the best one
                    if ($best_match['match_type'] === 'Exact Match') {
   $kt_sku = $best_match['product']['product_code'];
   $match_status = 'Exact Match';
   $match_confidence = 'exact';
} elseif ($best_match['match_type'] === 'Close Match') {
   $kt_sku = $best_match['product']['product_code'];
   $match_status = 'Close Match';
   $match_confidence = 'close';
} elseif ($best_match['match_type'] === 'Possible Match') {
   $kt_sku = ''; // Don't auto-assign for possible matches
   $match_status = 'Possible Match'; // Display as Possible Match in UI
   $match_confidence = 'possible';
   // Count as possible match in the match counts
   if (isset($match_count['possible'])) {
       $match_count['possible']++;
   } else {
       $match_count['possible'] = 1;
   }
}
                
				   
				   
				   
				   
				   }
               }
			   
			   // Get KT product details if mapped
               $kt_title = '';
               if (!empty($kt_sku)) {
                   $kt_product = $wpdb->get_row($wpdb->prepare(
                       "SELECT product_title FROM {$wpdb->prefix}{$this->master_table} WHERE sku = %s",
                       $kt_sku
                   ));
                   if ($kt_product) {
                       $kt_title = $kt_product->product_title;
                   }
               }
               
               // Extract keywords using KT_Cigar_Mappings
               $keywords = KT_Cigar_Mappings::extract_keywords($supplier_title);
               
               // Add to matches
               $matches[] = array(
                   'supplier_id' => $supplier_id,
                   'supplier_title' => $supplier_title,
                   'supplier_dimensions' => $supplier_dimensions,
                   'match_status' => $match_status,
                   'kt_sku' => $kt_sku,
                   'kt_title' => $kt_title,
                   'potential_matches' => isset($potential_matches) ? $potential_matches : array(),
                   'keywords' => implode(', ', $keywords),
                   'matched_terms' => $matched_terms_array
               );
           }
           
           // Calculate total pages
       
	   $total_pages = ceil(count($filtered_products) / $per_page);
     // Return the paginated results
   wp_send_json_success(array(
       'matches' => $matches,
       'pagination' => array(
           'current_page' => $page,
           'total_pages' => $total_pages,
           'per_page' => $per_page
       ),
       'match_count' => $match_count
   ));
}

/**
 * AJAX: Process a single product (legacy method - kept for backward compatibility)
 */
public function ajax_get_product_categories() {

	   
	   
	   check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
       
       if (!current_user_can('manage_options')) {
           wp_send_json_error(array('message' => 'Insufficient permissions'));
       }
       
       global $wpdb;
       
       // Get distinct categories from the database
       $categories = $wpdb->get_col("SELECT DISTINCT product_category FROM {$wpdb->prefix}{$this->master_table} WHERE product_category != '' ORDER BY product_category ASC");
       
       wp_send_json_success(array('categories' => $categories));
   }
   
   /**
    * AJAX: Get all brands
    */
   public function ajax_get_all_brands() {
       check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
       
       if (!current_user_can('manage_options')) {
           wp_send_json_error(array('message' => 'Insufficient permissions'));
       }
       
       global $wpdb;
       
       // Get all distinct brands
       $brands = $wpdb->get_col("SELECT DISTINCT brand FROM {$wpdb->prefix}{$this->master_table} ORDER BY brand ASC");
       
       wp_send_json_success(array('brands' => $brands));
   }
   
   /**
    * AJAX: Get product details
    */
   public function ajax_get_product_details() {
       check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
       
       if (!current_user_can('manage_options')) {
           wp_send_json_error(array('message' => 'Insufficient permissions'));
       }
       
       global $wpdb;
       
       $sku = isset($_POST['sku']) ? sanitize_text_field($_POST['sku']) : '';
       
       if (empty($sku)) {
           wp_send_json_error(array('message' => 'SKU is required'));
       }
       
       // Get product details
       $product = $wpdb->get_row($wpdb->prepare(
           "SELECT * FROM {$wpdb->prefix}{$this->master_table} WHERE sku = %s",
           $sku
       ));
       
       if (!$product) {
           wp_send_json_error(array('message' => 'Product not found'));
       }
       
       wp_send_json_success(array(
           'product_title' => $product->product_title,
           'brand' => $product->brand,
           'product_category' => $product->product_category,
           'seat_row' => $product->seat_row,
           'seat_number' => $product->seat_number,
           'seats_reference' => $product->seats_reference,
           'main_photo' => $product->main_photo,
           'multiple_photos' => $product->multiple_photos
       ));
   }
   
   /**
    * AJAX: Add new product
    */
   public function ajax_add_new_product() {
       check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
       
       if (!current_user_can('manage_options')) {
           wp_send_json_error(array('message' => 'Insufficient permissions'));
       }
       
       global $wpdb;
       
       $brand = isset($_POST['brand']) ? sanitize_text_field($_POST['brand']) : '';
       $product_title = isset($_POST['product_title']) ? sanitize_text_field($_POST['product_title']) : '';
       $sku = isset($_POST['sku']) ? sanitize_text_field($_POST['sku']) : '';
       $product_category = isset($_POST['product_category']) ? sanitize_text_field($_POST['product_category']) : '';
       $seat_row = isset($_POST['seat_row']) ? sanitize_text_field($_POST['seat_row']) : '';
       $seat_number = isset($_POST['seat_number']) ? sanitize_text_field($_POST['seat_number']) : '';
       $seats_reference = isset($_POST['seats_reference']) ? sanitize_textarea_field($_POST['seats_reference']) : '';
       $main_photo = isset($_POST['main_photo']) ? sanitize_text_field($_POST['main_photo']) : '';
       $multiple_photos = isset($_POST['multiple_photos']) ? sanitize_text_field($_POST['multiple_photos']) : '';
       $room_id = isset($_POST['room_id']) ? intval($_POST['room_id']) : 1;
       
       if (empty($brand) || empty($product_title) || empty($sku)) {
           wp_send_json_error(array('message' => 'Missing required fields'));
       }
       
       // Check if SKU already exists
       $existing = $wpdb->get_var($wpdb->prepare(
           "SELECT id FROM {$wpdb->prefix}{$this->master_table} WHERE sku = %s",
           $sku
       ));
       
       if ($existing) {
           wp_send_json_error(array('message' => 'SKU already exists'));
       }
       
       // Insert new product
       $result = $wpdb->insert(
           "{$wpdb->prefix}{$this->master_table}",
           array(
               'sku' => $sku,
               'product_title' => $product_title,
               'brand' => $brand,
               'product_category' => $product_category,
               'seat_row' => $seat_row,
               'seat_number' => $seat_number,
               'seats_reference' => $seats_reference,
               'main_photo' => $main_photo,
               'multiple_photos' => $multiple_photos,
               'room_id' => $room_id
           ),
           array('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%d')
       );
       
       if ($result === false) {
           wp_send_json_error(array('message' => 'Failed to add product: ' . $wpdb->last_error));
       }
       
       wp_send_json_success(array(
           'message' => 'Product added successfully',
           'product' => array(
               'sku' => $sku,
               'product_title' => $product_title,
               'brand' => $brand,
               'product_category' => $product_category,
               'seat_row' => $seat_row,
               'seat_number' => $seat_number,
               'seats_reference' => $seats_reference,
               'main_photo' => $main_photo,
               'multiple_photos' => $multiple_photos,
               'room_id' => $room_id
           )
       ));
   }
   
   /**
    * AJAX: Update supplier title
    */
   public function ajax_update_supplier_title() {
       check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
       
       if (!current_user_can('manage_options')) {
           wp_send_json_error(array('message' => 'Insufficient permissions'));
       }
       
       $supplier_id = isset($_POST['supplier_id']) ? sanitize_text_field($_POST['supplier_id']) : '';
       $new_title = isset($_POST['new_title']) ? sanitize_text_field($_POST['new_title']) : '';
       
       if (empty($supplier_id) || empty($new_title)) {
           wp_send_json_error(array('message' => 'Missing required fields'));
       }
       
       // Update the supplier products in the session
       $supplier_products = get_transient('kt_cigar_supplier_products');
       if (!empty($supplier_products)) {
           foreach ($supplier_products as &$product) {
               if ($product['ID'] === $supplier_id) {
                   $product['Title'] = $new_title;
                   break;
               }
           }
           set_transient('kt_cigar_supplier_products', $supplier_products, 12 * HOUR_IN_SECONDS);
       }
       
       // Update in the mapping table if exists
       global $wpdb;
       $wpdb->update(
           "{$wpdb->prefix}{$this->mapping_table}",
           array('supplier_title' => $new_title),
           array('supplier_id' => $supplier_id),
           array('%s'),
           array('%s')
       );
       
       wp_send_json_success(array('message' => 'Title updated successfully'));
   }
   
   /**
    * AJAX: Update KT product title
    */
   public function ajax_update_kt_product_title() {
       check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
       
       if (!current_user_can('manage_options')) {
           wp_send_json_error(array('message' => 'Insufficient permissions'));
       }
       
       $sku = isset($_POST['sku']) ? sanitize_text_field($_POST['sku']) : '';
       $new_title = isset($_POST['new_title']) ? sanitize_text_field($_POST['new_title']) : '';
       
       if (empty($sku) || empty($new_title)) {
           wp_send_json_error(array('message' => 'Missing required fields'));
       }
       
       global $wpdb;
       
       // Update product title
       $result = $wpdb->update(
           "{$wpdb->prefix}{$this->master_table}",
           array('product_title' => $new_title),
           array('sku' => $sku),
           array('%s'),
           array('%s')
       );
       
       if ($result === false) {
           wp_send_json_error(array('message' => 'Failed to update product title: ' . $wpdb->last_error));
       }
       
       wp_send_json_success(array('message' => 'Product title updated successfully'));
   }
   
   /**
    * AJAX: Edit KT Product
    */
   public function ajax_edit_kt_product() {
       check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
       
       if (!current_user_can('manage_options')) {
           wp_send_json_error(array('message' => 'Insufficient permissions'));
       }
       
       global $wpdb;
       
       $sku = isset($_POST['sku']) ? sanitize_text_field($_POST['sku']) : '';
       $product_title = isset($_POST['product_title']) ? sanitize_text_field($_POST['product_title']) : '';
       $seat_row = isset($_POST['seat_row']) ? sanitize_text_field($_POST['seat_row']) : '';
       $seat_number = isset($_POST['seat_number']) ? sanitize_text_field($_POST['seat_number']) : '';
       $seats_reference = isset($_POST['seats_reference']) ? sanitize_textarea_field($_POST['seats_reference']) : '';
       $main_photo = isset($_POST['main_photo']) ? sanitize_text_field($_POST['main_photo']) : '';
       $multiple_photos = isset($_POST['multiple_photos']) ? sanitize_text_field($_POST['multiple_photos']) : '';
       
       if (empty($sku)) {
           wp_send_json_error(array('message' => 'SKU is required'));
       }
       
       // Update product
       $update_data = array();
       $update_format = array();
       
       if (!empty($product_title)) {
           $update_data['product_title'] = $product_title;
           $update_format[] = '%s';
       }
       
       if (isset($seat_row)) {
           $update_data['seat_row'] = $seat_row;
           $update_format[] = '%s';
       }
       
       if (isset($seat_number)) {
           $update_data['seat_number'] = $seat_number;
           $update_format[] = '%s';
       }
       
       if (isset($seats_reference)) {
           $update_data['seats_reference'] = $seats_reference;
           $update_format[] = '%s';
       }
       
       // Add photo fields
       $update_data['main_photo'] = $main_photo;
       $update_format[] = '%s';
       
       $update_data['multiple_photos'] = $multiple_photos;
       $update_format[] = '%s';
       
       if (empty($update_data)) {
           wp_send_json_error(array('message' => 'No fields to update'));
       }
       
       $result = $wpdb->update(
           "{$wpdb->prefix}{$this->master_table}",
           $update_data,
           array('sku' => $sku),
           $update_format,
           array('%s')
       );
       
       if ($result === false) {
           wp_send_json_error(array('message' => 'Failed to update product: ' . $wpdb->last_error));
       }
       
       wp_send_json_success(array('message' => 'Product updated successfully'));
   }
   
   /**
    * AJAX: Get last SKU for brand
    */
   public function ajax_get_last_sku() {
       check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
       
       if (!current_user_can('manage_options')) {
           wp_send_json_error(array('message' => 'Insufficient permissions'));
       }
       
       global $wpdb;
       
       $brand = isset($_POST['brand']) ? sanitize_text_field($_POST['brand']) : '';
       
       if (empty($brand)) {
           // If no brand provided, return all brands for datalist
           $brands = $wpdb->get_col("SELECT DISTINCT brand FROM {$wpdb->prefix}{$this->master_table} ORDER BY brand ASC");
           wp_send_json_success(array('brands' => $brands));
           return;
       }
       
       // Get products by exact brand match, ordered by SKU to get the sequence
       $products = $wpdb->get_results($wpdb->prepare(
           "SELECT sku FROM {$wpdb->prefix}{$this->master_table} 
           WHERE brand = %s
           ORDER BY sku DESC
           LIMIT 10",
           $brand
       ));
       
       // If no exact match, try with LIKE
       if (empty($products)) {
           $products = $wpdb->get_results($wpdb->prepare(
               "SELECT sku FROM {$wpdb->prefix}{$this->master_table} 
               WHERE brand LIKE %s
               ORDER BY sku DESC
               LIMIT 10",
               $wpdb->esc_like($brand) . '%'
           ));
       }
       
       $skus = array();
       foreach ($products as $product) {
           $skus[] = $product->sku;
       }
       
       // Also get all distinct brands for the datalist
       $brands = $wpdb->get_col("SELECT DISTINCT brand FROM {$wpdb->prefix}{$this->master_table} ORDER BY brand ASC");
       
       wp_send_json_success(array(
           'skus' => $skus,
           'brands' => $brands
       ));
   }
   
   /**
    * AJAX: Get brand products
    */
   public function ajax_get_brand_products() {
       check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
       
       if (!current_user_can('manage_options')) {
           wp_send_json_error(array('message' => 'Insufficient permissions'));
       }
       
       global $wpdb;
       
       $brand = isset($_POST['brand']) ? sanitize_text_field($_POST['brand']) : '';
       $search_term = isset($_POST['search_term']) ? sanitize_text_field($_POST['search_term']) : '';
       
       if (empty($brand)) {
           wp_send_json_error(array('message' => 'Brand is required'));
       }
       
       // Build query with multiple conditions
       $query = "SELECT id, sku, product_title, brand, seat_row, seat_number, seats_reference FROM {$wpdb->prefix}{$this->master_table} WHERE 1=1";
       $condition_parts = array();
       $args = array();
       
       // Add brand search condition
       $condition_parts[] = "brand LIKE %s";
       $args[] = '%' . $wpdb->esc_like($brand) . '%';
       
       // Add search term if provided
       if (!empty($search_term)) {
           // Extract key phrases from search term
           $key_phrases = KT_Cigar_Mappings::extract_keywords($search_term);
           $key_phrases[] = $search_term; // Add the full search term as well
           
           $search_conditions = array();
           foreach ($key_phrases as $phrase) {
               if (mb_strlen($phrase) >= 2) {
                   $search_conditions[] = "product_title LIKE %s OR sku LIKE %s OR seats_reference LIKE %s";
                   $args[] = '%' . $wpdb->esc_like($phrase) . '%';
                   $args[] = '%' . $wpdb->esc_like($phrase) . '%';
                   $args[] = '%' . $wpdb->esc_like($phrase) . '%';
               }
           }
           
           if (!empty($search_conditions)) {
               $condition_parts[] = "(" . implode(" OR ", $search_conditions) . ")";
           }
       }
       
       // Add all conditions with AND
       if (!empty($condition_parts)) {
           $query .= " AND " . implode(" AND ", $condition_parts);
       }
       
       // Execute query
       $products = $wpdb->get_results($wpdb->prepare($query . " ORDER BY brand ASC, product_title ASC LIMIT 100", $args));
       
       wp_send_json_success(array(
           'products' => $products
       ));
   }
   
   /**
    * AJAX: Save mapping
    */
   public function ajax_save_mapping() {
       check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
       
       if (!current_user_can('manage_options')) {
           wp_send_json_error(array('message' => 'Insufficient permissions'));
       }
       
       global $wpdb;
       
       $supplier_id = isset($_POST['supplier_id']) ? sanitize_text_field($_POST['supplier_id']) : '';
       $supplier_title = isset($_POST['supplier_title']) ? sanitize_text_field($_POST['supplier_title']) : '';
       $kt_sku = isset($_POST['kt_sku']) ? sanitize_text_field($_POST['kt_sku']) : '';
       $confidence = isset($_POST['confidence']) ? sanitize_text_field($_POST['confidence']) : 'manual';
       $supplier_name = isset($_POST['supplier_name']) ? sanitize_text_field($_POST['supplier_name']) : '';
       $matched_terms = isset($_POST['matched_terms']) ? sanitize_text_field($_POST['matched_terms']) : '';
       
       if (empty($supplier_id) || empty($kt_sku)) {
           wp_send_json_error(array('message' => 'Missing required fields'));
       }
       
       if (empty($supplier_name)) {
           $supplier_name = get_transient('kt_cigar_current_supplier') ?: '';
       }
       
       // Check if mapping already exists
       $existing = $wpdb->get_row($wpdb->prepare(
           "SELECT id FROM {$wpdb->prefix}{$this->mapping_table} 
            WHERE supplier_name = %s AND supplier_id = %s",
           $supplier_name, $supplier_id
       ));
       
       if ($existing) {
           // Update existing mapping
           $result = $wpdb->update(
               "{$wpdb->prefix}{$this->mapping_table}",
               array(
                   'kt_sku' => $kt_sku,
                   'match_confidence' => $confidence,
                   'matched_terms' => $matched_terms
               ),
               array('id' => $existing->id),
               array('%s', '%s', '%s'),
               array('%d')
           );
       } else {
           // Insert new mapping
           $result = $wpdb->insert(
               "{$wpdb->prefix}{$this->mapping_table}",
               array(
                   'supplier_id' => $supplier_id,
                   'supplier_name' => $supplier_name,
                   'supplier_title' => $supplier_title,
                   'kt_sku' => $kt_sku,
                   'match_confidence' => $confidence,
                   'matched_terms' => $matched_terms
               ),
               array('%s', '%s', '%s', '%s', '%s', '%s')
           );
       }
       
       if ($result === false) {
           wp_send_json_error(array('message' => 'Failed to save mapping: ' . $wpdb->last_error));
       }
       
      // Update supplier template mapped count if necessary - continued
           if (!empty($supplier_name)) {
               $mapped_count = $wpdb->get_var($wpdb->prepare(
                   "SELECT COUNT(*) FROM {$wpdb->prefix}{$this->mapping_table} WHERE supplier_name = %s",
                   $supplier_name
               ));
               
               $wpdb->update(
                   "{$wpdb->prefix}{$this->supplier_table}",
                   array('mapped_count' => $mapped_count),
                   array('supplier_name' => $supplier_name),
                   array('%d'),
                   array('%s')
               );
           }
           
           wp_send_json_success(array('message' => 'Mapping saved successfully'));
       }
       
       /**
        * AJAX: Save CSV template
        */
       public function ajax_save_csv_template() {
           check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
           
           if (!current_user_can('manage_options')) {
               wp_send_json_error(array('message' => 'Insufficient permissions'));
           }
           
           global $wpdb;
           
           $template_name = isset($_POST['template_name']) ? sanitize_text_field($_POST['template_name']) : '';
           $column_mappings = isset($_POST['column_mappings']) ? stripslashes($_POST['column_mappings']) : '';
           $template_id = isset($_POST['template_id']) ? intval($_POST['template_id']) : 0;
           
           if (empty($template_name) || empty($column_mappings)) {
               wp_send_json_error(array('message' => 'Missing required fields'));
           }
           
           // Check for duplicate name
           $existing = $wpdb->get_row($wpdb->prepare(
               "SELECT id FROM {$wpdb->prefix}{$this->template_table} WHERE template_name = %s AND id != %d",
               $template_name, $template_id
           ));
           
           if ($existing && $template_id === 0) {
               wp_send_json_error(array('message' => 'A template with this name already exists'));
           }
           
           if ($template_id > 0) {
               // Update existing template
               $result = $wpdb->update(
                   "{$wpdb->prefix}{$this->template_table}",
                   array(
                       'template_name' => $template_name,
                       'column_mappings' => $column_mappings
                   ),
                   array('id' => $template_id),
                   array('%s', '%s'),
                   array('%d')
               );
           } else {
               // Insert new template
               $result = $wpdb->insert(
                   "{$wpdb->prefix}{$this->template_table}",
                   array(
                       'template_name' => $template_name,
                       'column_mappings' => $column_mappings
                   ),
                   array('%s', '%s')
               );
           }
           
           if ($result === false) {
               wp_send_json_error(array('message' => 'Failed to save template: ' . $wpdb->last_error));
           }
           
           wp_send_json_success(array('message' => 'Template saved successfully'));
       }
       
       /**
        * AJAX: Load CSV template
        */
       public function ajax_load_csv_template() {
           check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
           
           if (!current_user_can('manage_options')) {
               wp_send_json_error(array('message' => 'Insufficient permissions'));
           }
           
           global $wpdb;
           
           $template_id = isset($_POST['template_id']) ? intval($_POST['template_id']) : 0;
           
           if ($template_id <= 0) {
               wp_send_json_error(array('message' => 'Invalid template ID'));
           }
           
           // Get template
           $template = $wpdb->get_row($wpdb->prepare(
               "SELECT * FROM {$wpdb->prefix}{$this->template_table} WHERE id = %d",
               $template_id
           ));
           
           if (!$template) {
               wp_send_json_error(array('message' => 'Template not found'));
           }
           
           wp_send_json_success(array(
               'template_name' => $template->template_name,
               'column_mappings' => $template->column_mappings
           ));
       }
       
       /**
        * AJAX: Get CSV templates
        */
       public function ajax_get_csv_templates() {
           check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
           
           if (!current_user_can('manage_options')) {
               wp_send_json_error(array('message' => 'Insufficient permissions'));
           }
           
           global $wpdb;
           
           // Get all templates
           $templates = $wpdb->get_results(
               "SELECT id, template_name, created_at FROM {$wpdb->prefix}{$this->template_table} ORDER BY template_name ASC"
           );
           
           wp_send_json_success(array('templates' => $templates));
       }
       
       /**
        * AJAX: Delete CSV template
        */
       public function ajax_delete_csv_template() {
           check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
           
           if (!current_user_can('manage_options')) {
               wp_send_json_error(array('message' => 'Insufficient permissions'));
           }
           
           global $wpdb;
           
           $template_id = isset($_POST['template_id']) ? intval($_POST['template_id']) : 0;
           
           if ($template_id <= 0) {
               wp_send_json_error(array('message' => 'Invalid template ID'));
           }
           
           // Delete template
           $result = $wpdb->delete(
               "{$wpdb->prefix}{$this->template_table}",
               array('id' => $template_id),
               array('%d')
           );
           
           if ($result === false) {
               wp_send_json_error(array('message' => 'Failed to delete template: ' . $wpdb->last_error));
           }
           
           wp_send_json_success(array('message' => 'Template deleted successfully'));
       }
       
       /**
        * AJAX: Save supplier template
        */
       public function ajax_save_supplier_template() {
           check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
           
           if (!current_user_can('manage_options')) {
               wp_send_json_error(array('message' => 'Insufficient permissions'));
           }
           
           global $wpdb;
           
           $supplier_name = isset($_POST['supplier_name']) ? sanitize_text_field($_POST['supplier_name']) : '';
           $file_checksum = isset($_POST['file_checksum']) ? sanitize_text_field($_POST['file_checksum']) : '';
           $product_count = isset($_POST['product_count']) ? intval($_POST['product_count']) : 0;
           $batch_size = isset($_POST['batch_size']) ? intval($_POST['batch_size']) : 5;
           $update_batch_size_only = isset($_POST['update_batch_size_only']) && $_POST['update_batch_size_only'] === 'true';
           
           if (empty($supplier_name)) {
               wp_send_json_error(array('message' => 'Supplier name is required'));
           }
           
           // Get current mapped count for this supplier
           $mapped_count = $wpdb->get_var($wpdb->prepare(
               "SELECT COUNT(*) FROM {$wpdb->prefix}{$this->mapping_table} WHERE supplier_name = %s",
               $supplier_name
           ));
           
           // Check if template already exists
           $existing = $wpdb->get_row($wpdb->prepare(
               "SELECT * FROM {$wpdb->prefix}{$this->supplier_table} WHERE supplier_name = %s",
               $supplier_name
           ));
           
           if ($existing) {
               if ($update_batch_size_only) {
                   // Only update batch size
                   $result = $wpdb->update(
                       "{$wpdb->prefix}{$this->supplier_table}",
                       array('batch_size' => $batch_size),
                       array('supplier_name' => $supplier_name),
                       array('%d'),
                       array('%s')
                   );
               } else {
                   // Update existing template
                   $result = $wpdb->update(
                       "{$wpdb->prefix}{$this->supplier_table}",
                       array(
                           'last_upload_date' => current_time('mysql'),
                           'file_checksum' => $file_checksum,
                           'product_count' => $product_count,
                           'mapped_count' => $mapped_count,
                           'batch_size' => $batch_size
                       ),
                       array('supplier_name' => $supplier_name),
                       array('%s', '%s', '%d', '%d', '%d'),
                       array('%s')
                   );
               }
           } else {
               // Insert new template
               $result = $wpdb->insert(
                   "{$wpdb->prefix}{$this->supplier_table}",
                   array(
                       'supplier_name' => $supplier_name,
                       'last_upload_date' => current_time('mysql'),
                       'file_checksum' => $file_checksum,
                       'product_count' => $product_count,
                       'mapped_count' => $mapped_count,
                       'batch_size' => $batch_size
                   ),
                   array('%s', '%s', '%s', '%d', '%d', '%d')
               );
           }
           
           if ($result === false) {
               wp_send_json_error(array('message' => 'Failed to save supplier template: ' . $wpdb->last_error));
           }
           
           wp_send_json_success(array('message' => 'Supplier template saved successfully'));
       }
       
       /**
        * AJAX: Get supplier templates
        */
       public function ajax_get_supplier_templates() {
           check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
           
           if (!current_user_can('manage_options')) {
               wp_send_json_error(array('message' => 'Insufficient permissions'));
           }
           
           global $wpdb;
           
           // Get all templates
           $templates = $wpdb->get_results(
               "SELECT id, supplier_name, last_upload_date, product_count, mapped_count, batch_size 
                FROM {$wpdb->prefix}{$this->supplier_table} 
                ORDER BY last_upload_date DESC"
           );
           
           wp_send_json_success(array('templates' => $templates));
       }
       
       /**
        * AJAX: Load supplier template
        */
       public function ajax_load_supplier_template() {
           check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
           
           if (!current_user_can('manage_options')) {
               wp_send_json_error(array('message' => 'Insufficient permissions'));
           }
           
           global $wpdb;
           
           $supplier_name = isset($_POST['supplier_name']) ? sanitize_text_field($_POST['supplier_name']) : '';
           
           if (empty($supplier_name)) {
               wp_send_json_error(array('message' => 'Supplier name is required'));
           }
           
           // Get template
           $template = $wpdb->get_row($wpdb->prepare(
               "SELECT * FROM {$wpdb->prefix}{$this->supplier_table} WHERE supplier_name = %s",
               $supplier_name
           ));
           
           if (!$template) {
               wp_send_json_error(array('message' => 'Supplier template not found'));
           }
           
           // Get mappings for this supplier
           $mappings = $wpdb->get_results($wpdb->prepare(
               "SELECT supplier_id, kt_sku FROM {$wpdb->prefix}{$this->mapping_table} 
                WHERE supplier_name = %s",
               $supplier_name
           ), OBJECT_K);
           
           // Store the supplier name in session for future use
           set_transient('kt_cigar_current_supplier', $supplier_name, 12 * HOUR_IN_SECONDS);
           
           // Get mapped count
           $mapped_count = count($mappings);
           
           wp_send_json_success(array(
               'message' => 'Supplier template loaded successfully',
               'supplier_name' => $supplier_name,
               'mapped_count' => $mapped_count,
               'product_count' => $template->product_count,
               'batch_size' => $template->batch_size
           ));
       }
       
       /**
        * AJAX: Export mapped products as CSV
        */
       public function ajax_export_mapped_products() {
           check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
           
           if (!current_user_can('manage_options')) {
               wp_send_json_error(array('message' => 'Insufficient permissions'));
           }
           
           global $wpdb;
           
           $supplier_name = isset($_POST['supplier_name']) ? sanitize_text_field($_POST['supplier_name']) : '';
           
           if (empty($supplier_name)) {
               wp_send_json_error(array('message' => 'Supplier name is required'));
           }
           
           // Get current supplier products
           $supplier_products = get_transient('kt_cigar_supplier_products');
           
           // If no products in transient, try to load from database
           if (empty($supplier_products)) {
               // Get mappings
               $mappings = $wpdb->get_results($wpdb->prepare(
                   "SELECT m.supplier_id, m.supplier_title, m.kt_sku, m.match_confidence, m.matched_terms,
                    p.product_title, p.brand, p.seat_row, p.seat_number, p.product_category
                    FROM {$wpdb->prefix}{$this->mapping_table} m
                    LEFT JOIN {$wpdb->prefix}{$this->master_table} p ON m.kt_sku = p.sku
                    WHERE m.supplier_name = %s
                    ORDER BY m.supplier_id",
                   $supplier_name
               ));
               
               if (empty($mappings)) {
                   wp_send_json_error(array('message' => 'No mappings found for this supplier'));
               }
               
               // Create output array
               $output = array();
               
               foreach ($mappings as $mapping) {
                   $output[] = array(
                       'ID' => $mapping->supplier_id,
                       'Title' => $mapping->supplier_title,
                       'KT_SKU' => $mapping->kt_sku,
                       'KT_Title' => $mapping->product_title,
                       'Brand' => $mapping->brand,
                       'Product_Category' => $mapping->product_category,
                       'Ring_Size' => $mapping->seat_row,
                       'Length' => $mapping->seat_number,
                       'Match_Confidence' => $mapping->match_confidence,
                       'Matched_Terms' => $mapping->matched_terms
                   );
               }
           } else {
               // Get mappings for this supplier
               $mappings = $wpdb->get_results($wpdb->prepare(
                   "SELECT supplier_id, kt_sku, match_confidence, matched_terms FROM {$wpdb->prefix}{$this->mapping_table} 
                    WHERE supplier_name = %s",
                   $supplier_name
               ), OBJECT_K);
               
               // Add SKU column to products
               foreach ($supplier_products as &$product) {
                   $supplier_id = $product['ID'];
                   $kt_sku = isset($mappings[$supplier_id]) ? $mappings[$supplier_id]->kt_sku : '';
                   $match_confidence = isset($mappings[$supplier_id]) ? $mappings[$supplier_id]->match_confidence : '';
                   $matched_terms = isset($mappings[$supplier_id]) ? $mappings[$supplier_id]->matched_terms : '';
                   
                   $product['KT_SKU'] = $kt_sku;
                   $product['Match_Confidence'] = $match_confidence;
                   $product['Matched_Terms'] = $matched_terms;
                   
                   // Add KT product details if mapped
                   if (!empty($kt_sku)) {
                       $kt_product = $wpdb->get_row($wpdb->prepare(
                           "SELECT product_title, brand, product_category FROM {$wpdb->prefix}{$this->master_table} 
                            WHERE sku = %s",
                           $kt_sku
                       ));
                       
                       if ($kt_product) {
                           $product['KT_Title'] = $kt_product->product_title;
                           $product['KT_Brand'] = $kt_product->brand;
                           $product['KT_Category'] = $kt_product->product_category;
                       }
                   }
               }
               
               $output = $supplier_products;
           }
           
           // Generate CSV
           $filename = sanitize_file_name('kt_cigar_mapped_' . $supplier_name . '_' . date('Y-m-d') . '.csv');
           $upload_dir = wp_upload_dir();
           $file_path = $upload_dir['basedir'] . '/' . $filename;
           $file_url = $upload_dir['baseurl'] . '/' . $filename;
           
           $fp = fopen($file_path, 'w');
           
           // Add headers (first row)
           if (!empty($output)) {
               $headers = array_keys($output[0]);
               fputcsv($fp, $headers);
               
               // Add data rows
               foreach ($output as $row) {
                   fputcsv($fp, $row);
               }
           }
           
           fclose($fp);
           
           wp_send_json_success(array(
               'message' => 'CSV exported successfully',
               'file_url' => $file_url,
               'filename' => $filename
           ));
       }
       
 
	
	
	
	
	
	
	/**
   /**
        * AJAX: Delete supplier template
        */
       public function ajax_delete_supplier_template() {
           check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
           
           if (!current_user_can('manage_options')) {
               wp_send_json_error(array('message' => 'Insufficient permissions'));
           }
           
           global $wpdb;
           
           $supplier_name = isset($_POST['supplier_name']) ? sanitize_text_field($_POST['supplier_name']) : '';
           
           if (empty($supplier_name)) {
               wp_send_json_error(array('message' => 'Supplier name is required'));
           }
           
           // Delete template
           $result = $wpdb->delete(
               "{$wpdb->prefix}{$this->supplier_table}",
               array('supplier_name' => $supplier_name),
               array('%s')
           );
           
           if ($result === false) {
               wp_send_json_error(array('message' => 'Failed to delete supplier template: ' . $wpdb->last_error));
           }
           
           // Delete mappings for this supplier
           $wpdb->delete(
               "{$wpdb->prefix}{$this->mapping_table}",
               array('supplier_name' => $supplier_name),
               array('%s')
           );
           
           wp_send_json_success(array('message' => 'Supplier template and mappings deleted successfully'));
       }
       
       /**
      * AJAX: Get memory usage
        */
       public function ajax_get_memory_usage() {
           check_ajax_referer('kt-cigar-matcher-nonce', 'nonce');
           
           if (!current_user_can('manage_options')) {
               wp_send_json_error(array('message' => 'Insufficient permissions'));
           }
           
           $memory_used = memory_get_usage(true) / (1024 * 1024); // Convert to MB
           $memory_limit = ini_get('memory_limit');
           
           // Convert memory limit to MB if it's not already
           if (preg_match('/^(\d+)(.)$/', $memory_limit, $matches)) {
               if ($matches[2] == 'G') {
                   $memory_limit = $matches[1] * 1024;
               } else if ($matches[2] == 'M') {
                   $memory_limit = $matches[1];
               } else if ($matches[2] == 'K') {
                   $memory_limit = $matches[1] / 1024;
               }
           }
           
           wp_send_json_success(array(
               'memory_used' => round($memory_used, 2),
               'memory_limit' => intval($memory_limit)
           ));
       }
   }

/**
 * Activation hook
 */
register_activation_hook(__FILE__, function() {
    $instance = new KT_Cigar_Matcher();
    $instance->check_tables();
});

/**
 * Add action links to plugin listing
 */
add_filter('plugin_action_links_' . plugin_basename(__FILE__), function($links) {
    $settings_link = '<a href="admin.php?page=ktcigar-matcher">' . __('Matcher') . '</a>';
    array_unshift($links, $settings_link);
    return $links;
});

/**
 * Flush transients when plugin is deactivated
 */
register_deactivation_hook(__FILE__, function() {
    delete_transient('kt_cigar_supplier_products');
    delete_transient('kt_cigar_current_supplier');
    delete_transient('kt_cigar_current_checksum');
    
    // Get all supplier names to clean up position transients
    global $wpdb;
    $suppliers = $wpdb->get_col("SELECT supplier_name FROM {$wpdb->prefix}supplier_templates");
    
    if (!empty($suppliers)) {
        foreach ($suppliers as $supplier) {
            delete_transient('kt_cigar_current_position_' . $supplier);
        }
    }
});

/**
 * Add custom meta box for inventory fields
 */
add_action('add_meta_boxes', function() {
    add_meta_box(
        'kt_cigar_dimensions',
        'Cigar Dimensions',
        function($post) {
            // Get current values
            $seat_row = get_post_meta($post->ID, '_seat_row', true);
            $seat_number = get_post_meta($post->ID, '_seat_number', true);
            
            // Output fields
            echo '<p><label>' . __('Ring Size:') . '</label><br />';
            echo '<input type="text" name="kt_seat_row" value="' . esc_attr($seat_row) . '" size="5" /></p>';
            
            echo '<p><label>' . __('Length:') . '</label><br />';
            echo '<input type="text" name="kt_seat_number" value="' . esc_attr($seat_number) . '" size="5" /></p>';
        },
        'product',
        'side',
        'default'
    );
});

/**
 * Save custom meta box data
 */
add_action('save_post', function($post_id) {
    // Skip autosaves
    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }
    
    // Verify nonce (would add this in a real implementation)
    
    // Save meta data
    if (isset($_POST['kt_seat_row'])) {
        update_post_meta($post_id, '_seat_row', sanitize_text_field($_POST['kt_seat_row']));
    }
    
    if (isset($_POST['kt_seat_number'])) {
        update_post_meta($post_id, '_seat_number', sanitize_text_field($_POST['kt_seat_number']));
    }
});

/**
 * Function to export mappings through WP-CLI
 */
if (defined('WP_CLI') && WP_CLI) {
    WP_CLI::add_command('ktcigar', function($args, $assoc_args) {
        if (!isset($args[0])) {
            WP_CLI::error('Command not specified. Use: wp ktcigar export');
        }
        
        if ($args[0] === 'export') {
            global $wpdb;
            
            // Get all mappings with product details
            $mappings = $wpdb->get_results("
                SELECT m.supplier_id, m.supplier_name, m.supplier_title, m.kt_sku, m.match_confidence, 
                       p.product_title, p.brand, p.seat_row, p.seat_number
                FROM {$wpdb->prefix}product_mapping m
                LEFT JOIN {$wpdb->prefix}master_products p ON m.kt_sku = p.sku
                ORDER BY m.supplier_name, m.supplier_id
            ");
            
            if (empty($mappings)) {
                WP_CLI::error('No mappings found');
            }
            
            // Create CSV header
            $csv = "Supplier Name,Supplier ID,Supplier Title,KT SKU,KT Title,Brand,Ring Size,Length,Match Confidence\n";
            
            // Add data rows
            foreach ($mappings as $mapping) {
                $csv .= '"' . str_replace('"', '""', $mapping->supplier_name) . '",';
                $csv .= '"' . str_replace('"', '""', $mapping->supplier_id) . '",';
                $csv .= '"' . str_replace('"', '""', $mapping->supplier_title) . '",';
                $csv .= '"' . str_replace('"', '""', $mapping->kt_sku) . '",';
                $csv .= '"' . str_replace('"', '""', $mapping->product_title) . '",';
                $csv .= '"' . str_replace('"', '""', $mapping->brand) . '",';
                $csv .= '"' . str_replace('"', '""', $mapping->seat_row) . '",';
                $csv .= '"' . str_replace('"', '""', $mapping->seat_number) . '",';
                $csv .= '"' . str_replace('"', '""', $mapping->match_confidence) . '"';
                $csv .= "\n";
            }
            
            // Output CSV
            $file = 'kt_cigar_mappings_' . date('Ymd_His') . '.csv';
            file_put_contents($file, $csv);
            
            WP_CLI::success('Exported ' . count($mappings) . ' mappings to ' . $file);
        } else {
            WP_CLI::error('Unknown command: ' . $args[0]);
        }
    });
}

/**
 * Add REST API endpoint for retrieving mappings
 */
add_action('rest_api_init', function() {
    register_rest_route('ktcigar/v1', '/mappings', array(
        'methods' => 'GET',
        'callback' => function($request) {
            // Check for API key
            $api_key = $request->get_param('api_key');
            if (!$api_key || $api_key !== get_option('kt_cigar_api_key', 'default_key')) {
                return new WP_Error('invalid_key', 'Invalid API key', array('status' => 403));
            }
            
            global $wpdb;
            
            // Get filters
            $supplier = $request->get_param('supplier');
            $brand = $request->get_param('brand');
            
            // Build query
            $query = "
                SELECT m.supplier_id, m.supplier_name, m.supplier_title, m.kt_sku, m.match_confidence, 
                       p.product_title, p.brand, p.seat_row, p.seat_number
                FROM {$wpdb->prefix}product_mapping m
                LEFT JOIN {$wpdb->prefix}master_products p ON m.kt_sku = p.sku
                WHERE 1=1
            ";
            
            $params = array();
            
            if ($supplier) {
                $query .= " AND m.supplier_name = %s";
                $params[] = $supplier;
            }
            
            if ($brand) {
                $query .= " AND p.brand = %s";
                $params[] = $brand;
            }
            
            $query .= " ORDER BY m.supplier_name, m.supplier_id";
            
            // Execute query
            if (!empty($params)) {
                $mappings = $wpdb->get_results($wpdb->prepare($query, $params));
            } else {
                $mappings = $wpdb->get_results($query);
            }
            
            return $mappings;
        },
        'permission_callback' => function() {
            return true;
        }
    ));
});

/**
 * Add cron job to update mappings
 */
add_action('kt_cigar_daily_update', function() {
    // This would be where we'd add code to automatically update mappings
    // For example, fetching product data from an external API and
    // updating the mappings table
    
    // Log the update
    error_log('KT Cigar Matcher: Daily update executed at ' . date('Y-m-d H:i:s'));
});

// Schedule the cron job if not already scheduled
if (!wp_next_scheduled('kt_cigar_daily_update')) {
    wp_schedule_event(time(), 'daily', 'kt_cigar_daily_update');
}


// Initialize the plugin
$kt_cigar_matcher = new KT_Cigar_Matcher();
