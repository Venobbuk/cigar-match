<?php
/**
 * KT Cigar Mappings - Ultra Complete Brand and Series Recognition
 * Combines all techniques from mappings 06, 07, 08 with enhanced intelligence
 * Version: 6.0.0 - Complete Mapping Solution
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

// Configuration - Easily adjustable weights
define('KT_CIGAR_WEIGHT_BRAND', 50);           // Brand is most important
define('KT_CIGAR_WEIGHT_MODEL', 35);           // Series/Model is second
define('KT_CIGAR_WEIGHT_VITOLA', 22);          // Size/Vitola is third
define('KT_CIGAR_WEIGHT_DIMENSION', 28);       // Dimensions are important
define('KT_CIGAR_WEIGHT_SPECIAL_EDITION', 18); // Special editions
define('KT_CIGAR_WEIGHT_YEAR', 12);            // Year matching
define('KT_CIGAR_WEIGHT_COUNT', 12);           // Count matching
define('KT_CIGAR_WEIGHT_PACKAGING', 8);        // Packaging
define('KT_CIGAR_WEIGHT_KEYWORDS', 30);        // General keywords
define('KT_CIGAR_WEIGHT_REGIONAL', 10);        // Regional/distributor

// Cache settings
define('KT_CIGAR_CACHE_EXPIRY', 3600);         // 1 hour cache
define('KT_CIGAR_BATCH_SIZE', 50);             // Process 50 products at a time

/**
 * Enhanced Debug Class with categorized logging
 */
class KT_Cigar_Debug {
    private static $log_file = '';
    private static $debug_level = 0; // 0 = off, 1 = errors, 2 = info, 3 = verbose
    private static $max_log_size = 2097152; // 2MB
    
    public static function init($log_file = '', $debug_level = 2) {
        if (empty($log_file)) {
            $upload_dir = wp_upload_dir();
            self::$log_file = $upload_dir['basedir'] . '/cigar_matcher_debug.log';
        } else {
            self::$log_file = $log_file;
        }
        
        self::$debug_level = $debug_level;
        
        if (file_exists(self::$log_file) && filesize(self::$log_file) > self::$max_log_size) {
            self::rotate_log();
        }
        
        if (!file_exists(self::$log_file) && self::$debug_level > 0) {
            self::log_header();
        }
    }
    
    private static function rotate_log() {
        if (file_exists(self::$log_file)) {
            $content = @file_get_contents(self::$log_file);
            if ($content !== false) {
                $content = substr($content, -102400);
                @file_put_contents(self::$log_file, "--- LOG ROTATED [" . date('Y-m-d H:i:s') . "] ---\n" . $content);
            }
        }
    }
    
    private static function log_header() {
        $header = "===============================================\n";
        $header .= "KT Cigar Matcher Debug - " . date('Y-m-d H:i:s') . "\n";
        $header .= "PHP " . PHP_VERSION . " | WP " . get_bloginfo('version') . "\n";
        $header .= "===============================================\n\n";
        @file_put_contents(self::$log_file, $header);
    }
    
    public static function log($message, $level = 2, $context = '') {
        if (self::$debug_level < $level || self::$debug_level == 0) {
            return;
        }
        
        if (file_exists(self::$log_file) && filesize(self::$log_file) > self::$max_log_size) {
            self::rotate_log();
        }
        
        if (!empty($context)) {
            $context = "[$context] ";
        }
        
        $log_entry = date('Y-m-d H:i:s') . " {$context}{$message}\n";
        @file_put_contents(self::$log_file, $log_entry, FILE_APPEND);
    }
    
    public static function log_match($supplier_title, $internal_title, $score, $match_type, $debug_info) {
        if (self::$debug_level < 2) return;
        
        $log_entry = sprintf(
            "MATCH: %s => %s | %.1f%% (%s)",
            mb_substr($supplier_title, 0, 50),
            mb_substr($internal_title, 0, 50),
            $score,
            $match_type
        );
        
        if (isset($debug_info['categorized_keywords'])) {
            $categories = $debug_info['categorized_keywords'];
            $log_entry .= "\n       Keywords: ";
            foreach ($categories as $category => $keywords) {
                if (!empty($keywords)) {
                    $log_entry .= "$category(" . count($keywords) . ") ";
                }
            }
        }
        
        @file_put_contents(self::$log_file, $log_entry . "\n", FILE_APPEND);
    }
    
    public static function clear_log() {
        if (file_exists(self::$log_file)) {
            @unlink(self::$log_file);
            self::log_header();
        }
    }
}

/**
 * Main Mapping Class - Enhanced with all techniques
 */
class KT_Cigar_Mappings {
    
    // Enhanced filter words based on real data patterns
    private static $common_filter_words = array(
        // Basic Chinese packaging words
        '盒', '盒装', '装', '只', '支', 'box', 'pcs', '片', '条',
        '整盒', '整箱', '带盒', '带管', '铝管装', '礼盒', '普通装',
        '单支', '裸支', '非卖品', '定制', '茄', '雪茄', 'cigar', 'cigars',
        '烟', '单盒', '条装', '包装', '罐装', '套装', '礼品装',
        
        // Common descriptive words
        '高端', '限量', '限定', '特殊', '特制', '精选', '厂家', '正品',
        '产品', '精美', '小', '大', '中号', '特号', '产地', '古巴',
        'cuba', '全球', '包邮', '原装', '现货', '新品', '无盒',
        '年', '年份', '打火机', '配件', '烟具', '专卖',
        
        // Quality descriptors
        '正宗', '进口', '原厂', '手工', '传统', '珍藏', '稀有', '收藏',
        '经典', '香味', '口感', '香气', '味道', '醇厚', '浓郁', '清淡',
        '顺滑', '复杂', '平衡', '均衡', '层次', '丰富', '细腻', '圆润',
        '柔和', '强烈', '温和', '烟丝', '烟叶', '烟草',
        
        // English common words
        'the', 'and', 'for', 'with', 'from', 'this', 'that', 'these', 'those',
        'of', 'in', 'on', 'at', 'by', 'to', 'a', 'an', 'it', 'is', 'are',
        
        // Chinese common words
        '有', '是', '的', '了', '在', '和', '与', '或', '不', '很', '也',
        '就', '我', '你', '他', '她', '它', '这', '那', '这些', '那些',
        '这个', '那个', '什么', '为什么', '怎么'
    );

    /**
     * Complete Cuban brands mapping with all variations
     */
    public static function get_cuban_brand_mappings() {
        return array(
            'cohiba' => array(
                '高希霸', '科伊巴', '科希巴', '科伊瓦', '科巴', '哥希霸', 
                '哥伊巴', '柯希巴', '可希巴', '寇希巴', '高西霸', '高喜霸',
                '科依巴', '科西巴', '柯伊巴', '柯西巴', 'cohiba', 'COHIBA'
            ),
            'montecristo' => array(
                '蒙特', '蒙特克里斯托', '蒙特克里斯多', '蒙特西托', '蒙德克里斯多',
                '蒙特利斯托', '蒙克', '蒙特克里托', '蒙特利多', '蒙泰克里斯托',
                '蒙特克里斯', '蒙特克瑞斯托', '蒙特克瑞斯多', '蒙特科里斯托',
                '蒙蒂克里斯托', '蒙蒂', 'montecristo', 'monte cristo', 'monte'
            ),
            'romeo y julieta' => array(
                '罗密欧', '罗密欧与朱丽叶', '罗密欧朱丽叶', '罗密欧与茱丽叶',
                '罗密欧茱丽叶', '罗密欧与朱莉叶', '罗密欧朱莉叶', '罗密欧朱利叶',
                '罗密欧与朱利叶', '罗朱', '罗蜜欧', '罗梅欧', '罗美欧',
                'romeo', 'romeo y julieta', 'r&j', 'ryj'
            ),
            'partagas' => array(
                '帕特加斯', '帕塔加斯', '帕达加斯', '帕塔嘉斯', '帕塔加思',
                '帕特嘉斯', '巴塔加斯', '帕塔加', '帕达嘉斯', '帕特加',
                '帕他加斯', '帕塔格斯', '帕特格斯', '派特加斯', '派塔加斯',
                'partagas'
            ),
            'h. upmann' => array(
                '优佩曼', '乌普曼', '乌帕曼', '邬普曼', '尤普曼', '优普曼',
                '哈瓦那优普曼', '乌普曼', '诶查厄普曼', '赫乌普曼', '乌普门',
                '乌普満', '乌浦曼', '欧普曼', '邬浦曼', 'h. upmann', 'upmann',
                'h upmann', 'hupmann'
            ),
            'hoyo de monterrey' => array(
                '好友', '霍约蒙特雷', '蒙特雷好友', '何友', '好友蒙特雷',
                '蒙特雷', '好友德蒙特雷', '霍约德蒙特雷', '好友山景', '豪友',
                '蒙特瑞', '蒙特瑞好友', '霍约·蒙特雷', '霍约德·蒙特雷',
                'hoyo', 'hdm', 'hoyo de monterrey'
            ),
            'bolivar' => array(
                '波利瓦尔', '玻利瓦尔', '博利瓦尔', '玻利瓦', '博利瓦',
                '波利瓦', '玻利瓦儿', '博利瓦儿', '波利瓦儿', '玻利华尔',
                '玻利维亚', '玻利瓦', '波力瓦尔', '波力瓦', 'bolivar'
            ),
            'trinidad' => array(
                '特立尼达', '特立达', '特立尼达德', '特立尼', '特立尼特',
                '特立尼达得', '特利尼达', '特利尼', '特利尼特', '特丽尼达',
                '千里达', '千立达', '特里尼达', '特瑞尼达', 'trinidad'
            ),
            'punch' => array(
                '潘趣', '潘虚', '潘切', '邦切', '邦趣', '邦虚', '盘趣',
                '盘虚', '盘切', '潘什', '潘奇', '潘琦', '邦奇', '邦琦',
                '潘琪', '邦琪', 'punch'
            ),
            'san cristobal de la habana' => array(
                '圣克里斯托巴尔', '圣克里斯托瓦尔', '圣克里斯托', '圣克',
                '哈瓦那圣克', '圣克里斯多巴尔', '圣克里斯托瓦', '圣克里',
                '圣科里斯托瓦尔', '圣克里托巴尔', '圣克里斯多瓦尔',
                '圣·克里斯托巴尔', 'san cristobal', 'scl', 'san cristóbal'
            ),
            'ramon allones' => array(
                '雷蒙·阿隆尼斯', '雷蒙阿隆尼斯', '莱蒙·阿罗尼斯', '莱蒙阿罗尼斯',
                '拉蒙·阿隆内斯', '拉蒙阿隆内斯', '雷蒙·阿洛尼斯', '雷蒙阿洛尼斯',
                '阿隆尼斯', '雷蒙', '雷蒙阿龙尼斯', '雷蒙·阿龙尼斯',
                'ramon allones', 'ra'
            ),
            'por larranaga' => array(
                '保拉拉纳加', '波拉拉纳加', '波尔拉纳加', '波尔拉拉那加',
                '波拉腊那加', '保拉拉那加', '保拉腊那加', '波尔拉腊那加',
                '拉纳加', '保拉', '波尔·拉腊那加', '保尔·拉纳加',
                'por larranaga', 'por larrañaga'
            ),
            'quintero' => array(
                '昆特罗', '金特罗', '琴特罗', '坤特罗', '群特罗', '坤特洛',
                '坤特罗斯', '群塔罗', '昆塔罗', '金塔罗', '昆特洛', '金特洛',
                'quintero', 'quinteros'
            ),
            'juan lopez' => array(
                '胡安·洛佩兹', '胡安洛佩兹', '胡安·洛佩斯', '胡安洛佩斯',
                '胡安·洛培兹', '胡安洛培兹', '胡安·洛培斯', '胡安洛培斯',
                '璜·洛佩兹', '璜洛佩兹', '胡安·洛佩兹', '胡安·罗佩兹',
                'juan lopez', 'juan lópez'
            ),
            'el rey del mundo' => array(
                '雷伊世界', '世界之王', '雷德蒙多', '雷伊德尔蒙多', '雷伊德尔蒙度',
                '雷伊德尔蒙道', '雷伊', '世界雷伊', '雷伊世界王', '世界之王雷伊',
                '世界国王', '雷伊·德尔·蒙多', 'rey del mundo', 'erdm',
                'el rey del mundo'
            ),
            'rafael gonzalez' => array(
                '拉斐尔·冈萨雷斯', '拉菲尔·冈萨雷斯', '拉斐尔冈萨雷斯',
                '拉菲尔冈萨雷斯', '拉法尔·贡萨勒斯', '拉法尔贡萨勒斯',
                '拉斐尔·贡萨雷斯', '拉斐尔贡萨雷斯', '拉菲尔', '拉斐尔',
                '拉斐尔·冈萨列斯', 'rafael gonzalez', 'rafael gonzález'
            ),
            'jose l. piedra' => array(
                '何塞·皮德拉', '何塞皮德拉', '霍塞·皮埃德拉', '霍塞皮埃德拉',
                '何塞·彼德拉', '何塞彼德拉', '霍塞·彼埃德拉', '霍塞彼埃德拉',
                '皮德拉', '彼德拉', '何塞·L·皮德拉', '何塞L皮德拉',
                'jose l piedra', 'jlp', 'josé l. piedra'
            ),
            'fonseca' => array(
                '丰塞卡', '方塞卡', '丰塞克', '封塞卡', '方塞克', '丰赛卡',
                '封赛卡', '封世家', '封斯卡', '豐塞卡', '风塞卡', '丰世卡',
                'fonseca'
            ),
            'sancho panza' => array(
                '桑丘·潘沙', '桑丘潘沙', '桑乔·潘萨', '桑乔潘萨', '桑丘·潘查',
                '桑丘潘查', '桑乔·潘扎', '桑乔潘扎', '桑丘', '潘沙', '桑丘·潘扎',
                '桑丘·潘萨', 'sancho panza'
            ),
            'cuaba' => array(
                '库阿巴', '古巴巴', '库巴巴', '酷阿巴', '库瓦巴', '酷瓦巴',
                '库巴', '卡巴', '库阿瓦', '库瓦', '夸巴', '瓜巴', 'cuaba'
            ),
            'vegueros' => array(
                '韦格罗斯', '维格罗斯', '韦格洛斯', '维格洛斯', '韦格',
                '维格', '韦古罗斯', '维古罗斯', '韦古洛斯', '维古洛斯',
                '维盖罗斯', '韦盖罗斯', 'vegueros'
            ),
            'quai d\'orsay' => array(
                '奥赛码头', '多尔塞码头', '多赛码头', '奥尔赛码头', '多赛',
                '奥赛', '多尔赛', '奥尔塞', '多塞', '奥塞', '奎多赛',
                '魁多赛', 'quai dorsay', 'quai d\'orsay', 'qdo'
            ),
            'diplomaticos' => array(
                '外交官', '迪普洛马蒂克斯', '迪普洛马蒂科斯', '迪普洛马蒂',
                '迪普', '外交', '迪普洛', '迪普洛马', '迪普洛马蒂',
                '迪普洛马特', '外交家', 'diplomaticos', 'diplomáticos'
            ),
            'saint luis rey' => array(
                '圣路易斯雷伊', '圣路易王', '圣路易斯·雷伊', '圣路易斯王',
                '圣路易', '圣雷伊', '圣路易士雷伊', '圣路易士王', '圣路易斯',
                '圣路易斯·雷', '圣·路易斯·雷伊', 'saint luis rey', 'slr'
            ),
            'la gloria cubana' => array(
                '古巴荣耀', '古巴光荣', '古巴荣光', '古巴格洛瑞亚', '古巴拉格洛瑞亚',
                '古巴格洛丽亚', '荣耀古巴', '荣光古巴', '光荣古巴', '拉格洛瑞亚',
                '古巴之光', '古巴之荣', 'la gloria cubana', 'lgc'
            ),
            'vegas robaina' => array(
                '维加罗拜纳', '维加斯罗拜纳', '维加斯·罗拜纳', '韦加斯罗拜纳',
                '韦加斯·罗拜纳', '维加罗贝纳', '韦加罗拜纳', '维加斯罗贝纳',
                '维加·罗拜纳', 'vegas robaina', 'vr'
            )
        );
    }

    /**
     * Complete non-Cuban brands mapping with all variations
     */
    public static function get_non_cuban_brand_mappings() {
        return array(
            'padron' => array(
                '帕德龙', '帕德隆', '帕德朗', '帕特龙', '帕特隆', '帕德罗',
                '帕特罗', '帕德隆', '帕多隆', '帕多龙', '巴德龙', '巴德隆',
                '巴德朗', '巴特龙', '帕迪龙', '帕迪隆', '帕德伦', '帕德仑',
                'padron', 'padrón'
            ),
            'arturo fuente' => array(
                '阿图罗·富恩特', '阿图罗富恩特', '阿图罗·符恩特', '阿图罗符恩特',
                '富恩特', '符恩特', '阿图罗', '阿杜罗·富恩特', '阿杜罗富恩特',
                '富恩特家族', '亚图罗富恩特', '亚图罗·富恩特', '富安特',
                '福恩特', '福安特', '富恩德', '富恩蒂', '阿图罗福恩特',
                '阿杜罗·福恩特', 'arturo fuente', 'fuente', 'a. fuente'
            ),
            'my father' => array(
                '我的父亲', '麦法瑟', '麦法泽', '麦法哲', '麦法德', '麦法蒂',
                '迈法瑟', '迈法泽', '迈法哲', '父亲', '我父亲', '吾父',
                '我爸爸', '加西亚', '加西亚我的父亲', '何塞加西亚', '唐佩平',
                '唐·佩平', '佩平加西亚', '佩平', '唐·佩平·加西亚',
                'my father', 'my father cigars', 'don pepin'
            ),
            'oliva' => array(
                '奥利瓦', '奥利娃', '奥丽瓦', '奥丽娃', '欧利瓦', '欧利娃',
                '欧丽瓦', '欧丽娃', '奥利', '欧利', '奥利华', '欧利华',
                '奥力瓦', '欧力瓦', '奥利弗', '欧利弗', '奥里瓦', '欧里瓦',
                '奥立瓦', '欧立瓦', '奥利维亚', 'oliva'
            ),
            'davidoff' => array(
                '大卫杜夫', '大卫·杜夫', '大为杜夫', '大为·杜夫', '达维多夫',
                '达维·多夫', '达维·杜夫', '大卫多夫', '大卫·多夫', '杜夫',
                '大卫度夫', '大威杜夫', '戴维多夫', '戴维杜夫', '戴维·杜夫',
                '达维杜夫', '达维都夫', '達維多夫', '大維杜夫', '達維杜夫',
                '大卫都夫', 'davidoff', 'zino'
            ),
            'drew estate' => array(
                '杜鲁庄园', '德鲁庄园', '杜鲁农庄', '德鲁农庄', '德鲁产业',
                '杜鲁产业', '德鲁地产', '杜鲁地产', '德鲁', '杜鲁',
                '杜鲁雪茄', '德鲁雪茄', '德鲁艾斯特', '杜鲁艾斯特',
                '德鲁庄园公司', '杜鲁庄园公司', '德鲁地产公司', '杜鲁地产公司',
                '杜鲁伊斯特', '德鲁伊斯特', 'drew estate', 'de'
            ),
            'alec bradley' => array(
                '亚历克·布拉德利', '亚历克布拉德利', '阿列克·布拉德利',
                '阿列克布拉德利', '艾力克·布莱德利', '艾力克布莱德利',
                '亚力克·布莱德利', '亚力克布莱德利', '布拉德利', '亚历克',
                '亚历克·布莱德利', '阿力克布拉德利', '艾利克布拉德利',
                '亚列克布拉德利', '亚力布拉德利', '艾立克布莱德利',
                '阿立克布拉德利', '亚历克布拉德雷', 'alec bradley', 'ab'
            ),
            'rocky patel' => array(
               '洛基·帕特尔', '洛基帕特尔', '罗基·帕特尔', '罗基帕特尔',
               '洛基·帕特', '洛基帕特', '罗基·帕特', '罗基帕特', '帕特尔',
               '洛基', '洛奇帕特尔', '罗奇帕特尔', '洛基巴特尔', '罗基巴特尔',
               '洛基派特尔', '罗基派特尔', '洛基帕泰尔', '罗基帕泰尔',
               '岩石帕特尔', '石头帕特尔', '洛奇·帕特尔', '罗奇·帕特尔',
               'rocky patel', 'rp'
           ),
           'perdomo' => array(
               '佩多莫', '帕多莫', '佩尔多莫', '帕尔多莫', '佩多摩', '帕多摩',
               '佩尔多摩', '帕尔多摩', '多莫', '佩多', '珀多莫', '珀尔多莫',
               '佩都莫', '帕都莫', '佩朵莫', '帕朵莫', '佩多谟', '帕多谟',
               '佩多墨', '帕多墨', '佩多蒙', '帕多蒙', 'perdomo'
           ),
           'e.p. carrillo' => array(
               'E.P.卡里洛', 'E.P.·卡里洛', 'E.P.卡利略', 'E.P.·卡利略',
               'E.P.卡里约', 'E.P.·卡里约', 'E.P.卡里罗', 'E.P.·卡里罗',
               '卡里洛', '卡利略', '卡里约', '卡里罗', '卡利洛', '卡利约',
               '卡利罗', '卡理洛', '卡理略', '卡理约', '卡理罗',
               '厄内斯托·佩雷斯·卡里洛', '厄内斯托卡里洛', '佩雷斯卡里洛',
               '埃内斯托卡里洛', 'e.p. carrillo', 'ep carrillo', 'carrillo'
           ),
           'la flor dominicana' => array(
               '多米尼加之花', '多米尼加花', '多米尼加的花', '多明尼加之花',
               '多明尼加花', '多明尼加的花', '拉弗罗多米尼加纳', '拉弗洛多米尼加纳',
               '拉芙罗多米尼加纳', '拉芙洛多米尼加纳', '拉弗洛多米尼加',
               '拉芙洛多米尼加', '拉·弗洛尔·多米尼加纳', '拉弗洛尔多米尼加纳',
               '多米尼加的花朵', '多明尼加的花朵', '多米尼加之花雪茄',
               '多明尼加花朵', 'la flor dominicana', 'lfd'
           ),
           'ashton' => array(
               '阿什顿', '艾什顿', '亚什顿', '艾许顿', '亚许顿', '阿什敦',
               '艾什敦', '亚什敦', '艾许敦', '亚许敦', '爱诗顿', '爱士顿',
               '阿诗顿', '艾诗顿', '阿士顿', '艾士顿', '亚诗顿', '亚士顿',
               '阿什敦', '艾什敦', '阿什登', '艾什登', 'ashton'
           ),
           'macanudo' => array(
               '马卡努多', '麦卡努多', '马卡努铎', '麦卡努铎', '马克努多',
               '麦克努多', '马克努铎', '麦克努铎', '卡努多', '马卡', '麦卡',
               '麦卡鲁多', '马卡鲁多', '麦克鲁多', '马克鲁多', '玛卡努多',
               '玛克努多', '麦卡纽多', '马卡纽多', '马卡奴多', '麦卡奴多',
               'macanudo'
           ),
           'camacho' => array(
               '卡马乔', '卡玛乔', '卡马丘', '卡玛丘', '卡马肖', '卡玛肖',
               '喀马乔', '喀玛乔', '喀马丘', '喀玛丘', '卡玛丘', '卡马秋',
               '卡玛秋', '卡马茶', '卡玛茶', '卡马周', '卡玛周', '卡吗乔',
               '咖玛乔', '咖马乔', '卡馬喬', '卡瑪喬', 'camacho'
           ),
           'cao' => array(
               'CAO', '希爱欧', '希爱傲', '希艾欧', '希艾傲', '西爱欧',
               '西爱傲', '西艾欧', '西艾傲', '希爱欧雪茄', '卡奥', '高',
               '曹', '草', '考', '靠', '希欧', '希傲', '西欧', '西傲',
               '希艾欧', '希艾傲', 'cao'
           ),
           'joya de nicaragua' => array(
               '尼加拉瓜的宝石', '尼加拉瓜宝石', '尼加拉瓜珠宝', '尼加拉瓜之宝',
               '何亚尼加拉瓜', '乔亚尼加拉瓜', '霍亚尼加拉瓜', '豪亚尼加拉瓜',
               '尼加拉瓜', '何亚', '乔亚', '霍亚', '豪亚', '荷亚尼加拉瓜',
               '胡亚尼加拉瓜', '侯亚尼加拉瓜', '和亚尼加拉瓜', '尼加拉瓜乔亚',
               '尼加拉瓜霍亚', '尼加拉瓜珍宝', 'joya de nicaragua', 'jdn',
               'joya', 'joya de nicaragua'
           ),
           'aj fernandez' => array(
               'AJ·费尔南德斯', 'AJ费尔南德斯', 'AJ·费南德斯', 'AJ费南德斯',
               'AJ·费尔南多斯', 'AJ费尔南多斯', 'AJ·费南多斯', 'AJ费南多斯',
               '费尔南德斯', 'AJ', 'AJ·费尔南迪斯', 'AJ费尔南迪斯',
               'AJ·费南迪斯', 'AJ费南迪斯', '艾杰费尔南德斯', '艾杰费南德斯',
               '埃杰费尔南德斯', '埃杰费南德斯', '阿杰费尔南德斯', '阿杰费南德斯',
               'aj fernandez', 'ajf'
           ),
           'la aurora' => array(
               '拉奥罗拉', '拉欧若拉', '拉奥若拉', '拉欧罗拉', '拉·奥罗拉',
               '拉·欧若拉', '拉·奥若拉', '拉·欧罗拉', '奥罗拉', '欧若拉',
               '拉奥洛拉', '拉欧洛拉', '拉阿罗拉', '拉啊罗拉', '拉澳罗拉',
               '拉澳若拉', '曙光', '极光', '黎明', '拉黎明', '拉·晨光',
               '拉·曙光', 'la aurora', 'aurora'
           ),
           'plasencia' => array(
               '普拉森西亚', '普拉森西娅', '普拉森希亚', '普拉森希娅',
               '普拉申西亚', '普拉申西娅', '普拉申希亚', '普拉申希娅',
               '普拉森', '普拉申', '普拉森夏', '普拉申夏', '普拉森霞',
               '普拉申霞', '普拉圣西亚', '普拉圣夏', '普拉森斯亚',
               '普拉申斯亚', '普拉先西亚', '普拉先夏', '普拉辛西亚',
               'plasencia'
           ),
           'tatuaje' => array(
               '塔图阿赫', '塔图哈耶', '纹身', '塔图亚耶', '塔图阿杰',
               '塔图哈杰', '达图阿赫', '达图哈耶', '塔图艾', '塔图耶',
               '塔图杰', '塔图埃', '塔图阿埃', '塔图哈埃', '刺青', '文身',
               '塔图阿黑', '塔图', '达图', 'tatuaje'
           ),
           'liga privada' => array(
               '私人联盟', '私人同盟', '利加私人', '利加', '私藏联盟',
               '私藏同盟', '秘密联盟', '秘密同盟', '里加私人', '里加',
               '利嘉私人', '利嘉', '私人利加', '私人里加', '私人利嘉',
               '私人同盟', '私人联合', '利加私藏', 'liga privada', 'liga'
           ),
           'undercrown' => array(
               '地下皇冠', '恩都罗', '下冠', '暗冠', '皇冠下', '地下冠',
               '安德皇冠', '安德冠', '恩德皇冠', '恩德冠', '底冠', '低冠',
               '次皇冠', '次冠', '皇冠之下', '恩都爵', '安德冠冕',
               'undercrown', 'uc'
           ),
           'kristoff' => array(
               '克里斯托夫', '克里斯托弗', '克里斯多夫', '克里斯多弗',
               '克里斯朵夫', '克里斯朵弗', '基里斯托夫', '基里斯托弗',
               '克里斯托福', '克里斯多福', '克里斯朵福', '基里斯托福',
               '克里斯托', '克里斯多', '克里斯多夫', '克里斯朵夫',
               'kristoff'
           ),
           'crowned heads' => array(
               '加冕之首', '皇冠之首', '冠首', '皇冠之头', '加冕之头',
               '冠头', '王冠之首', '王冠之头', '皇冠头', '加冕头',
               '王冠头', '冠军之首', '冠军之头', '冠军头', '加冕头冠',
               '皇冠头部', '加冕首脑', 'crowned heads', 'ch'
           ),
           'viaje' => array(
               '维亚赫', '维阿赫', '维亚杰', '维阿杰', '旅行', '旅程',
               '航程', '征程', '威亚赫', '威阿赫', '威亚杰', '威阿杰',
               '维亚热', '维阿热', '威亚热', '威阿热', '旅途', '行程',
               '维亚黑', '威亚黑', 'viaje'
           ),
           'l\'atelier' => array(
               '工作室', '工坊', '拉特利尔', '拉特利埃', '拉特利耶',
               '拉特丽尔', '拉特丽埃', '拉特丽耶', '拉泰利尔', '拉泰利埃',
               '拉泰利耶', '拉泰丽尔', '拉泰丽埃', '拉泰丽耶', '工匠',
               '匠人', '工作坊', '制作室', '拉·工坊', 'l\'atelier',
               'latelier', 'l atelier'
           ),
           'southern draw' => array(
               '南方绘画', '南方抽签', '南部绘画', '南部抽签', '南方画',
               '南部画', '南方德劳', '南部德劳', '索瑟恩德劳', '索瑟恩德洛',
               '南方德洛', '南部德洛', '南方拉', '南部拉', '南方画作',
               '南部画作', '南方素描', '南部素描', 'southern draw', 'sd'
           ),
           'herrera esteli' => array(
               '埃雷拉埃斯特利', '埃雷拉埃斯特里', '赫雷拉埃斯特利',
               '赫雷拉埃斯特里', '艾雷拉埃斯特利', '艾雷拉埃斯特里',
               '埃雷拉', '赫雷拉', '艾雷拉', '埃斯特利', '埃斯特里',
               '埃雷拉艾斯特利', '赫雷拉艾斯特利', '艾雷拉艾斯特利',
               '埃雷拉·埃斯特利', '赫雷拉·埃斯特利', 'herrera esteli', 'he'
           ),
           'foundation' => array(
               '基础', '基金会', '基金', '创基', '创立', '奠基', '根基',
               '基石', '佛恩达深', '方德深', '方德森', '丰德深', '丰德森',
               '富恩达深', '富恩达森', '创办', '基金会雪茄', '创基雪茄',
               '基础雪茄', 'foundation', 'foundation cigars'
           ),
           'warped' => array(
               '翘曲', '弯曲', '华普德', '瓦普德', '沃普德', '华普特',
               '瓦普特', '沃普特', '华普', '瓦普', '沃普', '变形',
               '扭曲', '歪曲', '华博德', '瓦博德', '沃博德', '华普雪茄',
               '瓦普雪茄', '沃普雪茄', 'warped', 'warped cigars'
           ),
           'dunbarton tobacco & trust' => array(
               '邓巴顿烟草信托', '邓巴顿', '邓巴敦烟草信托', '邓巴敦',
               '登巴顿烟草信托', '登巴顿', '登巴敦烟草信托', '登巴敦',
               '敦巴顿烟草信托', '敦巴顿', '敦巴敦烟草信托', '敦巴敦',
               '邓巴顿烟草', '邓巴敦烟草', '登巴顿烟草', '登巴敦烟草',
               '邓巴顿烟草与信托', '邓巴敦烟草与信托', 'dunbarton tobacco & trust',
               'dunbarton', 'dt&t'
           ),
           'illusione' => array(
               '幻影', '幻象', '幻觉', '错觉', '伊鲁西奥内', '伊鲁西奥尼',
               '伊露西奥内', '伊露西奥尼', '伊路西奥内', '伊路西奥尼',
               '伊卢西奥内', '伊卢西奥尼', '伊陆西奥内', '伊陆西奥尼',
               '幻境', '错觉', '伊鲁斯', '伊露斯', '幻象雪茄', 'illusione'
           ),
           'roma craft' => array(
               '罗马工艺', '罗马工坊', '罗马手工', '罗马技艺', '罗马克拉夫特',
               '罗马克拉夫', '罗马克莱夫特', '罗马克莱夫', '罗玛工艺',
               '罗玛工坊', '罗玛手工', '罗玛技艺', '罗玛克拉夫特',
               '罗玛克拉夫', '罗马匠艺', '罗玛匠艺', 'roma craft', 'romacraft'
           ),
           'leaf by oscar' => array(
               '奥斯卡之叶', '奥斯卡叶子', '奥斯卡烟叶', '叶子奥斯卡',
               '烟叶奥斯卡', '奥斯卡的叶', '奥斯卡的烟叶', '奥斯卡的叶子',
               '奥斯卡之页', '奥斯卡页', '欧斯卡之叶', '欧斯卡叶子',
               '欧斯卡烟叶', '奥斯卡树叶', '奥斯卡叶片', 'leaf by oscar', 'leaf'
           ),
           'espinosa' => array(
               '埃斯皮诺萨', '埃斯皮诺莎', '艾斯皮诺萨', '艾斯皮诺莎',
               '埃斯宾诺萨', '埃斯宾诺莎', '艾斯宾诺萨', '艾斯宾诺莎',
               '埃斯比诺萨', '埃斯比诺莎', '艾斯比诺萨', '艾斯比诺莎',
               '埃斯匹诺萨', '埃斯匹诺莎', '艾斯匹诺萨', '艾斯匹诺莎',
               '埃斯皮诺萨雪茄', 'espinosa', 'espinosa cigars'
           ),
           'mbombay' => array(
               '孟买', '蒙贝', '蒙拜', '孟贝', '孟拜', '蒙买', '姆贝',
               '姆拜', '姆孟买', '姆蒙贝', '姆蒙拜', '姆孟贝', '姆孟拜',
               '姆蒙买', '母贝', '母拜', '姆邦贝', '姆邦拜', '姆孟贝',
               'mbombay', 'm bombay'
           ),
           'avo' => array(
               '阿沃', '爱沃', '艾沃', '阿伏', '爱伏', '艾伏', '阿佛',
               '爱佛', '艾佛', '阿窝', '爱窝', '艾窝', '阿握', '爱握',
               '艾握', '阿夫', '爱夫', '艾夫', '阿沃雪茄', '艾沃雪茄',
               'avo', 'avo cigars'
           ),
           'room101' => array(
               '101房间', '房间101', '101室', '室101', '101号房',
               '房号101', '101号室', '室号101', '一零一房间', '房间一零一',
               '一零一室', '室一零一', '壹零壹房间', '房间壹零壹',
               '壹零壹室', '室壹零壹', '房间101', '101号', 'room101',
               'room 101'
           ),
           'asylum' => array(
               '疯人院', '精神病院', '避难所', '庇护所', '收容所', '阿塞勒姆',
               '阿赛勒姆', '阿塞伦', '阿赛伦', '阿西勒姆', '阿西伦',
               '艾塞勒姆', '艾赛勒姆', '艾塞伦', '艾赛伦', '避难', '庇护',
               '收容', '疯院', 'asylum', 'asylum cigars'
           ),
           'quesada' => array(
               '克萨达', '奎萨达', '凯萨达', '盖萨达', '格萨达', '克塞达',
               '奎塞达', '凯塞达', '盖塞达', '格塞达', '克赛达', '奎赛达',
               '凯赛达', '盖赛达', '格赛达', '奎沙达', '凯沙达', '克沙达',
               '盖沙达', '格沙达', 'quesada'
           ),
           'hammer + sickle' => array(
               '锤子镰刀', '锤与镰', '铁锤镰刀', '铁锤与镰刀', '锤镰',
               '锤和镰刀', '锤加镰刀', '锤子加镰刀', '铁锤加镰刀',
               '哈默与镰刀', '哈默加镰刀', '汉默与镰刀', '汉默加镰刀',
               '锤子和镰刀', '铁锤和镰刀', 'hammer + sickle', 'hammer and sickle',
               'hammer & sickle'
           ),
           'fratello' => array(
               '兄弟', '弗拉特洛', '富拉特洛', '夫拉特洛', '弗拉泰洛',
               '富拉泰洛', '夫拉泰洛', '弗拉特罗', '富拉特罗', '夫拉特罗',
               '弗拉泰罗', '富拉泰罗', '夫拉泰罗', '兄弟雪茄', '法拉特洛',
               '弗拉特罗', '富拉特罗', '兄弟牌', 'fratello', 'fratello cigars'
           )
       );
   }

   /**
    * Enhanced size mappings with complete Chinese terms
    */
   public static function get_size_mappings() {
       return array(
           // Common vitola names with all variations
           'robusto' => array(
               '罗布图', '罗伯图', '罗拔图', '罗布斯托', '罗布托',
               '罗布', '劳伯图', '罗布图斯', '罗伯图斯', '罗普图',
               '罗布士图', '罗伯士图', '罗布司托', '罗布斯托', '罗布斯多',
               '粗短', '粗短型', 'robusto', 'robust'
           ),
           'toro' => array(
               '托罗', '公牛', '多罗', '托洛', '多洛', '托鲁', '多鲁',
               '特罗', '特洛', '特鲁', '托诺', '多诺', '托罗型', '公牛型',
               '托羅', '多羅', 'toro', 'bull'
           ),
           'torpedo' => array(
               '鱼雷', '托皮多', '鱼型', '雷', '托比多', '托皮铎',
               '托比铎', '鱼形', '鱼雷型', '雷形', '鱼雷头', '雷型',
               '鱼雷形', '托必多', '托比多', '鱼雷状', 'torpedo'
           ),
           'churchill' => array(
               '丘吉尔', '丘', '邱吉尔', '丘切尔', '丘丘', '邱丘',
               '丘丘尔', '丘尔切', '丘奇尔', '邱切尔', '丘吉尔型',
               '邱吉尔型', '长丘', '邱吉爾', '丘吉爾', 'churchill'
           ),
           'corona' => array(
               '皇冠', '科罗那', '皇', '冠', '科罗娜', '克罗那',
               '可罗那', '科罗', '克罗娜', '可罗娜', '皇冠型', '科罗那型',
               '科罗纳', '克罗纳', '可罗纳', 'corona'
           ),
           'petit corona' => array(
               '小皇冠', '小科罗那', '小皇', '小冠', '迷你皇冠',
               '小克罗那', '迷你科罗那', '小科罗娜', '迷你科罗娜',
               '小型皇冠', '小号皇冠', '小科罗纳', '小克罗纳', '小皇冠型',
               'petit corona', 'petite corona'
           ),
           'lancero' => array(
               '长矛', '兰塞罗', '长', '矛', '兰赛罗', '长矛型',
               '细长', '长形', '兰彻罗', '兰切罗', '兰瑟罗', '兰色罗',
               '兰塞洛', '兰赛洛', '长矛形', '细长型', 'lancero'
           ),
           'belicoso' => array(
               '比利高', '彪丽高', '比利高斯', '鱼雷', '比利', '贝利高',
               '比利克', '比丽高', '比利科', '比利克斯', '贝利科索',
               '比利科索', '彪利高', '比利高索', '比利高型', 'belicoso'
           ),
           'pyramid' => array(
               '金字塔', '金塔', '塔型', '比拉米德', '比拉米', '比拉米特',
               '金塔型', '塔', '金字型', '比拉密德', '金字塔型', '金塔形',
               '派拉米德', '皮拉米德', '塔形', 'pyramid'
           ),
           'piramides' => array(
               '金字塔', '皮拉米德', '塔', '金塔', '皮拉密', '皮拉密德',
               '皮拉米', '皮拉米德斯', '金字塔型', '金塔形', '比拉米德斯',
               '派拉米德斯', '皮拉米得', '皮拉米得斯', 'piramides'
           ),
           'gran toro' => array(
               '大托罗', '大公牛', '巨型托罗', '格兰托罗', '大型托罗',
               '格兰托鲁', '巨托罗', '大托鲁', '特大托罗', '特大公牛',
               '巨型公牛', '格兰多罗', '格蘭托羅', '大公牛型', 'gran toro',
               'grand toro'
           ),
           'perfecto' => array(
               '完美', '珀费托', '双头', '双头锥', '双头雪茄', '双头型',
               '完美型', '双锥', '珀费克托', '完善', '双尖', '双尖型',
               '完美形', '珀费克多', '双头形', 'perfecto'
           ),
           'double corona' => array(
'双皇冠', '双科罗那', '双皇', '双冠', '双克罗那',
               '双科罗娜', '双克罗娜', '双重皇冠', '双重科罗那',
               '双重科罗娜', '双倍皇冠', '双倍科罗那', '雙皇冠',
               '雙科羅那', 'double corona'
           ),
           'culebra' => array(
               '盘蛇', '麻花雪茄', '库莱伯拉', '三头雪茄', '曲线',
               '蛇型', '盘绕', '库列布拉', '麻花', '蛇形', '盘蛇型',
               '麻花型', '三股麻花', '盘绕型', '库勒布拉', 'culebra'
           ),
           'panetela' => array(
               '帕内特拉', '长宾丽', '宾丽', '细长型', '帕尼特拉',
               '帕尼丽', '帕内特', '帕尼特', '宾利', '长宾利',
               '帕内德拉', '帕尼德拉', '细直', '细长雪茄', 'panetela'
           ),
           'lonsdale' => array(
               '朗斯代尔', '长秀丽', '隆斯代尔', '朗', '朗思代尔',
               '朗斯台尔', '隆斯台尔', '朗斯达尔', '隆斯达尔',
               '朗斯戴尔', '朗斯戴尔型', '隆斯戴尔型', '朗斯代爾',
               'lonsdale'
           ),
           'rothschild' => array(
               '罗斯柴尔德', '洛芝', '罗斯切尔德', '罗斯', '罗子',
               '罗斯查尔德', '罗斯彻尔德', '洛芝尔德', '罗斯柴',
               '罗斯切', '罗斯柴尔德型', '洛芝型', '罗氏', 'rothschild'
           ),
           'petit' => array(
               '小型', '小号', '小', '迷你', '贝蒂', '佩蒂', '迷你型',
               '微型', '佩提', '贝提', '小巧', '小型号', '小款', 'petit'
           ),
           'short' => array(
               '短', '矮', '短号', '短款', '肖特', '短型', '短小',
               '矮型', '矮小', '短体', '短身', '矮胖', '短粗', 'short'
           ),
           'gordo' => array(
               '胖皇冠', '胖皇', '戈尔多', '胖', '戈多', '胖型',
               '肥', '宽', '厚', '胖款', '肥大', '粗大', '戈尔多型',
               '戈多型', 'gordo'
           ),
           'presidente' => array(
               '总统', '普雷西登特', '总裁', '主席', '总', '普雷',
               '总统型', '总裁型', '主席型', '普雷西', '総統', '總裁',
               '普雷希登特', '總統型', 'presidente', 'president'
           ),
           'corona gorda' => array(
               '皇冠戈达', '胖皇冠', '科罗娜戈达', '胖科罗那', '科达',
               '胖冠', '皇冠胖', '科罗那胖', '戈达冠', '戈达科罗那',
               '粗皇冠', '粗科罗那', '胖冠型', 'corona gorda'
           ),
           'hermoso' => array(
               '美丽', '埃尔莫索', '赫莫索', '秀丽', '漂亮', '艾尔莫索',
               '赫尔莫索', '赫莫', '艾莫索', '赫莫', '美丽型', '秀丽型',
               '埃尔莫索型', '赫莫索型', 'hermoso'
           ),
           'julieta' => array(
               '朱丽叶', '胡丽塔', '朱丽', '胡莉亚', '如利特', '朱利叶',
               '尤利特', '尤莉特', '裘利塔', '朱利', '茱莉叶', '茱丽叶',
               '朱莉叶', '朱麗葉', 'julieta'
           ),
           'magnum' => array(
               '大皇冠', '麦格纳姆', '麦格纽姆', '马格南', '麦格龙',
               '马格农', '麦格南', '大口径', '马格侬', '麦格尼姆',
               '麦格纳', '马格纳', '大号', '特大号', 'magnum'
           ),
           'cazadores' => array(
               '猎人', '卡萨多雷斯', '卡扎多雷斯', '猎手', '猎者',
               '卡萨', '卡扎', '猎人型', '卡萨多', '卡扎多', '獵人',
               '獵手', '卡薩多雷斯', '卡扎多雷斯', 'cazadores'
           ),
           'edmundo' => array(
               '艾德蒙多', '爱德蒙多', '埃德蒙多', '艾蒙多', '爱蒙多',
               '埃蒙多', '艾德蒙', '爱德蒙', '埃德蒙', '艾德', '埃德蒙多型',
               '艾德蒙多型', '愛德蒙多', '埃德蒙', 'edmundo'
           ),
           'petit edmundo' => array(
               '小艾德蒙多', '小爱德蒙多', '迷你艾德蒙多', '小埃德蒙多',
               '迷你爱德蒙多', '迷你埃德蒙多', '小艾蒙多', '小爱蒙多',
               '小埃蒙多', '小型艾德蒙多', '小艾德', '小爱德', 'petit edmundo'
           ),
           'siglo' => array(
               '世纪', '西格鲁', '西格洛', '世纪', 'sig', '西格',
               '西格罗', '世', '西', '纪', '世紀', '西格魯', '希格洛',
               '希格鲁', 'siglo'
           ),
           'behike' => array(
               '贝希克', '贝依可', '比海客', 'BHK', '贝黑克', '贝海克',
               '比依克', '贝克', '贝依克', '比黑克', '貝希克', '貝依可',
               '比海客', '貝黑克', 'behike', 'bhk'
           ),
           'nobles' => array(
               '贵族', '诺布雷斯', '贵', '高尚', '尊贵', '诺布',
               '诺布尔', '贵人', '贵胄', '贵族型', '貴族', '諾布雷斯',
               '尊贵型', '高贵型', 'nobles'
           ),
           'genios' => array(
               '天才', '杰尼奥斯', '吉尼奥斯', '天资', '精灵', '天赋',
               '天分', '杰尼', '吉尼', '天才型', '傑尼奧斯', '吉尼奧斯',
               '天資', '天賦', 'genios'
           ),
           'secretos' => array(
               '秘密', '奥秘', '塞克雷托斯', '秘', '隐秘', '塞克雷',
               '塞克', '秘藏', '隐', '奥', '秘密型', '奧秘', '隱秘',
               '秘藏型', 'secretos'
           ),
           // Additional less common sizes
           'salomon' => array(
               '所罗门', '萨洛蒙', '所罗门王', '所罗', '萨洛', '所罗王',
               '所王', '萨王', '所罗门型', '萨洛蒙型', '所羅門', '薩洛蒙',
               '所羅門王', '巨型', 'salomon'
           ),
           'diademas' => array(
               '皇冠珠', '戴德玛', '钢盔', '皇冠', '戴德', '钢',
               '戴德玛斯', '皇冠珠型', '戴德玛型', '钢盔型', '皇冠珠',
               '戴德瑪', '鋼盔', 'diademas'
           ),
           'gigante' => array(
               '巨人', '巨型', '超大', '巨大', '吉甘特', '基甘特',
               '巨人型', '超大型', '巨大型', '巨无霸', '超级大',
               '巨型雪茄', 'gigante', 'giant'
           ),
           'gran corona' => array(
               '大皇冠', '格兰科罗那', '大科罗那', '大克罗那', '大冠',
               '大皇', '格兰冠', '特大皇冠', '特大科罗那', '特大冠',
               '格蘭科羅那', '大型皇冠', 'gran corona', 'grand corona'
           ),
           'demi tasse' => array(
               '小杯', '半杯', '德米塔斯', '小咖啡', '迷你杯', '德米',
               '半咖啡', '小塔斯', '德米塔', '塔斯', '小杯型', '半杯型',
               '德米塔斯型', 'demi tasse', 'demitasse'
           ),
           'perla' => array(
               '珍珠', '帕拉', '佩尔拉', '宝珠', '明珠', '珠', '小珠',
               '帕尔', '佩尔', '珍', '珍珠型', '寶珠', '明珠型', 'perla'
           ),
           'minuto' => array(
               '分钟', '米努托', '迷你托', '分', '米努', '微托', '迷你',
               '迷', '分钟型', '米型', '分鐘', '米努托型', '迷你型', 'minuto'
           ),
           'nub' => array(
               '纳布', '短粗', '短宽', '纳伯', '小粗', '粗短', '宽短',
               'nab', '纳', '小肥', '納布', '短粗型', '短寬型', 'nub'
           ),
           'petite corona' => array(
               '小皇冠', '小科罗那', '小冠', '迷你皇冠', '小克罗那',
               '迷你科罗那', '小科罗娜', '迷你科罗娜', '小型皇冠',
               '小巧皇冠', '小號皇冠', 'petite corona', 'petit corona'
           ),
           'corona extra' => array(
               '特级皇冠', '皇冠特级', '额外皇冠', '特制皇冠', '皇冠特制',
               '额外科罗那', '特级科罗那', '科罗那特级', '额外冠',
               '特级冠', '特級皇冠', 'corona extra'
           ),
           'robusto extra' => array(
               '特级罗布图', '额外罗布托', '特罗布图', '特级罗布托',
               '额外罗布图', '特罗布托', '特级罗伯图', '额外罗伯图',
               '特罗伯图', '特级罗拔图', '特級羅布圖', 'robusto extra',
               'robustos extra'
           ),
           'cigarillo' => array(
               '小雪茄', '迷你雪茄', '小型雪茄', '小烟', '迷你烟',
               '小型烟', '小雪', '迷你雪', '小型雪', '微型雪茄',
               '细雪茄', '細雪茄', '小型', 'cigarillo', 'cigarillos'
           ),
           // Ring gauge specific terms
           'sixty' => array(
               '六十', '60号', '六零', '陆零', '陆拾', '六拾', '60环',
               '六十号', '六十环', '60', '六十環', '六十號', '60環徑',
               'sixty', '60'
           ),
           'fifty' => array(
               '五十', '50号', '五零', '伍零', '伍拾', '五拾', '50环',
               '五十号', '五十环', '50', '五十環', '五十號', '50環徑',
               'fifty', '50'
           ),
           'seventy' => array(
               '七十', '70号', '七零', '柒零', '柒拾', '七拾', '70环',
               '七十号', '七十环', '70', '七十環', '七十號', '70環徑',
               'seventy', '70'
           )
       );
   }

   /**
    * Special mappings including models, editions, and patterns
    */
   public static function get_special_mappings() {
       return array(
           // Model patterns with improved regex
           'model_patterns' => array(
               // Siglo patterns for Cohiba
               '世纪[一1](?:号)?|西格鲁[一1](?:号)?|Siglo\\s*[iI]' => 'Siglo I',
               '世纪[二2](?:号)?|西格鲁[二2](?:号)?|Siglo\\s*[iI][iI]' => 'Siglo II',
               '世纪[三3](?:号)?|西格鲁[三3](?:号)?|Siglo\\s*[iI][iI][iI]' => 'Siglo III',
               '世纪[四4](?:号)?|西格鲁[四4](?:号)?|Siglo\\s*[iI][vV]' => 'Siglo IV',
               '世纪[五5](?:号)?|西格鲁[五5](?:号)?|Siglo\\s*[vV]' => 'Siglo V',
               '世纪[六6](?:号)?|西格鲁[六6](?:号)?|Siglo\\s*[vV][iI]' => 'Siglo VI',
               '半世纪|Medio\\s*Siglo' => 'Medio Siglo',
               
               // Common number patterns
               'No\\.\\s*([1-9])|#([1-9])|([1-9])号' => 'No. $1$2$3',
               '#\\s*([1-9])号?' => 'No. $1',
               '([1-9])\\s*号' => 'No. $1',
               
               // Series patterns
               'Serie\\s*([A-Z])\\s*No\\.\\s*([1-9])' => 'Serie $1 No.$2',
               '([A-Z])系列\\s*([1-9])(?:号)?' => 'Serie $1 No.$2',
               
               // Behike patterns
               'BHK\\s*#?\\s*(\\d+)' => 'Behike $1',
               '贝希克\\s*(\\d+)' => 'Behike $1',
               '贝依可\\s*(\\d+)' => 'Behike $1',
               
               // Anniversary patterns
               '(\\d{1,3})\\s*周年' => '$1th Anniversary',
               '(\\d{1,3})\\s*週年' => '$1th Anniversary',
               '(\\d{1,3})\\s*Anniversary' => '$1th Anniversary',
               
               // Year editions
               '(19|20)(\\d{2})\\s*限量版?' => '$1$2 Limited Edition',
               '(19|20)(\\d{2})\\s*LE' => '$1$2 LE',
               
               // Chinese zodiac
               '虎年' => 'Year of the Tiger',
               '龙年' => 'Year of the Dragon',
               '兔年' => 'Year of the Rabbit',
               '蛇年' => 'Year of the Snake',
               '马年' => 'Year of the Horse',
               '羊年' => 'Year of the Sheep',
               '猴年' => 'Year of the Monkey',
               '鸡年' => 'Year of the Rooster',
               '狗年' => 'Year of the Dog',
               '猪年' => 'Year of the Pig',
               '鼠年' => 'Year of the Rat',
               '牛年' => 'Year of the Ox',
               
               // Size variants
               '小\\s*(.+)' => 'Petit $1',
               '大\\s*(.+)' => 'Gran $1',
               '双\\s*(.+)' => 'Double $1',
               '特级\\s*(.+)' => 'Extra $1',
               
               // Specific Cuban models
               '美食家\\s*([12])号?' => 'Epicure No.$1',
               '美食家特别' => 'Epicure Especial',
               '开放\\s*鹰' => 'Open Eagle',
               '开放\\s*大师' => 'Open Master',
               '开放\\s*初级' => 'Open Junior',
               '开放\\s*赛艇' => 'Open Regatta',
               
               // Specific non-Cuban models
               'V\\s*梅拉尼奥' => 'Serie V Melanio',
               '大师杰作' => 'Master Blends',
               '不敢说话的X' => 'Opus X',
               '海明威' => 'Hemingway',
               '唐卡洛斯' => 'Don Carlos',
               '安妮欧' => 'Anejo',
               
               // Davidoff patterns
               '大卫杜夫\\s*([白黑金银])牌' => 'Davidoff $1 Label',
               '达维多夫\\s*([白黑金银])牌' => 'Davidoff $1 Label',
               '尼加拉瓜\\s*10\\s*周年' => 'Nicaragua 10th Anniversary',
               '温斯顿丘吉尔' => 'Winston Churchill',
               '至暗时刻' => 'The Late Hour',
               '千禧' => 'Millennium',
               '格兰高' => 'Grand Cru',
               
               // Rocky Patel patterns
               '十周年' => 'Decade',
               '十五周年' => '15th Anniversary',
               '二十周年' => '20th Anniversary',
               '老年\\s*(\\d{4})' => 'Vintage $1',
               
               // EP Carrillo patterns
               '誓约' => 'Pledge',
               '安可' => 'Encore',
               '历史' => 'La Historia',
               '英寸' => 'Inch',
               
               // Liga Privada patterns
               '利加\\s*9' => 'Liga Privada No.9',
               '利加\\s*T52' => 'Liga Privada T52',
               '恩都罗\\s*阴影' => 'Undercrown Shade',
               '恩都罗\\s*马杜罗' => 'Undercrown Maduro'
           ),
           
           // Special edition terms
           'special_editions' => array(
               // Limited editions
               'limited edition', '限量版', '限定版', '限量', '限定', 
               '限制版', '限制', '限量发行', '限定发行', 'edición limitada',
               'edicion limitada', 'edition limitee', 'limitada', 'LE',
               
               // Regional editions
               'regional edition', '区域版', '地区版', '专供', '区域专供',
               '地区专供', '区域限定', '地区限定', 'edición regional',
               'edicion regional', 'edition regionale', 'regional', 'RE',
               
               // Travel retail
               'travel retail', 'duty free', '免税', '旅行零售', '旅游版',
               '旅行版', '旅游零售', '免税店专供', '机场版', '免税店版',
               'travel exclusive', '旅行专供', '旅游专供',
               
               // Reserve editions
               'reserve', 'reserva', 'réserve', '珍藏', '储备', '保留',
               '珍品', '珍藏版', '典藏版', 'gran reserva', 'grand reserve',
               'reserva especial', '特别珍藏', '特级珍藏',
               
               // Anniversary editions
               'anniversary', '周年', '週年', '周年纪念', '週年纪念',
               '纪念', '周年庆', '週年庆', '纪念版', 'aniversario',
               
               // Vintage and aged
               'vintage', '年份', '陈年', '老酒', '陈酿', '年代',
               '年份版', '陈年版', '老酒版', 'aged', '老化', '老熟',
               '老陈', '陈放', '熟成',
               
               // Special collections
               'collection', 'colección', 'coleccion', '收藏', '收藏家',
               '收藏版', '珍藏版', '收藏家版', '典藏', 'humidor',
               '雪茄盒', '保湿盒',
               
               // Book series
               'book', '书', '书籍', '书本', '书型', '书式', '书状',
               'libro', '书盒', '书本系列',
               
               // Gift sets
               'gift', 'gift set', '礼盒', '礼品', '礼物', '礼品装',
               '礼盒装', '套装', '组合', '套组',
               
               // Special releases
               'special release', '特别版', '特殊版', '特制版', '特供',
               '特别发行', '特殊发行', '特制', 'special edition',
               
               // Regional indicators
               'LCDH', 'Ex.', '地限', '区限', '专卖店', 'Casa del Habano',
               '哈瓦那之家', '友谊商店',
               
               // Year indicators
               'LE \\d{4}', 'RE \\d{4}', 'EL \\d{4}', 'ER \\d{4}',
               '\\d{4} LE', '\\d{4} RE', '\\d{4}限量版', '\\d{4}地区版'
           ),
           
           // Packaging terms
           'packaging_terms' => array(
               // Box types
               'wooden box', 'cabinet', 'dress box', 'varnished box',
               'slide lid box', 'sbn', 'boite nature', '木盒', '木箱',
               '礼盒', '原木盒', '漆盒', '推拉盖盒', '展示盒', '实木盒',
               
               // Count patterns
               '(\\d+)\\s*(?:ct|count|pcs|cigars|支|只|枝)',
               'box of (\\d+)', 'pack of (\\d+)', '(\\d+)支装',
               '(\\d+)只装', '(\\d+)-count',
               
               // Tube types
               'tubed', 'tubos', 'aluminum tube', 'metal tube', 'A/T',
               '管装', '铝管', '管装版', '金属管', '铝管装',
               
               // Special packaging
               'jar', 'ceramic jar', 'humidor', 'travel humidor',
               '罐', '瓶', '陶罐', '保湿盒', '旅行保湿盒',
               
               // Bundles
               'bundle', 'bundle of', '捆', '扎', '束', '捆装',
               
               // Paper types
               'cellophane', 'paper', '玻璃纸', '纸', '纸包装',
               
               // Special formats
               '3-3-3', '5-5-5', '8-9-8', '三层', '五层', 'layer'
           ),
           
           // Dimension patterns
           'dimension_patterns' => array(
               // Ring gauge x Length patterns
               '(\\d{2})\\s*[x×]\\s*(\\d{3})',
               '(\\d{2})\\s*环.*?(\\d{3})\\s*(?:mm|毫米)?',
               '(\\d{2})RG.*?(\\d{3})mm',
               
               // Ring gauge indicators
               '(\\d{2})\\s*(?:环|环规|环号|环径|ring|RG)',
               
               // Length indicators
               '(\\d{3})\\s*(?:mm|毫米|厘米|cm|MM)',
               
               // Combined formats
               '(\\d{2})/(\\d{3})',
               '(\\d{2})\\*(\\d{3})',
               
               // Vitola specific dimensions
               '50x124' => 'Robusto',
               '52x156' => 'Piramides',
               '47x178' => 'Churchill',
               '42x129' => 'Corona',
               '38x152' => 'Lancero',
               '54x145' => 'Belicoso',
               '55x140' => 'Wide Churchill',
               '60x178' => 'Gigante'
           ),
           
           // Regional mappings
           'regional_mappings' => array(
               // Countries and regions
               'asia pacific' => array('亚太', '亚洲太平洋', '亚太地区'),
               'europe' => array('欧洲', '欧盟', '歐洲'),
               'americas' => array('美洲', '美州', '美洲地区'),
               'middle east' => array('中东', '中東', '中东地区'),
               'africa' => array('非洲', '非州', '非洲地区'),
               
               // Specific countries
               'china' => array('中国', '中國', '中华'),
               'hong kong' => array('香港', '港', 'HK'),
               'taiwan' => array('台湾', '台灣', '台'),
               'japan' => array('日本', '日', 'JP'),
               'korea' => array('韩国', '韓國', '韩', '韓'),
               'singapore' => array('新加坡', '星加坡', '新'),
               'malaysia' => array('马来西亚', '馬來西亞', '大马'),
               'thailand' => array('泰国', '泰國', '泰'),
               'philippines' => array('菲律宾', '菲律賓', '菲'),
               'indonesia' => array('印度尼西亚', '印尼', '印度尼西亞'),
               'vietnam' => array('越南', '越'),
               'india' => array('印度', '印'),
               
               // European countries
               'uk' => array('英国', '英國', '英', 'UK'),
               'germany' => array('德国', '德國', '德'),
               'france' => array('法国', '法國', '法'),
               'spain' => array('西班牙', '西'),
               'italy' => array('意大利', '義大利', '意'),
               'switzerland' => array('瑞士', '瑞'),
               'netherlands' => array('荷兰', '荷蘭', '荷'),
               'belgium' => array('比利时', '比利時', '比'),
               'portugal' => array('葡萄牙', '葡'),
               'greece' => array('希腊', '希臘', '希'),
               'russia' => array('俄罗斯', '俄羅斯', '俄'),
               
               // Americas
               'usa' => array('美国', '美國', '美', 'USA'),
               'canada' => array('加拿大', '加'),
               'mexico' => array('墨西哥', '墨'),
               'brazil' => array('巴西', '巴'),
               'argentina' => array('阿根廷', '阿'),
               
               // Middle East
               'uae' => array('阿联酋', '阿聯酋', '迪拜', '杜拜'),
              'lebanon' => array('黎巴嫩', '黎'),
               'israel' => array('以色列', '以'),
               'saudi arabia' => array('沙特', '沙特阿拉伯', '沙烏地阿拉伯'),
               
               // Special administrative regions
               'macau' => array('澳门', '澳門', '澳'),
               
               // Distributors
               'pcc' => array('太平洋雪茄', '太平洋', 'PCC'),
               'hunters & frankau' => array('亨特与弗兰考', '亨特', 'H&F'),
               'phoenicia' => array('菲尼基亚', '菲尼基亞'),
               'habanos' => array('哈瓦那斯', '哈瓦那公司', 'HSA'),
               'la casa del habano' => array('哈瓦那之家', '雪茄之家', 'LCDH')
           )
       );
   }

   /**
    * Get categorized keywords from product name
    * Enhanced with intelligent extraction and categorization
    */
   public static function get_categorized_keywords($product_name, $filter_common = true) {
       if (empty($product_name)) {
           return array();
       }
       
       $product_name = trim($product_name);
       
       // Initialize categories
       $keywords = array(
           'brand' => array(),
           'model' => array(),
           'vitola' => array(),
           'dimensions' => array(),
           'special_edition' => array(),
           'year' => array(),
           'count' => array(),
           'packaging' => array(),
           'general' => array(),
           'regional' => array()
       );
       
       // Convert to lowercase for matching
       $lowercase_name = mb_strtolower($product_name);
       
       // Extract brand keywords
       self::extract_brand_keywords($lowercase_name, $keywords);
       
       // Extract vitola (size) keywords
       self::extract_vitola_keywords($lowercase_name, $keywords);
       
       // Extract model patterns
       self::extract_model_patterns($lowercase_name, $keywords);
       
       // Extract special edition keywords
       self::extract_special_edition_keywords($lowercase_name, $keywords);
       
       // Extract dimension patterns
       self::extract_dimension_patterns($lowercase_name, $keywords);
       
       // Extract year patterns
       self::extract_year_patterns($lowercase_name, $keywords);
       
       // Extract count patterns
       self::extract_count_patterns($lowercase_name, $keywords);
       
       // Extract packaging terms
       self::extract_packaging_terms($lowercase_name, $keywords);
       
       // Extract regional indicators
       self::extract_regional_indicators($lowercase_name, $keywords);
       
       // Extract remaining general keywords
       self::extract_general_keywords($lowercase_name, $keywords, $filter_common);
       
       return $keywords;
   }

   /**
    * Extract brand keywords from product name
    */
   private static function extract_brand_keywords($product_name, &$keywords) {
       $all_brands = array_merge(
           self::get_cuban_brand_mappings(),
           self::get_non_cuban_brand_mappings()
       );
       
       foreach ($all_brands as $brand => $variations) {
           // Check brand name
           if (mb_stripos($product_name, $brand) !== false) {
               $keywords['brand'][] = strtolower($brand);
           }
           
           // Check variations
           foreach ($variations as $variation) {
               if (mb_stripos($product_name, $variation) !== false) {
                   $keywords['brand'][] = strtolower($brand);
                   break;
               }
           }
       }
       
       $keywords['brand'] = array_unique($keywords['brand']);
   }

   /**
    * Extract vitola keywords from product name
    */
   private static function extract_vitola_keywords($product_name, &$keywords) {
       $size_mappings = self::get_size_mappings();
       
       foreach ($size_mappings as $size => $variations) {
           // Check size name
           if (mb_stripos($product_name, $size) !== false) {
               $keywords['vitola'][] = strtolower($size);
           }
           
           // Check variations
           foreach ($variations as $variation) {
               if (mb_stripos($product_name, $variation) !== false) {
                   $keywords['vitola'][] = strtolower($size);
                   break;
               }
           }
       }
       
       $keywords['vitola'] = array_unique($keywords['vitola']);
   }

   /**
    * Extract model patterns from product name
    */
   private static function extract_model_patterns($product_name, &$keywords) {
       $model_patterns = self::get_special_mappings()['model_patterns'];
       
       foreach ($model_patterns as $pattern => $replacement) {
           if (preg_match('/' . $pattern . '/iu', $product_name, $matches)) {
               $normalized_model = preg_replace('/' . $pattern . '/iu', $replacement, $matches[0]);
               $keywords['model'][] = strtolower($normalized_model);
           }
       }
       
       $keywords['model'] = array_unique($keywords['model']);
   }

   /**
    * Extract special edition keywords
    */
   private static function extract_special_edition_keywords($product_name, &$keywords) {
       $special_editions = self::get_special_mappings()['special_editions'];
       
       foreach ($special_editions as $term) {
           if (mb_stripos($product_name, $term) !== false) {
               $keywords['special_edition'][] = strtolower($term);
           }
       }
       
       $keywords['special_edition'] = array_unique($keywords['special_edition']);
   }

   /**
    * Extract dimension patterns
    */
   private static function extract_dimension_patterns($product_name, &$keywords) {
       $dimension_patterns = self::get_special_mappings()['dimension_patterns'];
       
       foreach ($dimension_patterns as $pattern => $vitola) {
           if (preg_match('/' . $pattern . '/i', $product_name, $matches)) {
               if (is_numeric($pattern)) {
                   // Direct dimension mapping
                   $keywords['dimensions'][] = $pattern;
                   if (!empty($vitola)) {
                       $keywords['vitola'][] = strtolower($vitola);
                   }
               } else {
                   // Pattern-based extraction
                   if (isset($matches[1]) && isset($matches[2])) {
                       $dimension = $matches[1] . 'x' . $matches[2];
                       $keywords['dimensions'][] = $dimension;
                   }
               }
           }
       }
       
       $keywords['dimensions'] = array_unique($keywords['dimensions']);
   }

   /**
    * Extract year patterns
    */
   private static function extract_year_patterns($product_name, &$keywords) {
       // Extract 4-digit years
       if (preg_match_all('/\b(19|20)\d{2}\b/', $product_name, $matches)) {
           foreach ($matches[0] as $year) {
               $keywords['year'][] = $year;
           }
       }
       
       // Extract Chinese zodiac years
       $zodiac_patterns = array(
           '虎年' => 'Tiger Year',
           '龙年' => 'Dragon Year',
           '兔年' => 'Rabbit Year',
           '蛇年' => 'Snake Year',
           '马年' => 'Horse Year',
           '羊年' => 'Sheep Year',
           '猴年' => 'Monkey Year',
           '鸡年' => 'Rooster Year',
           '狗年' => 'Dog Year',
           '猪年' => 'Pig Year',
           '鼠年' => 'Rat Year',
           '牛年' => 'Ox Year'
       );
       
       foreach ($zodiac_patterns as $chinese => $english) {
           if (mb_stripos($product_name, $chinese) !== false) {
               $keywords['year'][] = strtolower($english);
           }
       }
       
       // Extract anniversary patterns
       if (preg_match('/(\d+)\s*(?:周年|週年|th\s*anniversary)/i', $product_name, $matches)) {
           $keywords['year'][] = $matches[1] . 'th anniversary';
       }
       
       $keywords['year'] = array_unique($keywords['year']);
   }

   /**
    * Extract count patterns
    */
   private static function extract_count_patterns($product_name, &$keywords) {
       $count_patterns = array(
           '/(\d+)\s*(?:支|只|枝|个|根|条|片|块)(?:装)?/',
           '/(\d+)\s*(?:ct|count|pcs|pieces|cigars|sticks)/',
           '/box\s*of\s*(\d+)/',
           '/pack\s*of\s*(\d+)/',
           '/(\d+)-count/',
           '/(\d+)本装/'
       );
       
       foreach ($count_patterns as $pattern) {
           if (preg_match($pattern, $product_name, $matches)) {
               $keywords['count'][] = $matches[1];
           }
       }
       
       $keywords['count'] = array_unique($keywords['count']);
   }

   /**
    * Extract packaging terms
    */
   private static function extract_packaging_terms($product_name, &$keywords) {
       $packaging_terms = self::get_special_mappings()['packaging_terms'];
       
       foreach ($packaging_terms as $term) {
           if (mb_stripos($product_name, $term) !== false) {
               $keywords['packaging'][] = strtolower($term);
           }
       }
       
       $keywords['packaging'] = array_unique($keywords['packaging']);
   }

   /**
    * Extract regional indicators
    */
   private static function extract_regional_indicators($product_name, &$keywords) {
       $regional_mappings = self::get_special_mappings()['regional_mappings'];
       
       foreach ($regional_mappings as $region => $variations) {
           if (mb_stripos($product_name, $region) !== false) {
               $keywords['regional'][] = strtolower($region);
           }
           
           foreach ($variations as $variation) {
               if (mb_stripos($product_name, $variation) !== false) {
                   $keywords['regional'][] = strtolower($region);
                   break;
               }
           }
       }
       
       $keywords['regional'] = array_unique($keywords['regional']);
   }

   /**
    * Extract general keywords
    */
   private static function extract_general_keywords($product_name, &$keywords, $filter_common) {
       // Split into words
       $words = preg_split('/\s+/', $product_name);
       
       // Get common filter words
       $filter_words = $filter_common ? self::$common_filter_words : array();
       
       foreach ($words as $word) {
           $word = trim($word);
           
           // Skip short words
           if (mb_strlen($word) < 2) {
               continue;
           }
           
           // Skip already categorized
           $skip = false;
           foreach ($keywords as $category => $terms) {
               if ($category == 'general') continue;
               if (in_array(strtolower($word), array_map('strtolower', $terms))) {
                   $skip = true;
                   break;
               }
           }
           
           // Skip common filter words
           if (!$skip && !in_array(strtolower($word), array_map('strtolower', $filter_words))) {
               $keywords['general'][] = strtolower($word);
           }
       }
       
       $keywords['general'] = array_unique($keywords['general']);
   }

   /**
    * Calculate match score between supplier and internal products
    * Enhanced with category-based scoring
    */
   public static function calculate_match_score($supplier_keywords, $internal_keywords) {
       $score = 0;
       $matched_keywords = array();
       $category_scores = array();
       
       // Weight configuration
       $weights = array(
           'brand' => KT_CIGAR_WEIGHT_BRAND,
           'model' => KT_CIGAR_WEIGHT_MODEL,
           'vitola' => KT_CIGAR_WEIGHT_VITOLA,
           'dimensions' => KT_CIGAR_WEIGHT_DIMENSION,
           'special_edition' => KT_CIGAR_WEIGHT_SPECIAL_EDITION,
           'year' => KT_CIGAR_WEIGHT_YEAR,
           'count' => KT_CIGAR_WEIGHT_COUNT,
           'packaging' => KT_CIGAR_WEIGHT_PACKAGING,
           'general' => KT_CIGAR_WEIGHT_KEYWORDS,
           'regional' => KT_CIGAR_WEIGHT_REGIONAL
       );
       
       $max_score = array_sum($weights);
       
       // Calculate category scores
       foreach ($weights as $category => $weight) {
           if (empty($supplier_keywords[$category]) && empty($internal_keywords[$category])) {
               continue;
           }
           
           $category_score = self::calculate_category_score(
               isset($supplier_keywords[$category]) ? $supplier_keywords[$category] : array(),
               isset($internal_keywords[$category]) ? $internal_keywords[$category] : array(),
               $matched_keywords,
               $category
           );
           
           $weighted_score = $category_score * $weight;
           $score += $weighted_score;
           
           $category_scores[$category] = array(
               'raw_score' => $category_score,
               'weighted_score' => $weighted_score,
               'weight' => $weight
           );
       }
       
       // Calculate final percentage
       $final_score = ($score / $max_score) * 100;
       
       return array(
           'score' => min(100, $final_score),
           'matched_keywords' => $matched_keywords,
           'category_scores' => $category_scores
       );
   }

   /**
    * Calculate category-specific match score
    */
   private static function calculate_category_score($supplier_keywords, $internal_keywords, &$matched_keywords, $category) {
       if (empty($supplier_keywords) || empty($internal_keywords)) {
           return 0;
       }
       
       $matches = 0;
       $supplier_total = count($supplier_keywords);
       $internal_total = count($internal_keywords);
       
       // Initialize category in matched keywords
       if (!isset($matched_keywords[$category])) {
           $matched_keywords[$category] = array();
       }
       
       // Check each supplier keyword
       foreach ($supplier_keywords as $supplier_keyword) {
           $found = false;
           
           // Direct match
           if (in_array($supplier_keyword, $internal_keywords)) {
               $matches++;
               $found = true;
               $matched_keywords[$category][] = $supplier_keyword;
           }
           // Partial match for longer keywords
           else if (in_array($category, array('model', 'general', 'special_edition'))) {
               foreach ($internal_keywords as $internal_keyword) {
                   if (mb_strlen($supplier_keyword) > 3 && mb_strlen($internal_keyword) > 3) {
                       if (mb_stripos($supplier_keyword, $internal_keyword) !== false || 
                           mb_stripos($internal_keyword, $supplier_keyword) !== false) {
                           $matches += 0.7;
                           $found = true;
                           $matched_keywords[$category][] = $supplier_keyword . ' ≈ ' . $internal_keyword;
                           break;
                       }
                   }
               }
           }
           
           // Special dimension matching
           if (!$found && $category == 'dimensions') {
               foreach ($internal_keywords as $internal_dimension) {
                   if (preg_match('/(\d+)\s*[xX×]\s*(\d+)/', $supplier_keyword, $supplier_parts) &&
                       preg_match('/(\d+)\s*[xX×]\s*(\d+)/', $internal_dimension, $internal_parts)) {
                       
                       $length_diff = abs((int)$supplier_parts[1] - (int)$internal_parts[1]);
                       $gauge_diff = abs((int)$supplier_parts[2] - (int)$internal_parts[2]);
                       
                       if ($length_diff <= 2 && $gauge_diff <= 1) {
                           $matches += 0.8;
                           $found = true;
                           $matched_keywords[$category][] = $supplier_keyword . ' ≈ ' . $internal_dimension;
                           break;
                       }
                   }
               }
           }
       }
       
       // Calculate normalized score
       $max_count = max($supplier_total, $internal_total);
       $normalized_score = $max_count > 0 ? $matches / $max_count : 0;
       
       // Brand matching gets priority
       if ($category == 'brand' && $matches > 0) {
           if ($matches == $supplier_total && $matches == $internal_total) {
               $normalized_score = 1.0;
           } else {
               $normalized_score = max($normalized_score, 0.6);
           }
       }
       
       return $normalized_score;
   }

   /**
    * Normalize product name for better matching
    */
   public static function normalize_product_name($name) {
       if (empty($name)) {
           return '';
       }
       
       // Convert to lowercase
       $name = mb_strtolower(trim($name));
       
       // Replace common abbreviations
       $abbreviations = array(
           'ltd.' => 'limited',
           'ltd' => 'limited',
           'inc.' => 'incorporated',
           'inc' => 'incorporated',
           'co.' => 'company',
           'co' => 'company',
           'corp.' => 'corporation',
           'corp' => 'corporation',
           '&amp;' => '&',
           '&nbsp;' => ' '
       );
       
       $name = str_replace(array_keys($abbreviations), array_values($abbreviations), $name);
       
       // Normalize spaces and punctuation
       $name = preg_replace('/\s+/', ' ', $name);
       $name = str_replace(
           array('_', '/', '\\', '|', '+', '*', '@', '#', '$', '%', '^'),
           ' ',
           $name
       );
       
       // Remove parenthetical content about stock/quantity
       $name = preg_replace('/\([^)]*(?:stock|quantity|left|remaining|avail|sold\s*out)[^)]*\)/i', '', $name);
       
       // Standardize brand names
       $brand_standardizations = array(
           'romeo y julieta' => 'romeo y julieta',
           'romeo&julieta' => 'romeo y julieta',
           'romeo and julieta' => 'romeo y julieta',
           'h. upmann' => 'h upmann',
           'h&upmann' => 'h upmann',
           'hoyo de monterrey' => 'hoyo de monterrey',
           'hdm' => 'hoyo de monterrey',
           'montecristo' => 'montecristo',
           'monte-cristo' => 'montecristo',
           'monte cristo' => 'montecristo'
       );
       
       foreach ($brand_standardizations as $search => $replace) {
           $name = str_ireplace($search, $replace, $name);
       }
       
       // Normalize count formats
       $name = preg_replace('/(\d+)\s*ct\.?/i', '$1 count', $name);
       $name = preg_replace('/(\d+)\s*pc\.?s?/i', '$1 count', $name);
       $name = preg_replace('/(\d+)\s*[支只枝个根条片块]/u', '$1 count', $name);
       
       // Normalize dimension formats
       $name = preg_replace('/(\d+)\s*[xX×]\s*(\d+)/', '$1x$2', $name);
       
       // Final cleanup
       $name = trim(preg_replace('/\s+/', ' ', $name));
       
       return $name;
   }

   /**
    * Process supplier product for matching
    */
   public static function process_supplier_product($product_title, $dimensions = '') {
       $normalized_title = self::normalize_product_name($product_title);
       
       // Extract brand
       $brand = self::extract_brand($normalized_title);
       
       // Get categorized keywords
       $keywords = self::get_categorized_keywords($normalized_title);
       
       // Add dimensions if provided
       if (!empty($dimensions) && empty($keywords['dimensions'])) {
           $keywords['dimensions'][] = $dimensions;
       }
       
       // Extract key information
       $result = array(
           'title' => $product_title,
           'normalized_title' => $normalized_title,
           'brand' => $brand,
           'model' => !empty($keywords['model']) ? reset($keywords['model']) : '',
           'vitola' => !empty($keywords['vitola']) ? reset($keywords['vitola']) : '',
           'dimension_info' => array('ring_gauge' => '', 'length' => ''),
           'keywords' => $keywords
       );
       
       // Parse dimensions
       if (!empty($keywords['dimensions'])) {
           $dim = reset($keywords['dimensions']);
           if (preg_match('/(\d+)[xX×](\d+)/', $dim, $matches)) {
               $result['dimension_info']['ring_gauge'] = $matches[1];
               $result['dimension_info']['length'] = $matches[2];
           }
       }
       
       return $result;
   }

   /**
    * Process internal product for matching
    */
   public static function process_internal_product($product_data) {
       $result = array(
           'title' => '',
           'product_code' => '',
           'normalized_title' => '',
           'brand' => '',
           'model' => '',
           'vitola' => '',
           'dimension_info' => array('ring_gauge' => '', 'length' => ''),
           'keywords' => array()
       );
       
       // Handle different data types
       if (is_object($product_data)) {
           $product_data = (array)$product_data;
       } else if (!is_array($product_data)) {
           return $result;
       }
       
       // Extract title and SKU
       $title = '';
       if (isset($product_data['title'])) {
           $title = $product_data['title'];
       } else if (isset($product_data['product_title'])) {
           $title = $product_data['product_title'];
       } else if (isset($product_data['post_title'])) {
           $title = $product_data['post_title'];
       }
       
       $result['title'] = $title;
       $result['product_code'] = isset($product_data['sku']) ? $product_data['sku'] : '';
       
       // Normalize and process
       $result['normalized_title'] = self::normalize_product_name($title);
       
       // Extract brand
       $result['brand'] = isset($product_data['brand']) ? $product_data['brand'] : '';
       if (empty($result['brand'])) {
           $result['brand'] = self::extract_brand($result['normalized_title']);
       }
       
       // Get keywords
       $result['keywords'] = self::get_categorized_keywords($result['normalized_title']);
       
       // Extract model and vitola
       if (!empty($result['keywords']['model'])) {
           $result['model'] = reset($result['keywords']['model']);
       }
       if (!empty($result['keywords']['vitola'])) {
           $result['vitola'] = reset($result['keywords']['vitola']);
       }
       
       // Process dimensions
       if (isset($product_data['seat_row']) && isset($product_data['seat_number'])) {
           $dimensions = $product_data['seat_row'] . 'x' . $product_data['seat_number'];
           $result['dimension_info']['ring_gauge'] = $product_data['seat_row'];
           $result['dimension_info']['length'] = $product_data['seat_number'];
           
           if (empty($result['keywords']['dimensions'])) {
               $result['keywords']['dimensions'][] = $dimensions;
           }
       }
       
       return $result;
   }

   /**
    * Extract brand from product name
    */
   public static function extract_brand($product_name) {
       if (empty($product_name)) {
           return '';
       }
       
       $normalized_name = self::normalize_product_name($product_name);
       
       // Check all brands
       $all_brands = array_merge(
           self::get_cuban_brand_mappings(),
           self::get_non_cuban_brand_mappings()
       );
       
       foreach ($all_brands as $brand => $variations) {
           // Check main brand name
           if (mb_stripos($normalized_name, $brand) !== false) {
               return $brand;
           }
           
           // Check variations
           foreach ($variations as $variation) {
               if (mb_stripos($normalized_name, $variation) !== false) {
                   return $brand;
               }
           }
       }
       
       return '';
   }

   /**
    * Find best matches for supplier product
    */
   public static function find_best_matches($processed_supplier, $transformed_internal, $limit = 3, $include_debug = false) {
       $matches = array();
       
       // Get supplier keywords
       $supplier_keywords = $processed_supplier['keywords'];
       
       // Process each internal product
       foreach ($transformed_internal as $internal_product) {
           // Get internal keywords
           $internal_keywords = isset($internal_product['keywords']) ? $internal_product['keywords'] : array();
           
           // Calculate match score
           $match_result = self::calculate_match_score($supplier_keywords, $internal_keywords);
           $score = $match_result['score'];
           
           // Determine match type
           $match_type = 'No Match';
           if ($score >= 90) {
               $match_type = 'Exact Match';
           } else if ($score >= 75) {
               $match_type = 'Close Match';
           } else if ($score >= 60) {
               $match_type = 'Possible Match';
           }
           
           // Add to matches if score is sufficient
           if ($match_type != 'No Match') {
               $matches[] = array(
                   'product' => $internal_product,
                   'score' => $score,
                   'match_type' => $match_type,
                   'matched_terms' => $match_result['matched_keywords'],
                   'debug_info' => $include_debug ? $match_result : null
               );
           }
       }
       
       // Sort by score
       usort($matches, function($a, $b) {
           return $b['score'] <=> $a['score'];
       });
       
       // Return top matches
       return array_slice($matches, 0, $limit);
   }
}

// Initialize debug if needed
KT_Cigar_Debug::init('', 2);

// Log initialization
KT_Cigar_Debug::log("KT Cigar Mappings v6.0.0 initialized", 1, 'System');
